
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLOGOPleftPLUSMINUSleftDIVIDETIMESMODleftINCRDECRnonassocIFXnonassocELSEASSOP BREAK CASE CBCLOSED CBOPEN COLON COMMA CONST DECR DEFAULT DIVIDE ELSE EQUALS FOR ID IF INCR LENG_MODIFIER LOGOP MINUS MOD PLUS RBCLOSED RBOPEN RELOP RETURN SBCLOSED SBOPEN SEMICOLON SIGN_MODIFIER STORAGE_SPEC STRINGCONST SWITCH TIMES TYPE VOID WHILE nl ws\n        prog_ok : dec_prot_list function_list\n    \t            | function_list\n        \n        dec_prot_list : dec_prot_list dec_prot\n    \t                    | dec_prot\n        \n        dec_prot : decl\n    \t                | function_prot\n        \n        function_list : function \n                            | function_list function\n        \n        function_decl : type pointer RBOPEN parameter_list RBCLOSED\n                            | void ID RBOPEN parameter_list RBCLOSED\n                            | STORAGE_SPEC type pointer RBOPEN parameter_list RBCLOSED\n                            | STORAGE_SPEC void ID RBOPEN parameter_list RBCLOSED\n        \n        function_prot : function_decl SEMICOLON \n        \n        function : function_decl CBOPEN function_body CBCLOSED\n        \n        function_body : empty\n    \t                | decl_list stmt_list\n        \n        parameter_list : parameter_list COMMA parameter\n                            | parameter\n                            | void\n        \n        parameter : type pointer\n    \t                | type pointer SBOPEN SBCLOSED\n        \n        decl_list : decl \n                        | decl_list decl\n        \n        decl : type id_list SEMICOLON\n    \t        | STORAGE_SPEC type id_list SEMICOLON\n        \n        id_list : id_list COMMA ident\n    \t            | ident\n        \n        ident : pointer\n                    | pointer SBOPEN CONST SBCLOSED\n                    | pointer EQUALS CONST\n                    | pointer EQUALS MINUS CONST\n                    | pointer SBOPEN SBCLOSED EQUALS CBOPEN const_list CBCLOSED\n                    | pointer SBOPEN SBCLOSED EQUALS CBOPEN string_const_list CBCLOSED\n        \n        pointer : TIMES pointer\n    \t            | ID\n        \n        const_list : const_list COMMA CONST\n    \t                | CONST\n        \n        string_const_list : string_const_list COMMA STRINGCONST\n\t                            | STRINGCONST\n        \n        void : VOID \n                | empty\n        \n        type : SIGN_MODIFIER TYPE\n                    | LENG_MODIFIER TYPE\n                    | SIGN_MODIFIER LENG_MODIFIER TYPE\n                    | LENG_MODIFIER\n                    | TYPE\n        \n        stmt_list : stmts \n                    | empty\n        \n        stmts : stmts stmt\n    \t            | stmt\n        \n        block : CBOPEN stmt_list CBCLOSED\n        \n        stmt : assign_stmt SEMICOLON\n                    | if_stmt\n                    | while_stmt\n                    | block\n                    | BREAK SEMICOLON\n                    | return_stmt SEMICOLON\n                    | for_stmt\n                    | switch_stmt\n                    | SEMICOLON\n        \n        assign_stmt : ID EQUALS expr\n                        | ID ASSOP expr\n                        | expr\n        \n        term : ID\n                | CONST\n                | ID RBOPEN arg_list RBCLOSED\n                | ID SBOPEN CONST SBCLOSED\n                | ID SBOPEN ID SBCLOSED\n        \n        arg_list : args \n                    | empty\n        \n        args : args COMMA arg\n    \t            | arg\n        \n        arg : term\n    \t        | STRINGCONST\n        \n        expr :  expr PLUS expr\n                    | expr MINUS expr\n                    | expr DIVIDE expr\n                    | expr TIMES expr\n                    | expr MOD expr\n                    | expr INCR\n                    | INCR expr\n                    | expr DECR\n                    | DECR expr\n                    | RBOPEN expr RBCLOSED\n                    | MINUS expr\n                    | PLUS expr\n                    | term\n        \n        if_stmt : IF RBOPEN cond RBCLOSED stmt  %prec IFX\n    \t            | IF RBOPEN cond RBCLOSED stmt ELSE stmt\n        \n        cond : cond LOGOP cond\n                    | RBOPEN cond RBCLOSED\n                    | comparison\n                    | expr \n        \n        comparison : expr RELOP expr\n        \n        while_stmt : WHILE RBOPEN cond RBCLOSED stmt \n        \n        for_stmt : FOR RBOPEN expr_list SEMICOLON cond SEMICOLON expr_list RBCLOSED stmt \n        \n        expr_list : expr_list COMMA assign_stmt\n    \t                | assign_stmt\n        \n        return_stmt : RETURN expr\n    \t                | RETURN\n        \n        switch_stmt : SWITCH RBOPEN ID RBCLOSED CBOPEN case_list CBCLOSED\n    \t                | SWITCH RBOPEN ID RBCLOSED CBOPEN case_list default_stmt CBCLOSED\n        \n        case_list : case_list case_stmt\n    \t                | case_stmt\n        \n        case_stmt : CASE CONST COLON stmt_list\n        \n        default_stmt : DEFAULT COLON stmt_list \n        \n        empty :\n        '
    
_lr_action_items = {'STORAGE_SPEC':([0,2,3,4,5,6,7,17,18,19,23,24,40,41,44,56,58,97,],[10,10,22,-4,-7,-5,-6,22,-3,-8,43,-13,43,-22,-24,-14,-23,-25,]),'SIGN_MODIFIER':([0,2,3,4,5,6,7,10,17,18,19,22,23,24,40,41,43,44,46,53,56,58,97,98,99,130,],[12,12,12,-4,-7,-5,-6,12,12,-3,-8,12,12,-13,12,-22,12,-24,12,12,-14,-23,-25,12,12,12,]),'LENG_MODIFIER':([0,2,3,4,5,6,7,10,12,17,18,19,22,23,24,40,41,43,44,46,53,56,58,97,98,99,130,],[14,14,14,-4,-7,-5,-6,14,34,14,-3,-8,14,14,-13,14,-22,14,-24,14,14,-14,-23,-25,14,14,14,]),'TYPE':([0,2,3,4,5,6,7,10,12,14,17,18,19,22,23,24,34,40,41,43,44,46,53,56,58,97,98,99,130,],[13,13,13,-4,-7,-5,-6,13,33,35,13,-3,-8,13,13,-13,54,13,-22,13,-24,13,13,-14,-23,-25,13,13,13,]),'VOID':([0,2,3,4,5,6,7,10,17,18,19,22,24,44,46,53,56,97,98,99,],[15,15,15,-4,-7,-5,-6,15,15,-3,-8,15,-13,-24,15,15,-14,-25,15,15,]),'ID':([0,2,3,4,5,6,7,9,10,11,13,14,15,16,17,18,19,21,22,24,28,30,31,33,35,37,40,41,42,44,45,54,56,58,59,61,62,64,65,66,69,70,74,76,77,80,81,82,83,87,89,97,101,102,103,104,105,106,107,108,109,110,111,112,113,116,119,122,123,152,158,168,173,174,175,176,177,178,187,190,198,199,205,207,212,213,214,215,216,],[-107,-107,-107,-4,-7,-5,-6,29,-107,32,-46,-45,-40,-41,-107,-3,-8,29,-107,-13,29,29,52,-42,-43,29,71,-22,29,-24,29,-44,-14,-23,71,-60,-50,-53,-54,-55,-58,-59,118,71,118,118,118,118,118,29,29,-25,-49,-52,-56,-57,118,118,118,145,118,118,118,118,118,118,118,71,161,118,-51,118,71,118,118,71,118,71,-88,-95,71,71,-89,-101,71,-102,71,71,-96,]),'$end':([1,3,5,17,19,56,],[0,-2,-7,-1,-8,-14,]),'CBOPEN':([8,20,40,41,44,58,59,61,62,64,65,66,69,70,76,97,101,102,103,104,129,132,136,158,165,166,173,176,179,187,190,198,205,207,212,213,214,215,216,],[23,23,76,-22,-24,-23,76,-60,-50,-53,-54,-55,-58,-59,76,-25,-49,-52,-56,-57,-9,164,-10,-51,-11,-12,76,76,193,-88,-95,76,-89,-101,76,-102,76,76,-96,]),'SEMICOLON':([8,25,26,27,29,40,41,44,49,50,51,58,59,61,62,63,64,65,66,67,68,69,70,71,72,76,77,84,85,86,88,95,97,101,102,103,104,114,115,118,121,124,125,126,127,129,131,133,136,137,138,147,148,149,150,151,154,155,156,158,159,160,165,166,167,169,170,173,176,186,187,188,189,190,191,192,194,196,198,205,207,212,213,214,215,216,],[24,44,-28,-27,-35,61,-22,-24,-34,97,-28,-23,61,-60,-50,102,-53,-54,-55,103,104,-58,-59,-64,-63,61,-100,-87,-65,-28,-26,-30,-25,-49,-52,-56,-57,-80,-82,-64,-99,-86,-85,-81,-83,-9,-29,-31,-10,-61,-62,-75,-76,-77,-78,-79,-92,-93,-84,-51,177,-98,-11,-12,-66,-68,-67,61,61,-91,-88,-90,-94,-95,199,-97,-32,-33,61,-89,-101,61,-102,61,61,-96,]),'TIMES':([9,13,14,21,28,30,33,35,37,42,45,54,71,72,84,85,87,89,114,115,117,118,121,124,125,126,127,137,138,147,148,149,150,151,155,156,167,169,170,172,189,],[28,-46,-45,28,28,28,-42,-43,28,28,28,-44,-64,112,-87,-65,28,28,-80,-82,112,-64,112,112,112,-81,-83,112,112,112,112,-77,-78,-79,112,-84,-66,-68,-67,112,112,]),'RBCLOSED':([15,16,29,46,49,53,71,72,84,85,90,91,92,98,99,100,107,114,115,117,118,124,125,126,127,128,134,135,137,138,139,140,141,142,143,144,147,148,149,150,151,153,154,155,156,157,160,161,163,167,169,170,171,172,180,185,186,188,189,192,206,],[-40,-41,-35,-107,-34,-107,-64,-63,-87,-65,129,-18,-19,-107,-107,136,-107,-80,-82,156,-64,-86,-85,-81,-83,-20,165,166,-61,-62,167,-69,-70,-72,-73,-74,-75,-76,-77,-78,-79,173,-92,-93,-84,176,-98,179,-17,-66,-68,-67,186,156,-21,-71,-91,-90,-94,-97,212,]),'COMMA':([15,16,25,26,27,29,46,49,50,51,53,71,72,84,85,86,88,90,91,92,95,98,99,100,114,115,118,124,125,126,127,128,131,133,134,135,137,138,140,142,143,144,147,148,149,150,151,156,159,160,163,167,169,170,180,181,182,183,184,185,192,194,196,203,204,206,],[-40,-41,45,-28,-27,-35,-107,-34,45,-28,-107,-64,-63,-87,-65,-28,-26,130,-18,-19,-30,-107,-107,130,-80,-82,-64,-86,-85,-81,-83,-20,-29,-31,130,130,-61,-62,168,-72,-73,-74,-75,-76,-77,-78,-79,-84,178,-98,-17,-66,-68,-67,-21,195,197,-37,-39,-71,-97,-32,-33,-36,-38,178,]),'CBCLOSED':([23,38,39,40,41,44,57,58,59,60,61,62,64,65,66,69,70,76,97,101,102,103,104,120,158,181,182,183,184,187,190,200,201,203,204,205,207,208,209,213,214,215,216,217,218,],[-107,56,-15,-107,-22,-24,-16,-23,-47,-48,-60,-50,-53,-54,-55,-58,-59,-107,-25,-49,-52,-56,-57,158,-51,194,196,-37,-39,-88,-95,207,-104,-36,-38,-89,-101,213,-103,-102,-107,-107,-96,-106,-105,]),'RBOPEN':([26,29,32,36,40,41,44,49,51,52,55,58,59,61,62,64,65,66,69,70,71,73,74,75,76,77,78,79,80,81,82,83,97,101,102,103,104,105,106,109,110,111,112,113,116,118,119,122,152,158,173,174,175,176,177,178,187,190,198,199,205,207,212,213,214,215,216,],[46,-35,53,46,74,-22,-24,-34,98,99,98,-23,74,-60,-50,-53,-54,-55,-58,-59,107,116,74,119,74,74,122,123,74,74,74,74,-25,-49,-52,-56,-57,74,74,74,74,74,74,74,152,107,152,74,152,-51,74,152,74,74,152,74,-88,-95,74,74,-89,-101,74,-102,74,74,-96,]),'SBOPEN':([26,29,49,51,71,86,118,128,],[47,-35,-34,47,108,47,108,162,]),'EQUALS':([26,29,49,51,71,86,94,],[48,-35,-34,48,105,48,132,]),'BREAK':([40,41,44,58,59,61,62,64,65,66,69,70,76,97,101,102,103,104,158,173,176,187,190,198,205,207,212,213,214,215,216,],[67,-22,-24,-23,67,-60,-50,-53,-54,-55,-58,-59,67,-25,-49,-52,-56,-57,-51,67,67,-88,-95,67,-89,-101,67,-102,67,67,-96,]),'IF':([40,41,44,58,59,61,62,64,65,66,69,70,76,97,101,102,103,104,158,173,176,187,190,198,205,207,212,213,214,215,216,],[73,-22,-24,-23,73,-60,-50,-53,-54,-55,-58,-59,73,-25,-49,-52,-56,-57,-51,73,73,-88,-95,73,-89,-101,73,-102,73,73,-96,]),'WHILE':([40,41,44,58,59,61,62,64,65,66,69,70,76,97,101,102,103,104,158,173,176,187,190,198,205,207,212,213,214,215,216,],[75,-22,-24,-23,75,-60,-50,-53,-54,-55,-58,-59,75,-25,-49,-52,-56,-57,-51,75,75,-88,-95,75,-89,-101,75,-102,75,75,-96,]),'RETURN':([40,41,44,58,59,61,62,64,65,66,69,70,76,97,101,102,103,104,158,173,176,187,190,198,205,207,212,213,214,215,216,],[77,-22,-24,-23,77,-60,-50,-53,-54,-55,-58,-59,77,-25,-49,-52,-56,-57,-51,77,77,-88,-95,77,-89,-101,77,-102,77,77,-96,]),'FOR':([40,41,44,58,59,61,62,64,65,66,69,70,76,97,101,102,103,104,158,173,176,187,190,198,205,207,212,213,214,215,216,],[78,-22,-24,-23,78,-60,-50,-53,-54,-55,-58,-59,78,-25,-49,-52,-56,-57,-51,78,78,-88,-95,78,-89,-101,78,-102,78,78,-96,]),'SWITCH':([40,41,44,58,59,61,62,64,65,66,69,70,76,97,101,102,103,104,158,173,176,187,190,198,205,207,212,213,214,215,216,],[79,-22,-24,-23,79,-60,-50,-53,-54,-55,-58,-59,79,-25,-49,-52,-56,-57,-51,79,79,-88,-95,79,-89,-101,79,-102,79,79,-96,]),'INCR':([40,41,44,58,59,61,62,64,65,66,69,70,71,72,74,76,77,80,81,82,83,84,85,97,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,121,122,124,125,126,127,137,138,147,148,149,150,151,152,155,156,158,167,169,170,172,173,174,175,176,177,178,187,189,190,198,199,205,207,212,213,214,215,216,],[82,-22,-24,-23,82,-60,-50,-53,-54,-55,-58,-59,-64,114,82,82,82,82,82,82,82,-87,-65,-25,-49,-52,-56,-57,82,82,82,82,82,82,82,-80,-82,82,114,-64,82,114,82,114,114,-81,-83,114,114,114,114,114,114,114,82,114,-84,-51,-66,-68,-67,114,82,82,82,82,82,82,-88,114,-95,82,82,-89,-101,82,-102,82,82,-96,]),'DECR':([40,41,44,58,59,61,62,64,65,66,69,70,71,72,74,76,77,80,81,82,83,84,85,97,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,121,122,124,125,126,127,137,138,147,148,149,150,151,152,155,156,158,167,169,170,172,173,174,175,176,177,178,187,189,190,198,199,205,207,212,213,214,215,216,],[83,-22,-24,-23,83,-60,-50,-53,-54,-55,-58,-59,-64,115,83,83,83,83,83,83,83,-87,-65,-25,-49,-52,-56,-57,83,83,83,83,83,83,83,-80,-82,83,115,-64,83,115,83,115,115,-81,-83,115,115,115,115,115,115,115,83,115,-84,-51,-66,-68,-67,115,83,83,83,83,83,83,-88,115,-95,83,83,-89,-101,83,-102,83,83,-96,]),'MINUS':([40,41,44,48,58,59,61,62,64,65,66,69,70,71,72,74,76,77,80,81,82,83,84,85,97,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,121,122,124,125,126,127,137,138,147,148,149,150,151,152,155,156,158,167,169,170,172,173,174,175,176,177,178,187,189,190,198,199,205,207,212,213,214,215,216,],[81,-22,-24,96,-23,81,-60,-50,-53,-54,-55,-58,-59,-64,110,81,81,81,81,81,81,81,-87,-65,-25,-49,-52,-56,-57,81,81,81,81,81,81,81,-80,-82,81,110,-64,81,110,81,-86,-85,-81,-83,110,110,-75,-76,-77,-78,-79,81,110,-84,-51,-66,-68,-67,110,81,81,81,81,81,81,-88,110,-95,81,81,-89,-101,81,-102,81,81,-96,]),'PLUS':([40,41,44,58,59,61,62,64,65,66,69,70,71,72,74,76,77,80,81,82,83,84,85,97,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,121,122,124,125,126,127,137,138,147,148,149,150,151,152,155,156,158,167,169,170,172,173,174,175,176,177,178,187,189,190,198,199,205,207,212,213,214,215,216,],[80,-22,-24,-23,80,-60,-50,-53,-54,-55,-58,-59,-64,109,80,80,80,80,80,80,80,-87,-65,-25,-49,-52,-56,-57,80,80,80,80,80,80,80,-80,-82,80,109,-64,80,109,80,-86,-85,-81,-83,109,109,-75,-76,-77,-78,-79,80,109,-84,-51,-66,-68,-67,109,80,80,80,80,80,80,-88,109,-95,80,80,-89,-101,80,-102,80,80,-96,]),'CONST':([40,41,44,47,48,58,59,61,62,64,65,66,69,70,74,76,77,80,81,82,83,96,97,101,102,103,104,105,106,107,108,109,110,111,112,113,116,119,122,152,158,164,168,173,174,175,176,177,178,187,190,195,198,199,202,205,207,212,213,214,215,216,],[85,-22,-24,93,95,-23,85,-60,-50,-53,-54,-55,-58,-59,85,85,85,85,85,85,85,133,-25,-49,-52,-56,-57,85,85,85,146,85,85,85,85,85,85,85,85,85,-51,183,85,85,85,85,85,85,85,-88,-95,203,85,85,211,-89,-101,85,-102,85,85,-96,]),'SBCLOSED':([47,93,145,146,162,],[94,131,169,170,180,]),'DEFAULT':([59,60,61,62,64,65,66,69,70,101,102,103,104,158,187,190,200,201,205,207,209,213,215,216,218,],[-47,-48,-60,-50,-53,-54,-55,-58,-59,-49,-52,-56,-57,-51,-88,-95,210,-104,-89,-101,-103,-102,-107,-96,-105,]),'CASE':([59,60,61,62,64,65,66,69,70,101,102,103,104,158,187,190,193,200,201,205,207,209,213,215,216,218,],[-47,-48,-60,-50,-53,-54,-55,-58,-59,-49,-52,-56,-57,-51,-88,-95,202,202,-104,-89,-101,-103,-102,-107,-96,-105,]),'ELSE':([61,64,65,66,69,70,102,103,104,158,187,190,205,207,213,216,],[-60,-53,-54,-55,-58,-59,-52,-56,-57,-51,198,-95,-89,-101,-102,-96,]),'ASSOP':([71,],[106,]),'DIVIDE':([71,72,84,85,114,115,117,118,121,124,125,126,127,137,138,147,148,149,150,151,155,156,167,169,170,172,189,],[-64,111,-87,-65,-80,-82,111,-64,111,111,111,-81,-83,111,111,111,111,-77,-78,-79,111,-84,-66,-68,-67,111,111,]),'MOD':([71,72,84,85,114,115,117,118,121,124,125,126,127,137,138,147,148,149,150,151,155,156,167,169,170,172,189,],[-64,113,-87,-65,-80,-82,113,-64,113,113,113,-81,-83,113,113,113,113,-77,-78,-79,113,-84,-66,-68,-67,113,113,]),'RELOP':([84,85,114,115,118,124,125,126,127,147,148,149,150,151,155,156,167,169,170,172,],[-87,-65,-80,-82,-64,-86,-85,-81,-83,-75,-76,-77,-78,-79,175,-84,-66,-68,-67,175,]),'LOGOP':([84,85,114,115,118,124,125,126,127,147,148,149,150,151,153,154,155,156,157,167,169,170,171,172,186,188,189,191,],[-87,-65,-80,-82,-64,-86,-85,-81,-83,-75,-76,-77,-78,-79,174,-92,-93,-84,174,-66,-68,-67,174,-93,-91,-90,-94,174,]),'STRINGCONST':([107,164,168,197,],[144,184,144,204,]),'COLON':([210,211,],[214,215,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog_ok':([0,],[1,]),'dec_prot_list':([0,],[2,]),'function_list':([0,2,],[3,17,]),'dec_prot':([0,2,],[4,18,]),'function':([0,2,3,17,],[5,5,19,19,]),'decl':([0,2,23,40,],[6,6,41,58,]),'function_prot':([0,2,],[7,7,]),'function_decl':([0,2,3,17,],[8,8,20,20,]),'type':([0,2,3,10,17,22,23,40,43,46,53,98,99,130,],[9,9,21,30,21,37,42,42,87,89,89,89,89,89,]),'void':([0,2,3,10,17,22,46,53,98,99,],[11,11,11,31,11,31,92,92,92,92,]),'empty':([0,2,3,10,17,22,23,40,46,53,76,98,99,107,214,215,],[16,16,16,16,16,16,39,60,16,16,60,16,16,141,60,60,]),'id_list':([9,30,42,87,],[25,50,25,50,]),'pointer':([9,21,28,30,37,42,45,87,89,],[26,36,49,51,55,86,86,86,128,]),'ident':([9,30,42,45,87,],[27,27,27,88,27,]),'function_body':([23,],[38,]),'decl_list':([23,],[40,]),'stmt_list':([40,76,214,215,],[57,120,217,218,]),'stmts':([40,76,214,215,],[59,59,59,59,]),'stmt':([40,59,76,173,176,198,212,214,215,],[62,101,62,187,190,205,216,62,62,]),'assign_stmt':([40,59,76,122,173,176,178,198,199,212,214,215,],[63,63,63,160,63,63,192,63,160,63,63,63,]),'if_stmt':([40,59,76,173,176,198,212,214,215,],[64,64,64,64,64,64,64,64,64,]),'while_stmt':([40,59,76,173,176,198,212,214,215,],[65,65,65,65,65,65,65,65,65,]),'block':([40,59,76,173,176,198,212,214,215,],[66,66,66,66,66,66,66,66,66,]),'return_stmt':([40,59,76,173,176,198,212,214,215,],[68,68,68,68,68,68,68,68,68,]),'for_stmt':([40,59,76,173,176,198,212,214,215,],[69,69,69,69,69,69,69,69,69,]),'switch_stmt':([40,59,76,173,176,198,212,214,215,],[70,70,70,70,70,70,70,70,70,]),'expr':([40,59,74,76,77,80,81,82,83,105,106,109,110,111,112,113,116,119,122,152,173,174,175,176,177,178,198,199,212,214,215,],[72,72,117,72,121,124,125,126,127,137,138,147,148,149,150,151,155,155,72,172,72,155,189,72,155,72,72,72,72,72,72,]),'term':([40,59,74,76,77,80,81,82,83,105,106,107,109,110,111,112,113,116,119,122,152,168,173,174,175,176,177,178,198,199,212,214,215,],[84,84,84,84,84,84,84,84,84,84,84,143,84,84,84,84,84,84,84,84,84,143,84,84,84,84,84,84,84,84,84,84,84,]),'parameter_list':([46,53,98,99,],[90,100,134,135,]),'parameter':([46,53,98,99,130,],[91,91,91,91,163,]),'arg_list':([107,],[139,]),'args':([107,],[140,]),'arg':([107,168,],[142,185,]),'cond':([116,119,152,174,177,],[153,157,171,188,191,]),'comparison':([116,119,152,174,177,],[154,154,154,154,154,]),'expr_list':([122,199,],[159,206,]),'const_list':([164,],[181,]),'string_const_list':([164,],[182,]),'case_list':([193,],[200,]),'case_stmt':([193,200,],[201,209,]),'default_stmt':([200,],[208,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog_ok","S'",1,None,None,None),
  ('prog_ok -> dec_prot_list function_list','prog_ok',2,'p_prog_ok','myParser.py',31),
  ('prog_ok -> function_list','prog_ok',1,'p_prog_ok','myParser.py',32),
  ('dec_prot_list -> dec_prot_list dec_prot','dec_prot_list',2,'p_dec_prot_list','myParser.py',38),
  ('dec_prot_list -> dec_prot','dec_prot_list',1,'p_dec_prot_list','myParser.py',39),
  ('dec_prot -> decl','dec_prot',1,'p_dec_prot','myParser.py',44),
  ('dec_prot -> function_prot','dec_prot',1,'p_dec_prot','myParser.py',45),
  ('function_list -> function','function_list',1,'p_function_list','myParser.py',50),
  ('function_list -> function_list function','function_list',2,'p_function_list','myParser.py',51),
  ('function_decl -> type pointer RBOPEN parameter_list RBCLOSED','function_decl',5,'p_function_decl','myParser.py',56),
  ('function_decl -> void ID RBOPEN parameter_list RBCLOSED','function_decl',5,'p_function_decl','myParser.py',57),
  ('function_decl -> STORAGE_SPEC type pointer RBOPEN parameter_list RBCLOSED','function_decl',6,'p_function_decl','myParser.py',58),
  ('function_decl -> STORAGE_SPEC void ID RBOPEN parameter_list RBCLOSED','function_decl',6,'p_function_decl','myParser.py',59),
  ('function_prot -> function_decl SEMICOLON','function_prot',2,'p_function_prot','myParser.py',64),
  ('function -> function_decl CBOPEN function_body CBCLOSED','function',4,'p_function','myParser.py',69),
  ('function_body -> empty','function_body',1,'p_function_body','myParser.py',74),
  ('function_body -> decl_list stmt_list','function_body',2,'p_function_body','myParser.py',75),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','myParser.py',80),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','myParser.py',81),
  ('parameter_list -> void','parameter_list',1,'p_parameter_list','myParser.py',82),
  ('parameter -> type pointer','parameter',2,'p_parameter','myParser.py',87),
  ('parameter -> type pointer SBOPEN SBCLOSED','parameter',4,'p_parameter','myParser.py',88),
  ('decl_list -> decl','decl_list',1,'p_decl_list','myParser.py',93),
  ('decl_list -> decl_list decl','decl_list',2,'p_decl_list','myParser.py',94),
  ('decl -> type id_list SEMICOLON','decl',3,'p_decl','myParser.py',98),
  ('decl -> STORAGE_SPEC type id_list SEMICOLON','decl',4,'p_decl','myParser.py',99),
  ('id_list -> id_list COMMA ident','id_list',3,'p_id_list','myParser.py',104),
  ('id_list -> ident','id_list',1,'p_id_list','myParser.py',105),
  ('ident -> pointer','ident',1,'p_ident','myParser.py',110),
  ('ident -> pointer SBOPEN CONST SBCLOSED','ident',4,'p_ident','myParser.py',111),
  ('ident -> pointer EQUALS CONST','ident',3,'p_ident','myParser.py',112),
  ('ident -> pointer EQUALS MINUS CONST','ident',4,'p_ident','myParser.py',113),
  ('ident -> pointer SBOPEN SBCLOSED EQUALS CBOPEN const_list CBCLOSED','ident',7,'p_ident','myParser.py',114),
  ('ident -> pointer SBOPEN SBCLOSED EQUALS CBOPEN string_const_list CBCLOSED','ident',7,'p_ident','myParser.py',115),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','myParser.py',120),
  ('pointer -> ID','pointer',1,'p_pointer','myParser.py',121),
  ('const_list -> const_list COMMA CONST','const_list',3,'p_const_list','myParser.py',126),
  ('const_list -> CONST','const_list',1,'p_const_list','myParser.py',127),
  ('string_const_list -> string_const_list COMMA STRINGCONST','string_const_list',3,'p_string_const_list','myParser.py',132),
  ('string_const_list -> STRINGCONST','string_const_list',1,'p_string_const_list','myParser.py',133),
  ('void -> VOID','void',1,'p_void','myParser.py',138),
  ('void -> empty','void',1,'p_void','myParser.py',139),
  ('type -> SIGN_MODIFIER TYPE','type',2,'p_type','myParser.py',144),
  ('type -> LENG_MODIFIER TYPE','type',2,'p_type','myParser.py',145),
  ('type -> SIGN_MODIFIER LENG_MODIFIER TYPE','type',3,'p_type','myParser.py',146),
  ('type -> LENG_MODIFIER','type',1,'p_type','myParser.py',147),
  ('type -> TYPE','type',1,'p_type','myParser.py',148),
  ('stmt_list -> stmts','stmt_list',1,'p_stmt_list','myParser.py',153),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','myParser.py',154),
  ('stmts -> stmts stmt','stmts',2,'p_stmts','myParser.py',159),
  ('stmts -> stmt','stmts',1,'p_stmts','myParser.py',160),
  ('block -> CBOPEN stmt_list CBCLOSED','block',3,'p_block','myParser.py',165),
  ('stmt -> assign_stmt SEMICOLON','stmt',2,'p_stmt','myParser.py',170),
  ('stmt -> if_stmt','stmt',1,'p_stmt','myParser.py',171),
  ('stmt -> while_stmt','stmt',1,'p_stmt','myParser.py',172),
  ('stmt -> block','stmt',1,'p_stmt','myParser.py',173),
  ('stmt -> BREAK SEMICOLON','stmt',2,'p_stmt','myParser.py',174),
  ('stmt -> return_stmt SEMICOLON','stmt',2,'p_stmt','myParser.py',175),
  ('stmt -> for_stmt','stmt',1,'p_stmt','myParser.py',176),
  ('stmt -> switch_stmt','stmt',1,'p_stmt','myParser.py',177),
  ('stmt -> SEMICOLON','stmt',1,'p_stmt','myParser.py',178),
  ('assign_stmt -> ID EQUALS expr','assign_stmt',3,'p_assign_stmt','myParser.py',183),
  ('assign_stmt -> ID ASSOP expr','assign_stmt',3,'p_assign_stmt','myParser.py',184),
  ('assign_stmt -> expr','assign_stmt',1,'p_assign_stmt','myParser.py',185),
  ('term -> ID','term',1,'p_term','myParser.py',190),
  ('term -> CONST','term',1,'p_term','myParser.py',191),
  ('term -> ID RBOPEN arg_list RBCLOSED','term',4,'p_term','myParser.py',192),
  ('term -> ID SBOPEN CONST SBCLOSED','term',4,'p_term','myParser.py',193),
  ('term -> ID SBOPEN ID SBCLOSED','term',4,'p_term','myParser.py',194),
  ('arg_list -> args','arg_list',1,'p_arg_list','myParser.py',199),
  ('arg_list -> empty','arg_list',1,'p_arg_list','myParser.py',200),
  ('args -> args COMMA arg','args',3,'p_args','myParser.py',205),
  ('args -> arg','args',1,'p_args','myParser.py',206),
  ('arg -> term','arg',1,'p_arg','myParser.py',211),
  ('arg -> STRINGCONST','arg',1,'p_arg','myParser.py',212),
  ('expr -> expr PLUS expr','expr',3,'p_expr','myParser.py',218),
  ('expr -> expr MINUS expr','expr',3,'p_expr','myParser.py',219),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','myParser.py',220),
  ('expr -> expr TIMES expr','expr',3,'p_expr','myParser.py',221),
  ('expr -> expr MOD expr','expr',3,'p_expr','myParser.py',222),
  ('expr -> expr INCR','expr',2,'p_expr','myParser.py',223),
  ('expr -> INCR expr','expr',2,'p_expr','myParser.py',224),
  ('expr -> expr DECR','expr',2,'p_expr','myParser.py',225),
  ('expr -> DECR expr','expr',2,'p_expr','myParser.py',226),
  ('expr -> RBOPEN expr RBCLOSED','expr',3,'p_expr','myParser.py',227),
  ('expr -> MINUS expr','expr',2,'p_expr','myParser.py',228),
  ('expr -> PLUS expr','expr',2,'p_expr','myParser.py',229),
  ('expr -> term','expr',1,'p_expr','myParser.py',230),
  ('if_stmt -> IF RBOPEN cond RBCLOSED stmt','if_stmt',5,'p_if_stmt','myParser.py',235),
  ('if_stmt -> IF RBOPEN cond RBCLOSED stmt ELSE stmt','if_stmt',7,'p_if_stmt','myParser.py',236),
  ('cond -> cond LOGOP cond','cond',3,'p_cond','myParser.py',241),
  ('cond -> RBOPEN cond RBCLOSED','cond',3,'p_cond','myParser.py',242),
  ('cond -> comparison','cond',1,'p_cond','myParser.py',243),
  ('cond -> expr','cond',1,'p_cond','myParser.py',244),
  ('comparison -> expr RELOP expr','comparison',3,'p_comparison','myParser.py',249),
  ('while_stmt -> WHILE RBOPEN cond RBCLOSED stmt','while_stmt',5,'p_while_stmt','myParser.py',254),
  ('for_stmt -> FOR RBOPEN expr_list SEMICOLON cond SEMICOLON expr_list RBCLOSED stmt','for_stmt',9,'p_for_stmt','myParser.py',259),
  ('expr_list -> expr_list COMMA assign_stmt','expr_list',3,'p_expr_list','myParser.py',264),
  ('expr_list -> assign_stmt','expr_list',1,'p_expr_list','myParser.py',265),
  ('return_stmt -> RETURN expr','return_stmt',2,'p_return_stmt','myParser.py',270),
  ('return_stmt -> RETURN','return_stmt',1,'p_return_stmt','myParser.py',271),
  ('switch_stmt -> SWITCH RBOPEN ID RBCLOSED CBOPEN case_list CBCLOSED','switch_stmt',7,'p_switch_stmt','myParser.py',276),
  ('switch_stmt -> SWITCH RBOPEN ID RBCLOSED CBOPEN case_list default_stmt CBCLOSED','switch_stmt',8,'p_switch_stmt','myParser.py',277),
  ('case_list -> case_list case_stmt','case_list',2,'p_case_list','myParser.py',282),
  ('case_list -> case_stmt','case_list',1,'p_case_list','myParser.py',283),
  ('case_stmt -> CASE CONST COLON stmt_list','case_stmt',4,'p_case_stmt','myParser.py',288),
  ('default_stmt -> DEFAULT COLON stmt_list','default_stmt',3,'p_default_stmt','myParser.py',293),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',304),
]

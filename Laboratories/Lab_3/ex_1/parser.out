Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    nl
    ws

Grammar

Rule 0     S' -> prog
Rule 1     prog -> decl_list stmt_list
Rule 2     decl_list -> decl_list decl
Rule 3     decl_list -> <empty>
Rule 4     decl -> type var_list S
Rule 5     type -> INT_TYPE
Rule 6     type -> DOUBLE_TYPE
Rule 7     var_list -> var
Rule 8     var_list -> var_list CM var
Rule 9     var -> ID array
Rule 10    array -> empty
Rule 11    array -> array SO INT SC
Rule 12    stmt_list -> stmt_list stmt
Rule 13    stmt_list -> stmt
Rule 14    stmt -> if
Rule 15    stmt -> while
Rule 16    stmt -> assignment
Rule 17    stmt -> print
Rule 18    stmt -> BO stmt_list BC
Rule 19    assignment -> id S
Rule 20    assignment -> id EQ exp S
Rule 21    print -> PRINT id S
Rule 22    if -> IF if_condition stmt
Rule 23    if -> IF if_condition stmt ELSE stmt
Rule 24    if_condition -> RO exp RC
Rule 25    while -> WHILE while_condition stmt
Rule 26    while_condition -> RO exp RC
Rule 27    exp -> exp AND exp
Rule 28    exp -> exp OR exp
Rule 29    exp -> NOT exp
Rule 30    exp -> exp EQ EQ exp
Rule 31    exp -> exp MIN exp
Rule 32    exp -> exp MAJ exp
Rule 33    exp -> exp MAJ_EQ exp
Rule 34    exp -> exp EQ_MAJ exp
Rule 35    exp -> exp MIN_EQ exp
Rule 36    exp -> exp EQ_MIN exp
Rule 37    exp -> exp PLUS exp
Rule 38    exp -> exp MINUS exp
Rule 39    exp -> exp STAR exp
Rule 40    exp -> exp DIV exp
Rule 41    exp -> RO exp RC
Rule 42    exp -> id
Rule 43    exp -> INT
Rule 44    exp -> DOUBLE
Rule 45    exp -> MINUS INT
Rule 46    exp -> MINUS DOUBLE
Rule 47    id -> ID
Rule 48    id -> ID SO INT SC
Rule 49    id -> ID SO ID SC
Rule 50    empty -> <empty>

Terminals, with rules where they appear

AND                  : 27
BC                   : 18
BO                   : 18
CM                   : 8
DIV                  : 40
DOUBLE               : 44 46
DOUBLE_TYPE          : 6
ELSE                 : 23
EQ                   : 20 30 30
EQ_MAJ               : 34
EQ_MIN               : 36
ID                   : 9 47 48 49 49
IF                   : 22 23
INT                  : 11 43 45 48
INT_TYPE             : 5
MAJ                  : 32
MAJ_EQ               : 33
MIN                  : 31
MINUS                : 38 45 46
MIN_EQ               : 35
NOT                  : 29
OR                   : 28
PLUS                 : 37
PRINT                : 21
RC                   : 24 26 41
RO                   : 24 26 41
S                    : 4 19 20 21
SC                   : 11 48 49
SO                   : 11 48 49
STAR                 : 39
WHILE                : 25
error                : 
nl                   : 
ws                   : 

Nonterminals, with rules where they appear

array                : 9 11
assignment           : 16
decl                 : 2
decl_list            : 1 2
empty                : 10
exp                  : 20 24 26 27 27 28 28 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41
id                   : 19 20 21 42
if                   : 14
if_condition         : 22 23
print                : 17
prog                 : 0
stmt                 : 12 13 22 23 23 25
stmt_list            : 1 12 18
type                 : 4
var                  : 7 8
var_list             : 4 8
while                : 15
while_condition      : 25

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . decl_list stmt_list
    (2) decl_list -> . decl_list decl
    (3) decl_list -> .

    BO              reduce using rule 3 (decl_list -> .)
    INT_TYPE        reduce using rule 3 (decl_list -> .)
    DOUBLE_TYPE     reduce using rule 3 (decl_list -> .)
    IF              reduce using rule 3 (decl_list -> .)
    WHILE           reduce using rule 3 (decl_list -> .)
    PRINT           reduce using rule 3 (decl_list -> .)
    ID              reduce using rule 3 (decl_list -> .)

    prog                           shift and go to state 1
    decl_list                      shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> decl_list . stmt_list
    (2) decl_list -> decl_list . decl
    (12) stmt_list -> . stmt_list stmt
    (13) stmt_list -> . stmt
    (4) decl -> . type var_list S
    (14) stmt -> . if
    (15) stmt -> . while
    (16) stmt -> . assignment
    (17) stmt -> . print
    (18) stmt -> . BO stmt_list BC
    (5) type -> . INT_TYPE
    (6) type -> . DOUBLE_TYPE
    (22) if -> . IF if_condition stmt
    (23) if -> . IF if_condition stmt ELSE stmt
    (25) while -> . WHILE while_condition stmt
    (19) assignment -> . id S
    (20) assignment -> . id EQ exp S
    (21) print -> . PRINT id S
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    BO              shift and go to state 11
    INT_TYPE        shift and go to state 12
    DOUBLE_TYPE     shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 17
    ID              shift and go to state 18

    stmt_list                      shift and go to state 3
    decl                           shift and go to state 4
    stmt                           shift and go to state 5
    type                           shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    id                             shift and go to state 16

state 3

    (1) prog -> decl_list stmt_list .
    (12) stmt_list -> stmt_list . stmt
    (14) stmt -> . if
    (15) stmt -> . while
    (16) stmt -> . assignment
    (17) stmt -> . print
    (18) stmt -> . BO stmt_list BC
    (22) if -> . IF if_condition stmt
    (23) if -> . IF if_condition stmt ELSE stmt
    (25) while -> . WHILE while_condition stmt
    (19) assignment -> . id S
    (20) assignment -> . id EQ exp S
    (21) print -> . PRINT id S
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    $end            reduce using rule 1 (prog -> decl_list stmt_list .)
    BO              shift and go to state 11
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 19
    if                             shift and go to state 7
    while                          shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    id                             shift and go to state 16

state 4

    (2) decl_list -> decl_list decl .

    BO              reduce using rule 2 (decl_list -> decl_list decl .)
    INT_TYPE        reduce using rule 2 (decl_list -> decl_list decl .)
    DOUBLE_TYPE     reduce using rule 2 (decl_list -> decl_list decl .)
    IF              reduce using rule 2 (decl_list -> decl_list decl .)
    WHILE           reduce using rule 2 (decl_list -> decl_list decl .)
    PRINT           reduce using rule 2 (decl_list -> decl_list decl .)
    ID              reduce using rule 2 (decl_list -> decl_list decl .)


state 5

    (13) stmt_list -> stmt .

    BO              reduce using rule 13 (stmt_list -> stmt .)
    IF              reduce using rule 13 (stmt_list -> stmt .)
    WHILE           reduce using rule 13 (stmt_list -> stmt .)
    PRINT           reduce using rule 13 (stmt_list -> stmt .)
    ID              reduce using rule 13 (stmt_list -> stmt .)
    $end            reduce using rule 13 (stmt_list -> stmt .)
    BC              reduce using rule 13 (stmt_list -> stmt .)


state 6

    (4) decl -> type . var_list S
    (7) var_list -> . var
    (8) var_list -> . var_list CM var
    (9) var -> . ID array

    ID              shift and go to state 22

    var_list                       shift and go to state 20
    var                            shift and go to state 21

state 7

    (14) stmt -> if .

    BO              reduce using rule 14 (stmt -> if .)
    IF              reduce using rule 14 (stmt -> if .)
    WHILE           reduce using rule 14 (stmt -> if .)
    PRINT           reduce using rule 14 (stmt -> if .)
    ID              reduce using rule 14 (stmt -> if .)
    $end            reduce using rule 14 (stmt -> if .)
    BC              reduce using rule 14 (stmt -> if .)
    ELSE            reduce using rule 14 (stmt -> if .)


state 8

    (15) stmt -> while .

    BO              reduce using rule 15 (stmt -> while .)
    IF              reduce using rule 15 (stmt -> while .)
    WHILE           reduce using rule 15 (stmt -> while .)
    PRINT           reduce using rule 15 (stmt -> while .)
    ID              reduce using rule 15 (stmt -> while .)
    $end            reduce using rule 15 (stmt -> while .)
    BC              reduce using rule 15 (stmt -> while .)
    ELSE            reduce using rule 15 (stmt -> while .)


state 9

    (16) stmt -> assignment .

    BO              reduce using rule 16 (stmt -> assignment .)
    IF              reduce using rule 16 (stmt -> assignment .)
    WHILE           reduce using rule 16 (stmt -> assignment .)
    PRINT           reduce using rule 16 (stmt -> assignment .)
    ID              reduce using rule 16 (stmt -> assignment .)
    $end            reduce using rule 16 (stmt -> assignment .)
    BC              reduce using rule 16 (stmt -> assignment .)
    ELSE            reduce using rule 16 (stmt -> assignment .)


state 10

    (17) stmt -> print .

    BO              reduce using rule 17 (stmt -> print .)
    IF              reduce using rule 17 (stmt -> print .)
    WHILE           reduce using rule 17 (stmt -> print .)
    PRINT           reduce using rule 17 (stmt -> print .)
    ID              reduce using rule 17 (stmt -> print .)
    $end            reduce using rule 17 (stmt -> print .)
    BC              reduce using rule 17 (stmt -> print .)
    ELSE            reduce using rule 17 (stmt -> print .)


state 11

    (18) stmt -> BO . stmt_list BC
    (12) stmt_list -> . stmt_list stmt
    (13) stmt_list -> . stmt
    (14) stmt -> . if
    (15) stmt -> . while
    (16) stmt -> . assignment
    (17) stmt -> . print
    (18) stmt -> . BO stmt_list BC
    (22) if -> . IF if_condition stmt
    (23) if -> . IF if_condition stmt ELSE stmt
    (25) while -> . WHILE while_condition stmt
    (19) assignment -> . id S
    (20) assignment -> . id EQ exp S
    (21) print -> . PRINT id S
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    BO              shift and go to state 11
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 17
    ID              shift and go to state 18

    stmt_list                      shift and go to state 23
    stmt                           shift and go to state 5
    if                             shift and go to state 7
    while                          shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    id                             shift and go to state 16

state 12

    (5) type -> INT_TYPE .

    ID              reduce using rule 5 (type -> INT_TYPE .)


state 13

    (6) type -> DOUBLE_TYPE .

    ID              reduce using rule 6 (type -> DOUBLE_TYPE .)


state 14

    (22) if -> IF . if_condition stmt
    (23) if -> IF . if_condition stmt ELSE stmt
    (24) if_condition -> . RO exp RC

    RO              shift and go to state 25

    if_condition                   shift and go to state 24

state 15

    (25) while -> WHILE . while_condition stmt
    (26) while_condition -> . RO exp RC

    RO              shift and go to state 27

    while_condition                shift and go to state 26

state 16

    (19) assignment -> id . S
    (20) assignment -> id . EQ exp S

    S               shift and go to state 28
    EQ              shift and go to state 29


state 17

    (21) print -> PRINT . id S
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    ID              shift and go to state 18

    id                             shift and go to state 30

state 18

    (47) id -> ID .
    (48) id -> ID . SO INT SC
    (49) id -> ID . SO ID SC

    S               reduce using rule 47 (id -> ID .)
    EQ              reduce using rule 47 (id -> ID .)
    RC              reduce using rule 47 (id -> ID .)
    AND             reduce using rule 47 (id -> ID .)
    OR              reduce using rule 47 (id -> ID .)
    MIN             reduce using rule 47 (id -> ID .)
    MAJ             reduce using rule 47 (id -> ID .)
    MAJ_EQ          reduce using rule 47 (id -> ID .)
    EQ_MAJ          reduce using rule 47 (id -> ID .)
    MIN_EQ          reduce using rule 47 (id -> ID .)
    EQ_MIN          reduce using rule 47 (id -> ID .)
    PLUS            reduce using rule 47 (id -> ID .)
    MINUS           reduce using rule 47 (id -> ID .)
    STAR            reduce using rule 47 (id -> ID .)
    DIV             reduce using rule 47 (id -> ID .)
    SO              shift and go to state 31


state 19

    (12) stmt_list -> stmt_list stmt .

    BO              reduce using rule 12 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 12 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 12 (stmt_list -> stmt_list stmt .)
    PRINT           reduce using rule 12 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 12 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 12 (stmt_list -> stmt_list stmt .)
    BC              reduce using rule 12 (stmt_list -> stmt_list stmt .)


state 20

    (4) decl -> type var_list . S
    (8) var_list -> var_list . CM var

    S               shift and go to state 32
    CM              shift and go to state 33


state 21

    (7) var_list -> var .

    S               reduce using rule 7 (var_list -> var .)
    CM              reduce using rule 7 (var_list -> var .)


state 22

    (9) var -> ID . array
    (10) array -> . empty
    (11) array -> . array SO INT SC
    (50) empty -> .

    SO              reduce using rule 50 (empty -> .)
    S               reduce using rule 50 (empty -> .)
    CM              reduce using rule 50 (empty -> .)

    array                          shift and go to state 34
    empty                          shift and go to state 35

state 23

    (18) stmt -> BO stmt_list . BC
    (12) stmt_list -> stmt_list . stmt
    (14) stmt -> . if
    (15) stmt -> . while
    (16) stmt -> . assignment
    (17) stmt -> . print
    (18) stmt -> . BO stmt_list BC
    (22) if -> . IF if_condition stmt
    (23) if -> . IF if_condition stmt ELSE stmt
    (25) while -> . WHILE while_condition stmt
    (19) assignment -> . id S
    (20) assignment -> . id EQ exp S
    (21) print -> . PRINT id S
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    BC              shift and go to state 36
    BO              shift and go to state 11
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 19
    if                             shift and go to state 7
    while                          shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    id                             shift and go to state 16

state 24

    (22) if -> IF if_condition . stmt
    (23) if -> IF if_condition . stmt ELSE stmt
    (14) stmt -> . if
    (15) stmt -> . while
    (16) stmt -> . assignment
    (17) stmt -> . print
    (18) stmt -> . BO stmt_list BC
    (22) if -> . IF if_condition stmt
    (23) if -> . IF if_condition stmt ELSE stmt
    (25) while -> . WHILE while_condition stmt
    (19) assignment -> . id S
    (20) assignment -> . id EQ exp S
    (21) print -> . PRINT id S
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    BO              shift and go to state 11
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 37
    if                             shift and go to state 7
    while                          shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    id                             shift and go to state 16

state 25

    (24) if_condition -> RO . exp RC
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 39
    id                             shift and go to state 42

state 26

    (25) while -> WHILE while_condition . stmt
    (14) stmt -> . if
    (15) stmt -> . while
    (16) stmt -> . assignment
    (17) stmt -> . print
    (18) stmt -> . BO stmt_list BC
    (22) if -> . IF if_condition stmt
    (23) if -> . IF if_condition stmt ELSE stmt
    (25) while -> . WHILE while_condition stmt
    (19) assignment -> . id S
    (20) assignment -> . id EQ exp S
    (21) print -> . PRINT id S
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    BO              shift and go to state 11
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 45
    if                             shift and go to state 7
    while                          shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    id                             shift and go to state 16

state 27

    (26) while_condition -> RO . exp RC
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 46
    id                             shift and go to state 42

state 28

    (19) assignment -> id S .

    BO              reduce using rule 19 (assignment -> id S .)
    IF              reduce using rule 19 (assignment -> id S .)
    WHILE           reduce using rule 19 (assignment -> id S .)
    PRINT           reduce using rule 19 (assignment -> id S .)
    ID              reduce using rule 19 (assignment -> id S .)
    $end            reduce using rule 19 (assignment -> id S .)
    BC              reduce using rule 19 (assignment -> id S .)
    ELSE            reduce using rule 19 (assignment -> id S .)


state 29

    (20) assignment -> id EQ . exp S
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    id                             shift and go to state 42
    exp                            shift and go to state 47

state 30

    (21) print -> PRINT id . S

    S               shift and go to state 48


state 31

    (48) id -> ID SO . INT SC
    (49) id -> ID SO . ID SC

    INT             shift and go to state 50
    ID              shift and go to state 49


state 32

    (4) decl -> type var_list S .

    BO              reduce using rule 4 (decl -> type var_list S .)
    INT_TYPE        reduce using rule 4 (decl -> type var_list S .)
    DOUBLE_TYPE     reduce using rule 4 (decl -> type var_list S .)
    IF              reduce using rule 4 (decl -> type var_list S .)
    WHILE           reduce using rule 4 (decl -> type var_list S .)
    PRINT           reduce using rule 4 (decl -> type var_list S .)
    ID              reduce using rule 4 (decl -> type var_list S .)


state 33

    (8) var_list -> var_list CM . var
    (9) var -> . ID array

    ID              shift and go to state 22

    var                            shift and go to state 51

state 34

    (9) var -> ID array .
    (11) array -> array . SO INT SC

    S               reduce using rule 9 (var -> ID array .)
    CM              reduce using rule 9 (var -> ID array .)
    SO              shift and go to state 52


state 35

    (10) array -> empty .

    SO              reduce using rule 10 (array -> empty .)
    S               reduce using rule 10 (array -> empty .)
    CM              reduce using rule 10 (array -> empty .)


state 36

    (18) stmt -> BO stmt_list BC .

    BO              reduce using rule 18 (stmt -> BO stmt_list BC .)
    IF              reduce using rule 18 (stmt -> BO stmt_list BC .)
    WHILE           reduce using rule 18 (stmt -> BO stmt_list BC .)
    PRINT           reduce using rule 18 (stmt -> BO stmt_list BC .)
    ID              reduce using rule 18 (stmt -> BO stmt_list BC .)
    $end            reduce using rule 18 (stmt -> BO stmt_list BC .)
    BC              reduce using rule 18 (stmt -> BO stmt_list BC .)
    ELSE            reduce using rule 18 (stmt -> BO stmt_list BC .)


state 37

    (22) if -> IF if_condition stmt .
    (23) if -> IF if_condition stmt . ELSE stmt

    BO              reduce using rule 22 (if -> IF if_condition stmt .)
    IF              reduce using rule 22 (if -> IF if_condition stmt .)
    WHILE           reduce using rule 22 (if -> IF if_condition stmt .)
    PRINT           reduce using rule 22 (if -> IF if_condition stmt .)
    ID              reduce using rule 22 (if -> IF if_condition stmt .)
    $end            reduce using rule 22 (if -> IF if_condition stmt .)
    BC              reduce using rule 22 (if -> IF if_condition stmt .)
    ELSE            shift and go to state 53

  ! ELSE            [ reduce using rule 22 (if -> IF if_condition stmt .) ]


state 38

    (41) exp -> RO . exp RC
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 54
    id                             shift and go to state 42

state 39

    (24) if_condition -> RO exp . RC
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              shift and go to state 55
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    MIN             shift and go to state 59
    MAJ             shift and go to state 60
    MAJ_EQ          shift and go to state 61
    EQ_MAJ          shift and go to state 62
    MIN_EQ          shift and go to state 63
    EQ_MIN          shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68


state 40

    (29) exp -> NOT . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 69
    id                             shift and go to state 42

state 41

    (45) exp -> MINUS . INT
    (46) exp -> MINUS . DOUBLE

    INT             shift and go to state 70
    DOUBLE          shift and go to state 71


state 42

    (42) exp -> id .

    RC              reduce using rule 42 (exp -> id .)
    AND             reduce using rule 42 (exp -> id .)
    OR              reduce using rule 42 (exp -> id .)
    EQ              reduce using rule 42 (exp -> id .)
    MIN             reduce using rule 42 (exp -> id .)
    MAJ             reduce using rule 42 (exp -> id .)
    MAJ_EQ          reduce using rule 42 (exp -> id .)
    EQ_MAJ          reduce using rule 42 (exp -> id .)
    MIN_EQ          reduce using rule 42 (exp -> id .)
    EQ_MIN          reduce using rule 42 (exp -> id .)
    PLUS            reduce using rule 42 (exp -> id .)
    MINUS           reduce using rule 42 (exp -> id .)
    STAR            reduce using rule 42 (exp -> id .)
    DIV             reduce using rule 42 (exp -> id .)
    S               reduce using rule 42 (exp -> id .)


state 43

    (43) exp -> INT .

    RC              reduce using rule 43 (exp -> INT .)
    AND             reduce using rule 43 (exp -> INT .)
    OR              reduce using rule 43 (exp -> INT .)
    EQ              reduce using rule 43 (exp -> INT .)
    MIN             reduce using rule 43 (exp -> INT .)
    MAJ             reduce using rule 43 (exp -> INT .)
    MAJ_EQ          reduce using rule 43 (exp -> INT .)
    EQ_MAJ          reduce using rule 43 (exp -> INT .)
    MIN_EQ          reduce using rule 43 (exp -> INT .)
    EQ_MIN          reduce using rule 43 (exp -> INT .)
    PLUS            reduce using rule 43 (exp -> INT .)
    MINUS           reduce using rule 43 (exp -> INT .)
    STAR            reduce using rule 43 (exp -> INT .)
    DIV             reduce using rule 43 (exp -> INT .)
    S               reduce using rule 43 (exp -> INT .)


state 44

    (44) exp -> DOUBLE .

    RC              reduce using rule 44 (exp -> DOUBLE .)
    AND             reduce using rule 44 (exp -> DOUBLE .)
    OR              reduce using rule 44 (exp -> DOUBLE .)
    EQ              reduce using rule 44 (exp -> DOUBLE .)
    MIN             reduce using rule 44 (exp -> DOUBLE .)
    MAJ             reduce using rule 44 (exp -> DOUBLE .)
    MAJ_EQ          reduce using rule 44 (exp -> DOUBLE .)
    EQ_MAJ          reduce using rule 44 (exp -> DOUBLE .)
    MIN_EQ          reduce using rule 44 (exp -> DOUBLE .)
    EQ_MIN          reduce using rule 44 (exp -> DOUBLE .)
    PLUS            reduce using rule 44 (exp -> DOUBLE .)
    MINUS           reduce using rule 44 (exp -> DOUBLE .)
    STAR            reduce using rule 44 (exp -> DOUBLE .)
    DIV             reduce using rule 44 (exp -> DOUBLE .)
    S               reduce using rule 44 (exp -> DOUBLE .)


state 45

    (25) while -> WHILE while_condition stmt .

    BO              reduce using rule 25 (while -> WHILE while_condition stmt .)
    IF              reduce using rule 25 (while -> WHILE while_condition stmt .)
    WHILE           reduce using rule 25 (while -> WHILE while_condition stmt .)
    PRINT           reduce using rule 25 (while -> WHILE while_condition stmt .)
    ID              reduce using rule 25 (while -> WHILE while_condition stmt .)
    $end            reduce using rule 25 (while -> WHILE while_condition stmt .)
    BC              reduce using rule 25 (while -> WHILE while_condition stmt .)
    ELSE            reduce using rule 25 (while -> WHILE while_condition stmt .)


state 46

    (26) while_condition -> RO exp . RC
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              shift and go to state 72
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    MIN             shift and go to state 59
    MAJ             shift and go to state 60
    MAJ_EQ          shift and go to state 61
    EQ_MAJ          shift and go to state 62
    MIN_EQ          shift and go to state 63
    EQ_MIN          shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68


state 47

    (20) assignment -> id EQ exp . S
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    S               shift and go to state 73
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    MIN             shift and go to state 59
    MAJ             shift and go to state 60
    MAJ_EQ          shift and go to state 61
    EQ_MAJ          shift and go to state 62
    MIN_EQ          shift and go to state 63
    EQ_MIN          shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68


state 48

    (21) print -> PRINT id S .

    BO              reduce using rule 21 (print -> PRINT id S .)
    IF              reduce using rule 21 (print -> PRINT id S .)
    WHILE           reduce using rule 21 (print -> PRINT id S .)
    PRINT           reduce using rule 21 (print -> PRINT id S .)
    ID              reduce using rule 21 (print -> PRINT id S .)
    $end            reduce using rule 21 (print -> PRINT id S .)
    BC              reduce using rule 21 (print -> PRINT id S .)
    ELSE            reduce using rule 21 (print -> PRINT id S .)


state 49

    (49) id -> ID SO ID . SC

    SC              shift and go to state 74


state 50

    (48) id -> ID SO INT . SC

    SC              shift and go to state 75


state 51

    (8) var_list -> var_list CM var .

    S               reduce using rule 8 (var_list -> var_list CM var .)
    CM              reduce using rule 8 (var_list -> var_list CM var .)


state 52

    (11) array -> array SO . INT SC

    INT             shift and go to state 76


state 53

    (23) if -> IF if_condition stmt ELSE . stmt
    (14) stmt -> . if
    (15) stmt -> . while
    (16) stmt -> . assignment
    (17) stmt -> . print
    (18) stmt -> . BO stmt_list BC
    (22) if -> . IF if_condition stmt
    (23) if -> . IF if_condition stmt ELSE stmt
    (25) while -> . WHILE while_condition stmt
    (19) assignment -> . id S
    (20) assignment -> . id EQ exp S
    (21) print -> . PRINT id S
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    BO              shift and go to state 11
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    PRINT           shift and go to state 17
    ID              shift and go to state 18

    stmt                           shift and go to state 77
    if                             shift and go to state 7
    while                          shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    id                             shift and go to state 16

state 54

    (41) exp -> RO exp . RC
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              shift and go to state 78
    AND             shift and go to state 56
    OR              shift and go to state 57
    EQ              shift and go to state 58
    MIN             shift and go to state 59
    MAJ             shift and go to state 60
    MAJ_EQ          shift and go to state 61
    EQ_MAJ          shift and go to state 62
    MIN_EQ          shift and go to state 63
    EQ_MIN          shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68


state 55

    (24) if_condition -> RO exp RC .

    BO              reduce using rule 24 (if_condition -> RO exp RC .)
    IF              reduce using rule 24 (if_condition -> RO exp RC .)
    WHILE           reduce using rule 24 (if_condition -> RO exp RC .)
    PRINT           reduce using rule 24 (if_condition -> RO exp RC .)
    ID              reduce using rule 24 (if_condition -> RO exp RC .)


state 56

    (27) exp -> exp AND . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 79
    id                             shift and go to state 42

state 57

    (28) exp -> exp OR . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 80
    id                             shift and go to state 42

state 58

    (30) exp -> exp EQ . EQ exp

    EQ              shift and go to state 81


state 59

    (31) exp -> exp MIN . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 82
    id                             shift and go to state 42

state 60

    (32) exp -> exp MAJ . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 83
    id                             shift and go to state 42

state 61

    (33) exp -> exp MAJ_EQ . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 84
    id                             shift and go to state 42

state 62

    (34) exp -> exp EQ_MAJ . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 85
    id                             shift and go to state 42

state 63

    (35) exp -> exp MIN_EQ . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 86
    id                             shift and go to state 42

state 64

    (36) exp -> exp EQ_MIN . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 87
    id                             shift and go to state 42

state 65

    (37) exp -> exp PLUS . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 88
    id                             shift and go to state 42

state 66

    (38) exp -> exp MINUS . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 89
    id                             shift and go to state 42

state 67

    (39) exp -> exp STAR . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 90
    id                             shift and go to state 42

state 68

    (40) exp -> exp DIV . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 91
    id                             shift and go to state 42

state 69

    (29) exp -> NOT exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 29 (exp -> NOT exp .)
    AND             reduce using rule 29 (exp -> NOT exp .)
    OR              reduce using rule 29 (exp -> NOT exp .)
    S               reduce using rule 29 (exp -> NOT exp .)
    EQ              shift and go to state 58
    MIN             shift and go to state 59
    MAJ             shift and go to state 60
    MAJ_EQ          shift and go to state 61
    EQ_MAJ          shift and go to state 62
    MIN_EQ          shift and go to state 63
    EQ_MIN          shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! EQ              [ reduce using rule 29 (exp -> NOT exp .) ]
  ! MIN             [ reduce using rule 29 (exp -> NOT exp .) ]
  ! MAJ             [ reduce using rule 29 (exp -> NOT exp .) ]
  ! MAJ_EQ          [ reduce using rule 29 (exp -> NOT exp .) ]
  ! EQ_MAJ          [ reduce using rule 29 (exp -> NOT exp .) ]
  ! MIN_EQ          [ reduce using rule 29 (exp -> NOT exp .) ]
  ! EQ_MIN          [ reduce using rule 29 (exp -> NOT exp .) ]
  ! PLUS            [ reduce using rule 29 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 29 (exp -> NOT exp .) ]
  ! STAR            [ reduce using rule 29 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 29 (exp -> NOT exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]


state 70

    (45) exp -> MINUS INT .

    RC              reduce using rule 45 (exp -> MINUS INT .)
    AND             reduce using rule 45 (exp -> MINUS INT .)
    OR              reduce using rule 45 (exp -> MINUS INT .)
    EQ              reduce using rule 45 (exp -> MINUS INT .)
    MIN             reduce using rule 45 (exp -> MINUS INT .)
    MAJ             reduce using rule 45 (exp -> MINUS INT .)
    MAJ_EQ          reduce using rule 45 (exp -> MINUS INT .)
    EQ_MAJ          reduce using rule 45 (exp -> MINUS INT .)
    MIN_EQ          reduce using rule 45 (exp -> MINUS INT .)
    EQ_MIN          reduce using rule 45 (exp -> MINUS INT .)
    PLUS            reduce using rule 45 (exp -> MINUS INT .)
    MINUS           reduce using rule 45 (exp -> MINUS INT .)
    STAR            reduce using rule 45 (exp -> MINUS INT .)
    DIV             reduce using rule 45 (exp -> MINUS INT .)
    S               reduce using rule 45 (exp -> MINUS INT .)


state 71

    (46) exp -> MINUS DOUBLE .

    RC              reduce using rule 46 (exp -> MINUS DOUBLE .)
    AND             reduce using rule 46 (exp -> MINUS DOUBLE .)
    OR              reduce using rule 46 (exp -> MINUS DOUBLE .)
    EQ              reduce using rule 46 (exp -> MINUS DOUBLE .)
    MIN             reduce using rule 46 (exp -> MINUS DOUBLE .)
    MAJ             reduce using rule 46 (exp -> MINUS DOUBLE .)
    MAJ_EQ          reduce using rule 46 (exp -> MINUS DOUBLE .)
    EQ_MAJ          reduce using rule 46 (exp -> MINUS DOUBLE .)
    MIN_EQ          reduce using rule 46 (exp -> MINUS DOUBLE .)
    EQ_MIN          reduce using rule 46 (exp -> MINUS DOUBLE .)
    PLUS            reduce using rule 46 (exp -> MINUS DOUBLE .)
    MINUS           reduce using rule 46 (exp -> MINUS DOUBLE .)
    STAR            reduce using rule 46 (exp -> MINUS DOUBLE .)
    DIV             reduce using rule 46 (exp -> MINUS DOUBLE .)
    S               reduce using rule 46 (exp -> MINUS DOUBLE .)


state 72

    (26) while_condition -> RO exp RC .

    BO              reduce using rule 26 (while_condition -> RO exp RC .)
    IF              reduce using rule 26 (while_condition -> RO exp RC .)
    WHILE           reduce using rule 26 (while_condition -> RO exp RC .)
    PRINT           reduce using rule 26 (while_condition -> RO exp RC .)
    ID              reduce using rule 26 (while_condition -> RO exp RC .)


state 73

    (20) assignment -> id EQ exp S .

    BO              reduce using rule 20 (assignment -> id EQ exp S .)
    IF              reduce using rule 20 (assignment -> id EQ exp S .)
    WHILE           reduce using rule 20 (assignment -> id EQ exp S .)
    PRINT           reduce using rule 20 (assignment -> id EQ exp S .)
    ID              reduce using rule 20 (assignment -> id EQ exp S .)
    $end            reduce using rule 20 (assignment -> id EQ exp S .)
    BC              reduce using rule 20 (assignment -> id EQ exp S .)
    ELSE            reduce using rule 20 (assignment -> id EQ exp S .)


state 74

    (49) id -> ID SO ID SC .

    S               reduce using rule 49 (id -> ID SO ID SC .)
    EQ              reduce using rule 49 (id -> ID SO ID SC .)
    RC              reduce using rule 49 (id -> ID SO ID SC .)
    AND             reduce using rule 49 (id -> ID SO ID SC .)
    OR              reduce using rule 49 (id -> ID SO ID SC .)
    MIN             reduce using rule 49 (id -> ID SO ID SC .)
    MAJ             reduce using rule 49 (id -> ID SO ID SC .)
    MAJ_EQ          reduce using rule 49 (id -> ID SO ID SC .)
    EQ_MAJ          reduce using rule 49 (id -> ID SO ID SC .)
    MIN_EQ          reduce using rule 49 (id -> ID SO ID SC .)
    EQ_MIN          reduce using rule 49 (id -> ID SO ID SC .)
    PLUS            reduce using rule 49 (id -> ID SO ID SC .)
    MINUS           reduce using rule 49 (id -> ID SO ID SC .)
    STAR            reduce using rule 49 (id -> ID SO ID SC .)
    DIV             reduce using rule 49 (id -> ID SO ID SC .)


state 75

    (48) id -> ID SO INT SC .

    S               reduce using rule 48 (id -> ID SO INT SC .)
    EQ              reduce using rule 48 (id -> ID SO INT SC .)
    RC              reduce using rule 48 (id -> ID SO INT SC .)
    AND             reduce using rule 48 (id -> ID SO INT SC .)
    OR              reduce using rule 48 (id -> ID SO INT SC .)
    MIN             reduce using rule 48 (id -> ID SO INT SC .)
    MAJ             reduce using rule 48 (id -> ID SO INT SC .)
    MAJ_EQ          reduce using rule 48 (id -> ID SO INT SC .)
    EQ_MAJ          reduce using rule 48 (id -> ID SO INT SC .)
    MIN_EQ          reduce using rule 48 (id -> ID SO INT SC .)
    EQ_MIN          reduce using rule 48 (id -> ID SO INT SC .)
    PLUS            reduce using rule 48 (id -> ID SO INT SC .)
    MINUS           reduce using rule 48 (id -> ID SO INT SC .)
    STAR            reduce using rule 48 (id -> ID SO INT SC .)
    DIV             reduce using rule 48 (id -> ID SO INT SC .)


state 76

    (11) array -> array SO INT . SC

    SC              shift and go to state 92


state 77

    (23) if -> IF if_condition stmt ELSE stmt .

    BO              reduce using rule 23 (if -> IF if_condition stmt ELSE stmt .)
    IF              reduce using rule 23 (if -> IF if_condition stmt ELSE stmt .)
    WHILE           reduce using rule 23 (if -> IF if_condition stmt ELSE stmt .)
    PRINT           reduce using rule 23 (if -> IF if_condition stmt ELSE stmt .)
    ID              reduce using rule 23 (if -> IF if_condition stmt ELSE stmt .)
    $end            reduce using rule 23 (if -> IF if_condition stmt ELSE stmt .)
    BC              reduce using rule 23 (if -> IF if_condition stmt ELSE stmt .)
    ELSE            reduce using rule 23 (if -> IF if_condition stmt ELSE stmt .)


state 78

    (41) exp -> RO exp RC .

    RC              reduce using rule 41 (exp -> RO exp RC .)
    AND             reduce using rule 41 (exp -> RO exp RC .)
    OR              reduce using rule 41 (exp -> RO exp RC .)
    EQ              reduce using rule 41 (exp -> RO exp RC .)
    MIN             reduce using rule 41 (exp -> RO exp RC .)
    MAJ             reduce using rule 41 (exp -> RO exp RC .)
    MAJ_EQ          reduce using rule 41 (exp -> RO exp RC .)
    EQ_MAJ          reduce using rule 41 (exp -> RO exp RC .)
    MIN_EQ          reduce using rule 41 (exp -> RO exp RC .)
    EQ_MIN          reduce using rule 41 (exp -> RO exp RC .)
    PLUS            reduce using rule 41 (exp -> RO exp RC .)
    MINUS           reduce using rule 41 (exp -> RO exp RC .)
    STAR            reduce using rule 41 (exp -> RO exp RC .)
    DIV             reduce using rule 41 (exp -> RO exp RC .)
    S               reduce using rule 41 (exp -> RO exp RC .)


state 79

    (27) exp -> exp AND exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 27 (exp -> exp AND exp .)
    AND             reduce using rule 27 (exp -> exp AND exp .)
    OR              reduce using rule 27 (exp -> exp AND exp .)
    S               reduce using rule 27 (exp -> exp AND exp .)
    EQ              shift and go to state 58
    MIN             shift and go to state 59
    MAJ             shift and go to state 60
    MAJ_EQ          shift and go to state 61
    EQ_MAJ          shift and go to state 62
    MIN_EQ          shift and go to state 63
    EQ_MIN          shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! EQ              [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! MIN             [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! MAJ             [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! MAJ_EQ          [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! EQ_MAJ          [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! MIN_EQ          [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! EQ_MIN          [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! PLUS            [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! STAR            [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 27 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]


state 80

    (28) exp -> exp OR exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 28 (exp -> exp OR exp .)
    OR              reduce using rule 28 (exp -> exp OR exp .)
    S               reduce using rule 28 (exp -> exp OR exp .)
    AND             shift and go to state 56
    EQ              shift and go to state 58
    MIN             shift and go to state 59
    MAJ             shift and go to state 60
    MAJ_EQ          shift and go to state 61
    EQ_MAJ          shift and go to state 62
    MIN_EQ          shift and go to state 63
    EQ_MIN          shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! AND             [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! MIN             [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! MAJ             [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! MAJ_EQ          [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! EQ_MAJ          [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! MIN_EQ          [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! EQ_MIN          [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! PLUS            [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! STAR            [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 28 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 57 ]


state 81

    (30) exp -> exp EQ EQ . exp
    (27) exp -> . exp AND exp
    (28) exp -> . exp OR exp
    (29) exp -> . NOT exp
    (30) exp -> . exp EQ EQ exp
    (31) exp -> . exp MIN exp
    (32) exp -> . exp MAJ exp
    (33) exp -> . exp MAJ_EQ exp
    (34) exp -> . exp EQ_MAJ exp
    (35) exp -> . exp MIN_EQ exp
    (36) exp -> . exp EQ_MIN exp
    (37) exp -> . exp PLUS exp
    (38) exp -> . exp MINUS exp
    (39) exp -> . exp STAR exp
    (40) exp -> . exp DIV exp
    (41) exp -> . RO exp RC
    (42) exp -> . id
    (43) exp -> . INT
    (44) exp -> . DOUBLE
    (45) exp -> . MINUS INT
    (46) exp -> . MINUS DOUBLE
    (47) id -> . ID
    (48) id -> . ID SO INT SC
    (49) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 38
    INT             shift and go to state 43
    DOUBLE          shift and go to state 44
    MINUS           shift and go to state 41
    ID              shift and go to state 18

    exp                            shift and go to state 93
    id                             shift and go to state 42

state 82

    (31) exp -> exp MIN exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 31 (exp -> exp MIN exp .)
    AND             reduce using rule 31 (exp -> exp MIN exp .)
    OR              reduce using rule 31 (exp -> exp MIN exp .)
    EQ              reduce using rule 31 (exp -> exp MIN exp .)
    MIN             reduce using rule 31 (exp -> exp MIN exp .)
    MAJ             reduce using rule 31 (exp -> exp MIN exp .)
    MAJ_EQ          reduce using rule 31 (exp -> exp MIN exp .)
    EQ_MAJ          reduce using rule 31 (exp -> exp MIN exp .)
    MIN_EQ          reduce using rule 31 (exp -> exp MIN exp .)
    EQ_MIN          reduce using rule 31 (exp -> exp MIN exp .)
    S               reduce using rule 31 (exp -> exp MIN exp .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 31 (exp -> exp MIN exp .) ]
  ! MINUS           [ reduce using rule 31 (exp -> exp MIN exp .) ]
  ! STAR            [ reduce using rule 31 (exp -> exp MIN exp .) ]
  ! DIV             [ reduce using rule 31 (exp -> exp MIN exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]


state 83

    (32) exp -> exp MAJ exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 32 (exp -> exp MAJ exp .)
    AND             reduce using rule 32 (exp -> exp MAJ exp .)
    OR              reduce using rule 32 (exp -> exp MAJ exp .)
    EQ              reduce using rule 32 (exp -> exp MAJ exp .)
    MIN             reduce using rule 32 (exp -> exp MAJ exp .)
    MAJ             reduce using rule 32 (exp -> exp MAJ exp .)
    MAJ_EQ          reduce using rule 32 (exp -> exp MAJ exp .)
    EQ_MAJ          reduce using rule 32 (exp -> exp MAJ exp .)
    MIN_EQ          reduce using rule 32 (exp -> exp MAJ exp .)
    EQ_MIN          reduce using rule 32 (exp -> exp MAJ exp .)
    S               reduce using rule 32 (exp -> exp MAJ exp .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 32 (exp -> exp MAJ exp .) ]
  ! MINUS           [ reduce using rule 32 (exp -> exp MAJ exp .) ]
  ! STAR            [ reduce using rule 32 (exp -> exp MAJ exp .) ]
  ! DIV             [ reduce using rule 32 (exp -> exp MAJ exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]


state 84

    (33) exp -> exp MAJ_EQ exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    AND             reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    OR              reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    EQ              reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    MIN             reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    MAJ             reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    MAJ_EQ          reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    EQ_MAJ          reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    MIN_EQ          reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    EQ_MIN          reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    S               reduce using rule 33 (exp -> exp MAJ_EQ exp .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 33 (exp -> exp MAJ_EQ exp .) ]
  ! MINUS           [ reduce using rule 33 (exp -> exp MAJ_EQ exp .) ]
  ! STAR            [ reduce using rule 33 (exp -> exp MAJ_EQ exp .) ]
  ! DIV             [ reduce using rule 33 (exp -> exp MAJ_EQ exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]


state 85

    (34) exp -> exp EQ_MAJ exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    AND             reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    OR              reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    EQ              reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    MIN             reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    MAJ             reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    MAJ_EQ          reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    EQ_MAJ          reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    MIN_EQ          reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    EQ_MIN          reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    S               reduce using rule 34 (exp -> exp EQ_MAJ exp .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 34 (exp -> exp EQ_MAJ exp .) ]
  ! MINUS           [ reduce using rule 34 (exp -> exp EQ_MAJ exp .) ]
  ! STAR            [ reduce using rule 34 (exp -> exp EQ_MAJ exp .) ]
  ! DIV             [ reduce using rule 34 (exp -> exp EQ_MAJ exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]


state 86

    (35) exp -> exp MIN_EQ exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 35 (exp -> exp MIN_EQ exp .)
    AND             reduce using rule 35 (exp -> exp MIN_EQ exp .)
    OR              reduce using rule 35 (exp -> exp MIN_EQ exp .)
    EQ              reduce using rule 35 (exp -> exp MIN_EQ exp .)
    MIN             reduce using rule 35 (exp -> exp MIN_EQ exp .)
    MAJ             reduce using rule 35 (exp -> exp MIN_EQ exp .)
    MAJ_EQ          reduce using rule 35 (exp -> exp MIN_EQ exp .)
    EQ_MAJ          reduce using rule 35 (exp -> exp MIN_EQ exp .)
    MIN_EQ          reduce using rule 35 (exp -> exp MIN_EQ exp .)
    EQ_MIN          reduce using rule 35 (exp -> exp MIN_EQ exp .)
    S               reduce using rule 35 (exp -> exp MIN_EQ exp .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 35 (exp -> exp MIN_EQ exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> exp MIN_EQ exp .) ]
  ! STAR            [ reduce using rule 35 (exp -> exp MIN_EQ exp .) ]
  ! DIV             [ reduce using rule 35 (exp -> exp MIN_EQ exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]


state 87

    (36) exp -> exp EQ_MIN exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 36 (exp -> exp EQ_MIN exp .)
    AND             reduce using rule 36 (exp -> exp EQ_MIN exp .)
    OR              reduce using rule 36 (exp -> exp EQ_MIN exp .)
    EQ              reduce using rule 36 (exp -> exp EQ_MIN exp .)
    MIN             reduce using rule 36 (exp -> exp EQ_MIN exp .)
    MAJ             reduce using rule 36 (exp -> exp EQ_MIN exp .)
    MAJ_EQ          reduce using rule 36 (exp -> exp EQ_MIN exp .)
    EQ_MAJ          reduce using rule 36 (exp -> exp EQ_MIN exp .)
    MIN_EQ          reduce using rule 36 (exp -> exp EQ_MIN exp .)
    EQ_MIN          reduce using rule 36 (exp -> exp EQ_MIN exp .)
    S               reduce using rule 36 (exp -> exp EQ_MIN exp .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 36 (exp -> exp EQ_MIN exp .) ]
  ! MINUS           [ reduce using rule 36 (exp -> exp EQ_MIN exp .) ]
  ! STAR            [ reduce using rule 36 (exp -> exp EQ_MIN exp .) ]
  ! DIV             [ reduce using rule 36 (exp -> exp EQ_MIN exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]


state 88

    (37) exp -> exp PLUS exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 37 (exp -> exp PLUS exp .)
    AND             reduce using rule 37 (exp -> exp PLUS exp .)
    OR              reduce using rule 37 (exp -> exp PLUS exp .)
    EQ              reduce using rule 37 (exp -> exp PLUS exp .)
    MIN             reduce using rule 37 (exp -> exp PLUS exp .)
    MAJ             reduce using rule 37 (exp -> exp PLUS exp .)
    MAJ_EQ          reduce using rule 37 (exp -> exp PLUS exp .)
    EQ_MAJ          reduce using rule 37 (exp -> exp PLUS exp .)
    MIN_EQ          reduce using rule 37 (exp -> exp PLUS exp .)
    EQ_MIN          reduce using rule 37 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 37 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 37 (exp -> exp PLUS exp .)
    S               reduce using rule 37 (exp -> exp PLUS exp .)
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! STAR            [ reduce using rule 37 (exp -> exp PLUS exp .) ]
  ! DIV             [ reduce using rule 37 (exp -> exp PLUS exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]


state 89

    (38) exp -> exp MINUS exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 38 (exp -> exp MINUS exp .)
    AND             reduce using rule 38 (exp -> exp MINUS exp .)
    OR              reduce using rule 38 (exp -> exp MINUS exp .)
    EQ              reduce using rule 38 (exp -> exp MINUS exp .)
    MIN             reduce using rule 38 (exp -> exp MINUS exp .)
    MAJ             reduce using rule 38 (exp -> exp MINUS exp .)
    MAJ_EQ          reduce using rule 38 (exp -> exp MINUS exp .)
    EQ_MAJ          reduce using rule 38 (exp -> exp MINUS exp .)
    MIN_EQ          reduce using rule 38 (exp -> exp MINUS exp .)
    EQ_MIN          reduce using rule 38 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 38 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 38 (exp -> exp MINUS exp .)
    S               reduce using rule 38 (exp -> exp MINUS exp .)
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! STAR            [ reduce using rule 38 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 38 (exp -> exp MINUS exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]


state 90

    (39) exp -> exp STAR exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 39 (exp -> exp STAR exp .)
    AND             reduce using rule 39 (exp -> exp STAR exp .)
    OR              reduce using rule 39 (exp -> exp STAR exp .)
    EQ              reduce using rule 39 (exp -> exp STAR exp .)
    MIN             reduce using rule 39 (exp -> exp STAR exp .)
    MAJ             reduce using rule 39 (exp -> exp STAR exp .)
    MAJ_EQ          reduce using rule 39 (exp -> exp STAR exp .)
    EQ_MAJ          reduce using rule 39 (exp -> exp STAR exp .)
    MIN_EQ          reduce using rule 39 (exp -> exp STAR exp .)
    EQ_MIN          reduce using rule 39 (exp -> exp STAR exp .)
    PLUS            reduce using rule 39 (exp -> exp STAR exp .)
    MINUS           reduce using rule 39 (exp -> exp STAR exp .)
    STAR            reduce using rule 39 (exp -> exp STAR exp .)
    DIV             reduce using rule 39 (exp -> exp STAR exp .)
    S               reduce using rule 39 (exp -> exp STAR exp .)

  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! STAR            [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]


state 91

    (40) exp -> exp DIV exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 40 (exp -> exp DIV exp .)
    AND             reduce using rule 40 (exp -> exp DIV exp .)
    OR              reduce using rule 40 (exp -> exp DIV exp .)
    EQ              reduce using rule 40 (exp -> exp DIV exp .)
    MIN             reduce using rule 40 (exp -> exp DIV exp .)
    MAJ             reduce using rule 40 (exp -> exp DIV exp .)
    MAJ_EQ          reduce using rule 40 (exp -> exp DIV exp .)
    EQ_MAJ          reduce using rule 40 (exp -> exp DIV exp .)
    MIN_EQ          reduce using rule 40 (exp -> exp DIV exp .)
    EQ_MIN          reduce using rule 40 (exp -> exp DIV exp .)
    PLUS            reduce using rule 40 (exp -> exp DIV exp .)
    MINUS           reduce using rule 40 (exp -> exp DIV exp .)
    STAR            reduce using rule 40 (exp -> exp DIV exp .)
    DIV             reduce using rule 40 (exp -> exp DIV exp .)
    S               reduce using rule 40 (exp -> exp DIV exp .)

  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! STAR            [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]


state 92

    (11) array -> array SO INT SC .

    SO              reduce using rule 11 (array -> array SO INT SC .)
    S               reduce using rule 11 (array -> array SO INT SC .)
    CM              reduce using rule 11 (array -> array SO INT SC .)


state 93

    (30) exp -> exp EQ EQ exp .
    (27) exp -> exp . AND exp
    (28) exp -> exp . OR exp
    (30) exp -> exp . EQ EQ exp
    (31) exp -> exp . MIN exp
    (32) exp -> exp . MAJ exp
    (33) exp -> exp . MAJ_EQ exp
    (34) exp -> exp . EQ_MAJ exp
    (35) exp -> exp . MIN_EQ exp
    (36) exp -> exp . EQ_MIN exp
    (37) exp -> exp . PLUS exp
    (38) exp -> exp . MINUS exp
    (39) exp -> exp . STAR exp
    (40) exp -> exp . DIV exp

    RC              reduce using rule 30 (exp -> exp EQ EQ exp .)
    AND             reduce using rule 30 (exp -> exp EQ EQ exp .)
    OR              reduce using rule 30 (exp -> exp EQ EQ exp .)
    EQ              reduce using rule 30 (exp -> exp EQ EQ exp .)
    MIN             reduce using rule 30 (exp -> exp EQ EQ exp .)
    MAJ             reduce using rule 30 (exp -> exp EQ EQ exp .)
    MAJ_EQ          reduce using rule 30 (exp -> exp EQ EQ exp .)
    EQ_MAJ          reduce using rule 30 (exp -> exp EQ EQ exp .)
    MIN_EQ          reduce using rule 30 (exp -> exp EQ EQ exp .)
    EQ_MIN          reduce using rule 30 (exp -> exp EQ EQ exp .)
    S               reduce using rule 30 (exp -> exp EQ EQ exp .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    STAR            shift and go to state 67
    DIV             shift and go to state 68

  ! PLUS            [ reduce using rule 30 (exp -> exp EQ EQ exp .) ]
  ! MINUS           [ reduce using rule 30 (exp -> exp EQ EQ exp .) ]
  ! STAR            [ reduce using rule 30 (exp -> exp EQ EQ exp .) ]
  ! DIV             [ reduce using rule 30 (exp -> exp EQ EQ exp .) ]
  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! MIN             [ shift and go to state 59 ]
  ! MAJ             [ shift and go to state 60 ]
  ! MAJ_EQ          [ shift and go to state 61 ]
  ! EQ_MAJ          [ shift and go to state 62 ]
  ! MIN_EQ          [ shift and go to state 63 ]
  ! EQ_MIN          [ shift and go to state 64 ]


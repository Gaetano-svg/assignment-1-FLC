
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftNOTleftMINMAJMIN_EQEQ_MINMAJ_EQEQ_MAJEQleftPLUSMINUSleftSTARDIVleftUMINUSnonassocIFXnonassocELSEAND BC BO CM DIV DOUBLE DOUBLE_TYPE ELSE EQ EQ_MAJ EQ_MIN ID IF INT INT_TYPE MAJ MAJ_EQ MIN MINUS MIN_EQ NOT OR PLUS PRINT RC RO S SC SO STAR WHILE nl ws\n        prog : decl_list stmt_list\n        \n        decl_list : decl_list decl \n                    | \n        \n        decl : type var_list S\n        \n        type : INT_TYPE \n                | DOUBLE_TYPE\n        \n        var_list : var \n                    | var_list CM var\n        \n        var : ID array\n        \n        array : empty\n                | array SO INT SC\n        \n        stmt_list : stmt_list stmt \n                    | stmt \n        \n        stmt : if \n                | while \n                | assignment \n                | print \n                | BO stmt_list BC\n        \n        assignment : id S \n                        | id EQ exp S \n        \n        print : PRINT id S\n        \n        if  : IF if_condition stmt %prec IFX\n                | IF if_condition stmt ELSE stmt\n        \n        if_condition : RO exp RC\n        \n        while : WHILE while_condition stmt\n        \n        while_condition : RO exp RC\n        \n        exp :   exp AND exp\n                | exp OR exp\n                | NOT exp\n                | exp EQ EQ exp\n                | exp MIN exp\n                | exp MAJ exp\n                | exp MAJ_EQ exp\n                | exp EQ_MAJ exp\n                | exp MIN_EQ exp\n                | exp EQ_MIN exp\n                | exp PLUS exp\n                | exp MINUS exp\n                | exp STAR exp\n                | exp DIV exp\n                | RO exp RC\n                | id\n                | INT\n                | DOUBLE\n                | MINUS INT %prec UMINUS\n                | MINUS DOUBLE %prec UMINUS\n        \n        id : ID\n            | ID SO INT SC\n            | ID SO ID SC\n        \n        empty :\n        '
    
_lr_action_items = {'BO':([0,2,3,4,5,7,8,9,10,11,19,23,24,26,28,32,36,37,45,48,53,55,72,73,77,],[-3,11,11,-2,-13,-14,-15,-16,-17,11,-12,11,11,11,-19,-4,-18,-22,-25,-21,11,-24,-26,-20,-23,]),'INT_TYPE':([0,2,4,32,],[-3,12,-2,-4,]),'DOUBLE_TYPE':([0,2,4,32,],[-3,13,-2,-4,]),'IF':([0,2,3,4,5,7,8,9,10,11,19,23,24,26,28,32,36,37,45,48,53,55,72,73,77,],[-3,14,14,-2,-13,-14,-15,-16,-17,14,-12,14,14,14,-19,-4,-18,-22,-25,-21,14,-24,-26,-20,-23,]),'WHILE':([0,2,3,4,5,7,8,9,10,11,19,23,24,26,28,32,36,37,45,48,53,55,72,73,77,],[-3,15,15,-2,-13,-14,-15,-16,-17,15,-12,15,15,15,-19,-4,-18,-22,-25,-21,15,-24,-26,-20,-23,]),'PRINT':([0,2,3,4,5,7,8,9,10,11,19,23,24,26,28,32,36,37,45,48,53,55,72,73,77,],[-3,17,17,-2,-13,-14,-15,-16,-17,17,-12,17,17,17,-19,-4,-18,-22,-25,-21,17,-24,-26,-20,-23,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,23,24,25,26,27,28,29,31,32,33,36,37,38,40,45,48,53,55,56,57,59,60,61,62,63,64,65,66,67,68,72,73,77,81,],[-3,18,18,-2,-13,22,-14,-15,-16,-17,18,-5,-6,18,-12,18,18,18,18,18,-19,18,49,-4,22,-18,-22,18,18,-25,-21,18,-24,18,18,18,18,18,18,18,18,18,18,18,18,-26,-20,-23,18,]),'$end':([1,3,5,7,8,9,10,19,28,36,37,45,48,73,77,],[0,-1,-13,-14,-15,-16,-17,-12,-19,-18,-22,-25,-21,-20,-23,]),'BC':([5,7,8,9,10,19,23,28,36,37,45,48,73,77,],[-13,-14,-15,-16,-17,-12,36,-19,-18,-22,-25,-21,-20,-23,]),'ELSE':([7,8,9,10,28,36,37,45,48,73,77,],[-14,-15,-16,-17,-19,-18,53,-25,-21,-20,-23,]),'RO':([14,15,25,27,29,38,40,56,57,59,60,61,62,63,64,65,66,67,68,81,],[25,27,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'S':([16,18,20,21,22,30,34,35,42,43,44,47,51,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,92,93,],[28,-47,32,-7,-50,48,-9,-10,-42,-43,-44,73,-8,-29,-45,-46,-49,-48,-41,-27,-28,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-11,-30,]),'EQ':([16,18,39,42,43,44,46,47,54,58,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[29,-47,58,-42,-43,-44,58,58,58,81,58,-45,-46,-49,-48,-41,58,58,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,]),'RC':([18,39,42,43,44,46,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,55,-42,-43,-44,72,78,-29,-45,-46,-49,-48,-41,-27,-28,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,]),'AND':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,56,-42,-43,-44,56,56,56,-29,-45,-46,-49,-48,-41,-27,56,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,]),'OR':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,57,-42,-43,-44,57,57,57,-29,-45,-46,-49,-48,-41,-27,-28,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,]),'MIN':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,59,-42,-43,-44,59,59,59,59,-45,-46,-49,-48,-41,59,59,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,]),'MAJ':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,60,-42,-43,-44,60,60,60,60,-45,-46,-49,-48,-41,60,60,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,]),'MAJ_EQ':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,61,-42,-43,-44,61,61,61,61,-45,-46,-49,-48,-41,61,61,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,]),'EQ_MAJ':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,62,-42,-43,-44,62,62,62,62,-45,-46,-49,-48,-41,62,62,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,]),'MIN_EQ':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,63,-42,-43,-44,63,63,63,63,-45,-46,-49,-48,-41,63,63,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,]),'EQ_MIN':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,64,-42,-43,-44,64,64,64,64,-45,-46,-49,-48,-41,64,64,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-30,]),'PLUS':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,65,-42,-43,-44,65,65,65,65,-45,-46,-49,-48,-41,65,65,65,65,65,65,65,65,-37,-38,-39,-40,65,]),'MINUS':([18,25,27,29,38,39,40,42,43,44,46,47,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,74,75,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93,],[-47,41,41,41,41,66,41,-42,-43,-44,66,66,66,41,41,41,41,41,41,41,41,41,41,41,41,66,-45,-46,-49,-48,-41,66,66,41,66,66,66,66,66,66,-37,-38,-39,-40,66,]),'STAR':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,67,-42,-43,-44,67,67,67,67,-45,-46,-49,-48,-41,67,67,67,67,67,67,67,67,67,67,-39,-40,67,]),'DIV':([18,39,42,43,44,46,47,54,69,70,71,74,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,],[-47,68,-42,-43,-44,68,68,68,68,-45,-46,-49,-48,-41,68,68,68,68,68,68,68,68,68,68,-39,-40,68,]),'SO':([18,22,34,35,92,],[31,-50,52,-10,-11,]),'CM':([20,21,22,34,35,51,92,],[33,-7,-50,-9,-10,-8,-11,]),'NOT':([25,27,29,38,40,56,57,59,60,61,62,63,64,65,66,67,68,81,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'INT':([25,27,29,31,38,40,41,52,56,57,59,60,61,62,63,64,65,66,67,68,81,],[43,43,43,50,43,43,70,76,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'DOUBLE':([25,27,29,38,40,41,56,57,59,60,61,62,63,64,65,66,67,68,81,],[44,44,44,44,44,71,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'SC':([49,50,76,],[74,75,92,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'decl_list':([0,],[2,]),'stmt_list':([2,11,],[3,23,]),'decl':([2,],[4,]),'stmt':([2,3,11,23,24,26,53,],[5,19,5,19,37,45,77,]),'type':([2,],[6,]),'if':([2,3,11,23,24,26,53,],[7,7,7,7,7,7,7,]),'while':([2,3,11,23,24,26,53,],[8,8,8,8,8,8,8,]),'assignment':([2,3,11,23,24,26,53,],[9,9,9,9,9,9,9,]),'print':([2,3,11,23,24,26,53,],[10,10,10,10,10,10,10,]),'id':([2,3,11,17,23,24,25,26,27,29,38,40,53,56,57,59,60,61,62,63,64,65,66,67,68,81,],[16,16,16,30,16,16,42,16,42,42,42,42,16,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'var_list':([6,],[20,]),'var':([6,33,],[21,51,]),'if_condition':([14,],[24,]),'while_condition':([15,],[26,]),'array':([22,],[34,]),'empty':([22,],[35,]),'exp':([25,27,29,38,40,56,57,59,60,61,62,63,64,65,66,67,68,81,],[39,46,47,54,69,79,80,82,83,84,85,86,87,88,89,90,91,93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> decl_list stmt_list','prog',2,'p_prog','myParser.py',39),
  ('decl_list -> decl_list decl','decl_list',2,'p_decl_list','myParser.py',48),
  ('decl_list -> <empty>','decl_list',0,'p_decl_list','myParser.py',49),
  ('decl -> type var_list S','decl',3,'p_decl','myParser.py',54),
  ('type -> INT_TYPE','type',1,'p_type','myParser.py',59),
  ('type -> DOUBLE_TYPE','type',1,'p_type','myParser.py',60),
  ('var_list -> var','var_list',1,'p_var_list','myParser.py',65),
  ('var_list -> var_list CM var','var_list',3,'p_var_list','myParser.py',66),
  ('var -> ID array','var',2,'p_var','myParser.py',71),
  ('array -> empty','array',1,'p_array','myParser.py',76),
  ('array -> array SO INT SC','array',4,'p_array','myParser.py',77),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','myParser.py',84),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','myParser.py',85),
  ('stmt -> if','stmt',1,'p_stmt','myParser.py',90),
  ('stmt -> while','stmt',1,'p_stmt','myParser.py',91),
  ('stmt -> assignment','stmt',1,'p_stmt','myParser.py',92),
  ('stmt -> print','stmt',1,'p_stmt','myParser.py',93),
  ('stmt -> BO stmt_list BC','stmt',3,'p_stmt','myParser.py',94),
  ('assignment -> id S','assignment',2,'p_assignment','myParser.py',100),
  ('assignment -> id EQ exp S','assignment',4,'p_assignment','myParser.py',101),
  ('print -> PRINT id S','print',3,'p_print','myParser.py',107),
  ('if -> IF if_condition stmt','if',3,'p_if','myParser.py',113),
  ('if -> IF if_condition stmt ELSE stmt','if',5,'p_if','myParser.py',114),
  ('if_condition -> RO exp RC','if_condition',3,'p_if_condition','myParser.py',119),
  ('while -> WHILE while_condition stmt','while',3,'p_while','myParser.py',125),
  ('while_condition -> RO exp RC','while_condition',3,'p_while_condition','myParser.py',130),
  ('exp -> exp AND exp','exp',3,'p_exp','myParser.py',136),
  ('exp -> exp OR exp','exp',3,'p_exp','myParser.py',137),
  ('exp -> NOT exp','exp',2,'p_exp','myParser.py',138),
  ('exp -> exp EQ EQ exp','exp',4,'p_exp','myParser.py',139),
  ('exp -> exp MIN exp','exp',3,'p_exp','myParser.py',140),
  ('exp -> exp MAJ exp','exp',3,'p_exp','myParser.py',141),
  ('exp -> exp MAJ_EQ exp','exp',3,'p_exp','myParser.py',142),
  ('exp -> exp EQ_MAJ exp','exp',3,'p_exp','myParser.py',143),
  ('exp -> exp MIN_EQ exp','exp',3,'p_exp','myParser.py',144),
  ('exp -> exp EQ_MIN exp','exp',3,'p_exp','myParser.py',145),
  ('exp -> exp PLUS exp','exp',3,'p_exp','myParser.py',146),
  ('exp -> exp MINUS exp','exp',3,'p_exp','myParser.py',147),
  ('exp -> exp STAR exp','exp',3,'p_exp','myParser.py',148),
  ('exp -> exp DIV exp','exp',3,'p_exp','myParser.py',149),
  ('exp -> RO exp RC','exp',3,'p_exp','myParser.py',150),
  ('exp -> id','exp',1,'p_exp','myParser.py',151),
  ('exp -> INT','exp',1,'p_exp','myParser.py',152),
  ('exp -> DOUBLE','exp',1,'p_exp','myParser.py',153),
  ('exp -> MINUS INT','exp',2,'p_exp','myParser.py',154),
  ('exp -> MINUS DOUBLE','exp',2,'p_exp','myParser.py',155),
  ('id -> ID','id',1,'p_id','myParser.py',160),
  ('id -> ID SO INT SC','id',4,'p_id','myParser.py',161),
  ('id -> ID SO ID SC','id',4,'p_id','myParser.py',162),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',170),
]

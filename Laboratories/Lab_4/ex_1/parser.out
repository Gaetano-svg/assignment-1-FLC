Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ws

Grammar

Rule 0     S' -> prog
Rule 1     prog -> elements interrogation elements
Rule 2     elements -> <empty>
Rule 3     elements -> elements element
Rule 4     element -> fact
Rule 5     element -> rule
Rule 6     fact -> predicate PT
Rule 7     fact -> error PT
Rule 8     rule -> predicate SEP1 predicates PT
Rule 9     rule -> error SEP1 predicates PT
Rule 10    predicates -> predicates CM predicate
Rule 11    predicates -> predicate
Rule 12    interrogation -> SEP2 predicates PT
Rule 13    interrogation -> SEP2 error PT
Rule 14    predicate -> ATOM RO arguments RC
Rule 15    predicate -> ATOM
Rule 16    arguments -> arguments CM argument
Rule 17    arguments -> argument
Rule 18    argument -> predicate
Rule 19    argument -> VARIABLE

Terminals, with rules where they appear

ATOM                 : 14 15
CM                   : 10 16
PT                   : 6 7 8 9 12 13
RC                   : 14
RO                   : 14
SEP1                 : 8 9
SEP2                 : 12 13
VARIABLE             : 19
error                : 7 9 13
ws                   : 

Nonterminals, with rules where they appear

argument             : 16 17
arguments            : 14 16
element              : 3
elements             : 1 1 3
fact                 : 4
interrogation        : 1
predicate            : 6 8 10 11 18
predicates           : 8 9 10 12
prog                 : 0
rule                 : 5

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . elements interrogation elements
    (2) elements -> .
    (3) elements -> . elements element

    SEP2            reduce using rule 2 (elements -> .)
    error           reduce using rule 2 (elements -> .)
    ATOM            reduce using rule 2 (elements -> .)

    prog                           shift and go to state 1
    elements                       shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> elements . interrogation elements
    (3) elements -> elements . element
    (12) interrogation -> . SEP2 predicates PT
    (13) interrogation -> . SEP2 error PT
    (4) element -> . fact
    (5) element -> . rule
    (6) fact -> . predicate PT
    (7) fact -> . error PT
    (8) rule -> . predicate SEP1 predicates PT
    (9) rule -> . error SEP1 predicates PT
    (14) predicate -> . ATOM RO arguments RC
    (15) predicate -> . ATOM

    SEP2            shift and go to state 5
    error           shift and go to state 6
    ATOM            shift and go to state 10

    interrogation                  shift and go to state 3
    element                        shift and go to state 4
    fact                           shift and go to state 7
    rule                           shift and go to state 8
    predicate                      shift and go to state 9

state 3

    (1) prog -> elements interrogation . elements
    (2) elements -> .
    (3) elements -> . elements element

    error           reduce using rule 2 (elements -> .)
    ATOM            reduce using rule 2 (elements -> .)
    $end            reduce using rule 2 (elements -> .)

    elements                       shift and go to state 11

state 4

    (3) elements -> elements element .

    SEP2            reduce using rule 3 (elements -> elements element .)
    error           reduce using rule 3 (elements -> elements element .)
    ATOM            reduce using rule 3 (elements -> elements element .)
    $end            reduce using rule 3 (elements -> elements element .)


state 5

    (12) interrogation -> SEP2 . predicates PT
    (13) interrogation -> SEP2 . error PT
    (10) predicates -> . predicates CM predicate
    (11) predicates -> . predicate
    (14) predicate -> . ATOM RO arguments RC
    (15) predicate -> . ATOM

    error           shift and go to state 13
    ATOM            shift and go to state 10

    predicates                     shift and go to state 12
    predicate                      shift and go to state 14

state 6

    (7) fact -> error . PT
    (9) rule -> error . SEP1 predicates PT

    PT              shift and go to state 15
    SEP1            shift and go to state 16


state 7

    (4) element -> fact .

    SEP2            reduce using rule 4 (element -> fact .)
    error           reduce using rule 4 (element -> fact .)
    ATOM            reduce using rule 4 (element -> fact .)
    $end            reduce using rule 4 (element -> fact .)


state 8

    (5) element -> rule .

    SEP2            reduce using rule 5 (element -> rule .)
    error           reduce using rule 5 (element -> rule .)
    ATOM            reduce using rule 5 (element -> rule .)
    $end            reduce using rule 5 (element -> rule .)


state 9

    (6) fact -> predicate . PT
    (8) rule -> predicate . SEP1 predicates PT

    PT              shift and go to state 17
    SEP1            shift and go to state 18


state 10

    (14) predicate -> ATOM . RO arguments RC
    (15) predicate -> ATOM .

    RO              shift and go to state 19
    PT              reduce using rule 15 (predicate -> ATOM .)
    SEP1            reduce using rule 15 (predicate -> ATOM .)
    CM              reduce using rule 15 (predicate -> ATOM .)
    RC              reduce using rule 15 (predicate -> ATOM .)


state 11

    (1) prog -> elements interrogation elements .
    (3) elements -> elements . element
    (4) element -> . fact
    (5) element -> . rule
    (6) fact -> . predicate PT
    (7) fact -> . error PT
    (8) rule -> . predicate SEP1 predicates PT
    (9) rule -> . error SEP1 predicates PT
    (14) predicate -> . ATOM RO arguments RC
    (15) predicate -> . ATOM

    $end            reduce using rule 1 (prog -> elements interrogation elements .)
    error           shift and go to state 6
    ATOM            shift and go to state 10

    element                        shift and go to state 4
    fact                           shift and go to state 7
    rule                           shift and go to state 8
    predicate                      shift and go to state 9

state 12

    (12) interrogation -> SEP2 predicates . PT
    (10) predicates -> predicates . CM predicate

    PT              shift and go to state 20
    CM              shift and go to state 21


state 13

    (13) interrogation -> SEP2 error . PT

    PT              shift and go to state 22


state 14

    (11) predicates -> predicate .

    PT              reduce using rule 11 (predicates -> predicate .)
    CM              reduce using rule 11 (predicates -> predicate .)


state 15

    (7) fact -> error PT .

    SEP2            reduce using rule 7 (fact -> error PT .)
    error           reduce using rule 7 (fact -> error PT .)
    ATOM            reduce using rule 7 (fact -> error PT .)
    $end            reduce using rule 7 (fact -> error PT .)


state 16

    (9) rule -> error SEP1 . predicates PT
    (10) predicates -> . predicates CM predicate
    (11) predicates -> . predicate
    (14) predicate -> . ATOM RO arguments RC
    (15) predicate -> . ATOM

    ATOM            shift and go to state 10

    predicates                     shift and go to state 23
    predicate                      shift and go to state 14

state 17

    (6) fact -> predicate PT .

    SEP2            reduce using rule 6 (fact -> predicate PT .)
    error           reduce using rule 6 (fact -> predicate PT .)
    ATOM            reduce using rule 6 (fact -> predicate PT .)
    $end            reduce using rule 6 (fact -> predicate PT .)


state 18

    (8) rule -> predicate SEP1 . predicates PT
    (10) predicates -> . predicates CM predicate
    (11) predicates -> . predicate
    (14) predicate -> . ATOM RO arguments RC
    (15) predicate -> . ATOM

    ATOM            shift and go to state 10

    predicate                      shift and go to state 14
    predicates                     shift and go to state 24

state 19

    (14) predicate -> ATOM RO . arguments RC
    (16) arguments -> . arguments CM argument
    (17) arguments -> . argument
    (18) argument -> . predicate
    (19) argument -> . VARIABLE
    (14) predicate -> . ATOM RO arguments RC
    (15) predicate -> . ATOM

    VARIABLE        shift and go to state 28
    ATOM            shift and go to state 10

    arguments                      shift and go to state 25
    argument                       shift and go to state 26
    predicate                      shift and go to state 27

state 20

    (12) interrogation -> SEP2 predicates PT .

    error           reduce using rule 12 (interrogation -> SEP2 predicates PT .)
    ATOM            reduce using rule 12 (interrogation -> SEP2 predicates PT .)
    $end            reduce using rule 12 (interrogation -> SEP2 predicates PT .)


state 21

    (10) predicates -> predicates CM . predicate
    (14) predicate -> . ATOM RO arguments RC
    (15) predicate -> . ATOM

    ATOM            shift and go to state 10

    predicate                      shift and go to state 29

state 22

    (13) interrogation -> SEP2 error PT .

    error           reduce using rule 13 (interrogation -> SEP2 error PT .)
    ATOM            reduce using rule 13 (interrogation -> SEP2 error PT .)
    $end            reduce using rule 13 (interrogation -> SEP2 error PT .)


state 23

    (9) rule -> error SEP1 predicates . PT
    (10) predicates -> predicates . CM predicate

    PT              shift and go to state 30
    CM              shift and go to state 21


state 24

    (8) rule -> predicate SEP1 predicates . PT
    (10) predicates -> predicates . CM predicate

    PT              shift and go to state 31
    CM              shift and go to state 21


state 25

    (14) predicate -> ATOM RO arguments . RC
    (16) arguments -> arguments . CM argument

    RC              shift and go to state 32
    CM              shift and go to state 33


state 26

    (17) arguments -> argument .

    RC              reduce using rule 17 (arguments -> argument .)
    CM              reduce using rule 17 (arguments -> argument .)


state 27

    (18) argument -> predicate .

    RC              reduce using rule 18 (argument -> predicate .)
    CM              reduce using rule 18 (argument -> predicate .)


state 28

    (19) argument -> VARIABLE .

    RC              reduce using rule 19 (argument -> VARIABLE .)
    CM              reduce using rule 19 (argument -> VARIABLE .)


state 29

    (10) predicates -> predicates CM predicate .

    PT              reduce using rule 10 (predicates -> predicates CM predicate .)
    CM              reduce using rule 10 (predicates -> predicates CM predicate .)


state 30

    (9) rule -> error SEP1 predicates PT .

    SEP2            reduce using rule 9 (rule -> error SEP1 predicates PT .)
    error           reduce using rule 9 (rule -> error SEP1 predicates PT .)
    ATOM            reduce using rule 9 (rule -> error SEP1 predicates PT .)
    $end            reduce using rule 9 (rule -> error SEP1 predicates PT .)


state 31

    (8) rule -> predicate SEP1 predicates PT .

    SEP2            reduce using rule 8 (rule -> predicate SEP1 predicates PT .)
    error           reduce using rule 8 (rule -> predicate SEP1 predicates PT .)
    ATOM            reduce using rule 8 (rule -> predicate SEP1 predicates PT .)
    $end            reduce using rule 8 (rule -> predicate SEP1 predicates PT .)


state 32

    (14) predicate -> ATOM RO arguments RC .

    PT              reduce using rule 14 (predicate -> ATOM RO arguments RC .)
    SEP1            reduce using rule 14 (predicate -> ATOM RO arguments RC .)
    CM              reduce using rule 14 (predicate -> ATOM RO arguments RC .)
    RC              reduce using rule 14 (predicate -> ATOM RO arguments RC .)


state 33

    (16) arguments -> arguments CM . argument
    (18) argument -> . predicate
    (19) argument -> . VARIABLE
    (14) predicate -> . ATOM RO arguments RC
    (15) predicate -> . ATOM

    VARIABLE        shift and go to state 28
    ATOM            shift and go to state 10

    argument                       shift and go to state 34
    predicate                      shift and go to state 27

state 34

    (16) arguments -> arguments CM argument .

    RC              reduce using rule 16 (arguments -> arguments CM argument .)
    CM              reduce using rule 16 (arguments -> arguments CM argument .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    nl
    ws

Grammar

Rule 0     S' -> prog
Rule 1     prog -> decl_list stmt_list
Rule 2     decl_list -> decl_list decl
Rule 3     decl_list -> <empty>
Rule 4     decl -> type var_list S
Rule 5     decl -> type error S
Rule 6     type -> INT_TYPE
Rule 7     type -> DOUBLE_TYPE
Rule 8     var_list -> var
Rule 9     var_list -> var_list CM var
Rule 10    var -> ID array
Rule 11    array -> empty
Rule 12    array -> array SO INT SC
Rule 13    stmt_list -> stmt_list stmt
Rule 14    stmt_list -> stmt
Rule 15    stmt_list -> error stmt
Rule 16    stmt -> if
Rule 17    stmt -> while
Rule 18    stmt -> assignment
Rule 19    stmt -> print
Rule 20    stmt -> BO stmt_list BC
Rule 21    assignment -> id S
Rule 22    assignment -> id EQ exp S
Rule 23    stmt -> BO stmt_list error BC
Rule 24    stmt -> BO error BC
Rule 25    stmt -> error S
Rule 26    assignment -> id EQ error S
Rule 27    assignment -> error EQ exp S
Rule 28    print -> PRINT id S
Rule 29    if -> IF if_condition stmt
Rule 30    if -> IF if_condition stmt ELSE stmt
Rule 31    if_condition -> RO exp RC
Rule 32    while -> WHILE while_condition stmt
Rule 33    while_condition -> RO exp RC
Rule 34    exp -> exp AND exp
Rule 35    exp -> exp OR exp
Rule 36    exp -> NOT exp
Rule 37    exp -> exp EQ EQ exp
Rule 38    exp -> exp MIN exp
Rule 39    exp -> exp MAJ exp
Rule 40    exp -> exp MAJ_EQ exp
Rule 41    exp -> exp EQ_MAJ exp
Rule 42    exp -> exp MIN_EQ exp
Rule 43    exp -> exp EQ_MIN exp
Rule 44    exp -> exp PLUS exp
Rule 45    exp -> exp MINUS exp
Rule 46    exp -> exp STAR exp
Rule 47    exp -> exp DIV exp
Rule 48    exp -> RO exp RC
Rule 49    exp -> id
Rule 50    exp -> INT
Rule 51    exp -> DOUBLE
Rule 52    exp -> MINUS INT
Rule 53    exp -> MINUS DOUBLE
Rule 54    id -> ID
Rule 55    id -> ID SO INT SC
Rule 56    id -> ID SO ID SC
Rule 57    empty -> <empty>

Terminals, with rules where they appear

AND                  : 34
BC                   : 20 23 24
BO                   : 20 23 24
CM                   : 9
DIV                  : 47
DOUBLE               : 51 53
DOUBLE_TYPE          : 7
ELSE                 : 30
EQ                   : 22 26 27 37 37
EQ_MAJ               : 41
EQ_MIN               : 43
ID                   : 10 54 55 56 56
IF                   : 29 30
INT                  : 12 50 52 55
INT_TYPE             : 6
MAJ                  : 39
MAJ_EQ               : 40
MIN                  : 38
MINUS                : 45 52 53
MIN_EQ               : 42
NOT                  : 36
OR                   : 35
PLUS                 : 44
PRINT                : 28
RC                   : 31 33 48
RO                   : 31 33 48
S                    : 4 5 21 22 25 26 27 28
SC                   : 12 55 56
SO                   : 12 55 56
STAR                 : 46
WHILE                : 32
error                : 5 15 23 24 25 26 27
nl                   : 
ws                   : 

Nonterminals, with rules where they appear

array                : 10 12
assignment           : 18
decl                 : 2
decl_list            : 1 2
empty                : 11
exp                  : 22 27 31 33 34 34 35 35 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48
id                   : 21 22 26 28 49
if                   : 16
if_condition         : 29 30
print                : 19
prog                 : 0
stmt                 : 13 14 15 29 30 30 32
stmt_list            : 1 13 20 23
type                 : 4 5
var                  : 8 9
var_list             : 4 9
while                : 17
while_condition      : 32

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . decl_list stmt_list
    (2) decl_list -> . decl_list decl
    (3) decl_list -> .

    error           reduce using rule 3 (decl_list -> .)
    BO              reduce using rule 3 (decl_list -> .)
    INT_TYPE        reduce using rule 3 (decl_list -> .)
    DOUBLE_TYPE     reduce using rule 3 (decl_list -> .)
    IF              reduce using rule 3 (decl_list -> .)
    WHILE           reduce using rule 3 (decl_list -> .)
    PRINT           reduce using rule 3 (decl_list -> .)
    ID              reduce using rule 3 (decl_list -> .)

    prog                           shift and go to state 1
    decl_list                      shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> decl_list . stmt_list
    (2) decl_list -> decl_list . decl
    (13) stmt_list -> . stmt_list stmt
    (14) stmt_list -> . stmt
    (15) stmt_list -> . error stmt
    (4) decl -> . type var_list S
    (5) decl -> . type error S
    (16) stmt -> . if
    (17) stmt -> . while
    (18) stmt -> . assignment
    (19) stmt -> . print
    (20) stmt -> . BO stmt_list BC
    (23) stmt -> . BO stmt_list error BC
    (24) stmt -> . BO error BC
    (25) stmt -> . error S
    (6) type -> . INT_TYPE
    (7) type -> . DOUBLE_TYPE
    (29) if -> . IF if_condition stmt
    (30) if -> . IF if_condition stmt ELSE stmt
    (32) while -> . WHILE while_condition stmt
    (21) assignment -> . id S
    (22) assignment -> . id EQ exp S
    (26) assignment -> . id EQ error S
    (27) assignment -> . error EQ exp S
    (28) print -> . PRINT id S
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    error           shift and go to state 6
    BO              shift and go to state 12
    INT_TYPE        shift and go to state 13
    DOUBLE_TYPE     shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt_list                      shift and go to state 3
    decl                           shift and go to state 4
    stmt                           shift and go to state 5
    type                           shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 3

    (1) prog -> decl_list stmt_list .
    (13) stmt_list -> stmt_list . stmt
    (16) stmt -> . if
    (17) stmt -> . while
    (18) stmt -> . assignment
    (19) stmt -> . print
    (20) stmt -> . BO stmt_list BC
    (23) stmt -> . BO stmt_list error BC
    (24) stmt -> . BO error BC
    (25) stmt -> . error S
    (29) if -> . IF if_condition stmt
    (30) if -> . IF if_condition stmt ELSE stmt
    (32) while -> . WHILE while_condition stmt
    (21) assignment -> . id S
    (22) assignment -> . id EQ exp S
    (26) assignment -> . id EQ error S
    (27) assignment -> . error EQ exp S
    (28) print -> . PRINT id S
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    $end            reduce using rule 1 (prog -> decl_list stmt_list .)
    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 20
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 4

    (2) decl_list -> decl_list decl .

    error           reduce using rule 2 (decl_list -> decl_list decl .)
    BO              reduce using rule 2 (decl_list -> decl_list decl .)
    INT_TYPE        reduce using rule 2 (decl_list -> decl_list decl .)
    DOUBLE_TYPE     reduce using rule 2 (decl_list -> decl_list decl .)
    IF              reduce using rule 2 (decl_list -> decl_list decl .)
    WHILE           reduce using rule 2 (decl_list -> decl_list decl .)
    PRINT           reduce using rule 2 (decl_list -> decl_list decl .)
    ID              reduce using rule 2 (decl_list -> decl_list decl .)


state 5

    (14) stmt_list -> stmt .

    BO              reduce using rule 14 (stmt_list -> stmt .)
    error           reduce using rule 14 (stmt_list -> stmt .)
    IF              reduce using rule 14 (stmt_list -> stmt .)
    WHILE           reduce using rule 14 (stmt_list -> stmt .)
    PRINT           reduce using rule 14 (stmt_list -> stmt .)
    ID              reduce using rule 14 (stmt_list -> stmt .)
    $end            reduce using rule 14 (stmt_list -> stmt .)
    BC              reduce using rule 14 (stmt_list -> stmt .)


state 6

    (15) stmt_list -> error . stmt
    (25) stmt -> error . S
    (27) assignment -> error . EQ exp S
    (16) stmt -> . if
    (17) stmt -> . while
    (18) stmt -> . assignment
    (19) stmt -> . print
    (20) stmt -> . BO stmt_list BC
    (23) stmt -> . BO stmt_list error BC
    (24) stmt -> . BO error BC
    (25) stmt -> . error S
    (29) if -> . IF if_condition stmt
    (30) if -> . IF if_condition stmt ELSE stmt
    (32) while -> . WHILE while_condition stmt
    (21) assignment -> . id S
    (22) assignment -> . id EQ exp S
    (26) assignment -> . id EQ error S
    (27) assignment -> . error EQ exp S
    (28) print -> . PRINT id S
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    S               shift and go to state 23
    EQ              shift and go to state 24
    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 22
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 7

    (4) decl -> type . var_list S
    (5) decl -> type . error S
    (8) var_list -> . var
    (9) var_list -> . var_list CM var
    (10) var -> . ID array

    error           shift and go to state 26
    ID              shift and go to state 28

    var_list                       shift and go to state 25
    var                            shift and go to state 27

state 8

    (16) stmt -> if .

    BO              reduce using rule 16 (stmt -> if .)
    error           reduce using rule 16 (stmt -> if .)
    IF              reduce using rule 16 (stmt -> if .)
    WHILE           reduce using rule 16 (stmt -> if .)
    PRINT           reduce using rule 16 (stmt -> if .)
    ID              reduce using rule 16 (stmt -> if .)
    $end            reduce using rule 16 (stmt -> if .)
    BC              reduce using rule 16 (stmt -> if .)
    ELSE            reduce using rule 16 (stmt -> if .)


state 9

    (17) stmt -> while .

    BO              reduce using rule 17 (stmt -> while .)
    error           reduce using rule 17 (stmt -> while .)
    IF              reduce using rule 17 (stmt -> while .)
    WHILE           reduce using rule 17 (stmt -> while .)
    PRINT           reduce using rule 17 (stmt -> while .)
    ID              reduce using rule 17 (stmt -> while .)
    $end            reduce using rule 17 (stmt -> while .)
    BC              reduce using rule 17 (stmt -> while .)
    ELSE            reduce using rule 17 (stmt -> while .)


state 10

    (18) stmt -> assignment .

    BO              reduce using rule 18 (stmt -> assignment .)
    error           reduce using rule 18 (stmt -> assignment .)
    IF              reduce using rule 18 (stmt -> assignment .)
    WHILE           reduce using rule 18 (stmt -> assignment .)
    PRINT           reduce using rule 18 (stmt -> assignment .)
    ID              reduce using rule 18 (stmt -> assignment .)
    $end            reduce using rule 18 (stmt -> assignment .)
    BC              reduce using rule 18 (stmt -> assignment .)
    ELSE            reduce using rule 18 (stmt -> assignment .)


state 11

    (19) stmt -> print .

    BO              reduce using rule 19 (stmt -> print .)
    error           reduce using rule 19 (stmt -> print .)
    IF              reduce using rule 19 (stmt -> print .)
    WHILE           reduce using rule 19 (stmt -> print .)
    PRINT           reduce using rule 19 (stmt -> print .)
    ID              reduce using rule 19 (stmt -> print .)
    $end            reduce using rule 19 (stmt -> print .)
    BC              reduce using rule 19 (stmt -> print .)
    ELSE            reduce using rule 19 (stmt -> print .)


state 12

    (20) stmt -> BO . stmt_list BC
    (23) stmt -> BO . stmt_list error BC
    (24) stmt -> BO . error BC
    (13) stmt_list -> . stmt_list stmt
    (14) stmt_list -> . stmt
    (15) stmt_list -> . error stmt
    (16) stmt -> . if
    (17) stmt -> . while
    (18) stmt -> . assignment
    (19) stmt -> . print
    (20) stmt -> . BO stmt_list BC
    (23) stmt -> . BO stmt_list error BC
    (24) stmt -> . BO error BC
    (25) stmt -> . error S
    (29) if -> . IF if_condition stmt
    (30) if -> . IF if_condition stmt ELSE stmt
    (32) while -> . WHILE while_condition stmt
    (21) assignment -> . id S
    (22) assignment -> . id EQ exp S
    (26) assignment -> . id EQ error S
    (27) assignment -> . error EQ exp S
    (28) print -> . PRINT id S
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    error           shift and go to state 30
    BO              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt_list                      shift and go to state 29
    stmt                           shift and go to state 5
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 13

    (6) type -> INT_TYPE .

    error           reduce using rule 6 (type -> INT_TYPE .)
    ID              reduce using rule 6 (type -> INT_TYPE .)


state 14

    (7) type -> DOUBLE_TYPE .

    error           reduce using rule 7 (type -> DOUBLE_TYPE .)
    ID              reduce using rule 7 (type -> DOUBLE_TYPE .)


state 15

    (29) if -> IF . if_condition stmt
    (30) if -> IF . if_condition stmt ELSE stmt
    (31) if_condition -> . RO exp RC

    RO              shift and go to state 32

    if_condition                   shift and go to state 31

state 16

    (32) while -> WHILE . while_condition stmt
    (33) while_condition -> . RO exp RC

    RO              shift and go to state 34

    while_condition                shift and go to state 33

state 17

    (21) assignment -> id . S
    (22) assignment -> id . EQ exp S
    (26) assignment -> id . EQ error S

    S               shift and go to state 35
    EQ              shift and go to state 36


state 18

    (28) print -> PRINT . id S
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    ID              shift and go to state 19

    id                             shift and go to state 37

state 19

    (54) id -> ID .
    (55) id -> ID . SO INT SC
    (56) id -> ID . SO ID SC

    S               reduce using rule 54 (id -> ID .)
    EQ              reduce using rule 54 (id -> ID .)
    AND             reduce using rule 54 (id -> ID .)
    OR              reduce using rule 54 (id -> ID .)
    MIN             reduce using rule 54 (id -> ID .)
    MAJ             reduce using rule 54 (id -> ID .)
    MAJ_EQ          reduce using rule 54 (id -> ID .)
    EQ_MAJ          reduce using rule 54 (id -> ID .)
    MIN_EQ          reduce using rule 54 (id -> ID .)
    EQ_MIN          reduce using rule 54 (id -> ID .)
    PLUS            reduce using rule 54 (id -> ID .)
    MINUS           reduce using rule 54 (id -> ID .)
    STAR            reduce using rule 54 (id -> ID .)
    DIV             reduce using rule 54 (id -> ID .)
    RC              reduce using rule 54 (id -> ID .)
    SO              shift and go to state 38


state 20

    (13) stmt_list -> stmt_list stmt .

    BO              reduce using rule 13 (stmt_list -> stmt_list stmt .)
    error           reduce using rule 13 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 13 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 13 (stmt_list -> stmt_list stmt .)
    PRINT           reduce using rule 13 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 13 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 13 (stmt_list -> stmt_list stmt .)
    BC              reduce using rule 13 (stmt_list -> stmt_list stmt .)


state 21

    (25) stmt -> error . S
    (27) assignment -> error . EQ exp S

    S               shift and go to state 23
    EQ              shift and go to state 24


state 22

    (15) stmt_list -> error stmt .

    BO              reduce using rule 15 (stmt_list -> error stmt .)
    error           reduce using rule 15 (stmt_list -> error stmt .)
    IF              reduce using rule 15 (stmt_list -> error stmt .)
    WHILE           reduce using rule 15 (stmt_list -> error stmt .)
    PRINT           reduce using rule 15 (stmt_list -> error stmt .)
    ID              reduce using rule 15 (stmt_list -> error stmt .)
    $end            reduce using rule 15 (stmt_list -> error stmt .)
    BC              reduce using rule 15 (stmt_list -> error stmt .)


state 23

    (25) stmt -> error S .

    BO              reduce using rule 25 (stmt -> error S .)
    error           reduce using rule 25 (stmt -> error S .)
    IF              reduce using rule 25 (stmt -> error S .)
    WHILE           reduce using rule 25 (stmt -> error S .)
    PRINT           reduce using rule 25 (stmt -> error S .)
    ID              reduce using rule 25 (stmt -> error S .)
    $end            reduce using rule 25 (stmt -> error S .)
    BC              reduce using rule 25 (stmt -> error S .)
    ELSE            reduce using rule 25 (stmt -> error S .)


state 24

    (27) assignment -> error EQ . exp S
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 39
    id                             shift and go to state 43

state 25

    (4) decl -> type var_list . S
    (9) var_list -> var_list . CM var

    S               shift and go to state 46
    CM              shift and go to state 47


state 26

    (5) decl -> type error . S

    S               shift and go to state 48


state 27

    (8) var_list -> var .

    S               reduce using rule 8 (var_list -> var .)
    CM              reduce using rule 8 (var_list -> var .)


state 28

    (10) var -> ID . array
    (11) array -> . empty
    (12) array -> . array SO INT SC
    (57) empty -> .

    SO              reduce using rule 57 (empty -> .)
    S               reduce using rule 57 (empty -> .)
    CM              reduce using rule 57 (empty -> .)

    array                          shift and go to state 49
    empty                          shift and go to state 50

state 29

    (20) stmt -> BO stmt_list . BC
    (23) stmt -> BO stmt_list . error BC
    (13) stmt_list -> stmt_list . stmt
    (16) stmt -> . if
    (17) stmt -> . while
    (18) stmt -> . assignment
    (19) stmt -> . print
    (20) stmt -> . BO stmt_list BC
    (23) stmt -> . BO stmt_list error BC
    (24) stmt -> . BO error BC
    (25) stmt -> . error S
    (29) if -> . IF if_condition stmt
    (30) if -> . IF if_condition stmt ELSE stmt
    (32) while -> . WHILE while_condition stmt
    (21) assignment -> . id S
    (22) assignment -> . id EQ exp S
    (26) assignment -> . id EQ error S
    (27) assignment -> . error EQ exp S
    (28) print -> . PRINT id S
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    BC              shift and go to state 51
    error           shift and go to state 52
    BO              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 20
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 30

    (24) stmt -> BO error . BC
    (15) stmt_list -> error . stmt
    (25) stmt -> error . S
    (27) assignment -> error . EQ exp S
    (16) stmt -> . if
    (17) stmt -> . while
    (18) stmt -> . assignment
    (19) stmt -> . print
    (20) stmt -> . BO stmt_list BC
    (23) stmt -> . BO stmt_list error BC
    (24) stmt -> . BO error BC
    (25) stmt -> . error S
    (29) if -> . IF if_condition stmt
    (30) if -> . IF if_condition stmt ELSE stmt
    (32) while -> . WHILE while_condition stmt
    (21) assignment -> . id S
    (22) assignment -> . id EQ exp S
    (26) assignment -> . id EQ error S
    (27) assignment -> . error EQ exp S
    (28) print -> . PRINT id S
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    BC              shift and go to state 53
    S               shift and go to state 23
    EQ              shift and go to state 24
    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 22
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 31

    (29) if -> IF if_condition . stmt
    (30) if -> IF if_condition . stmt ELSE stmt
    (16) stmt -> . if
    (17) stmt -> . while
    (18) stmt -> . assignment
    (19) stmt -> . print
    (20) stmt -> . BO stmt_list BC
    (23) stmt -> . BO stmt_list error BC
    (24) stmt -> . BO error BC
    (25) stmt -> . error S
    (29) if -> . IF if_condition stmt
    (30) if -> . IF if_condition stmt ELSE stmt
    (32) while -> . WHILE while_condition stmt
    (21) assignment -> . id S
    (22) assignment -> . id EQ exp S
    (26) assignment -> . id EQ error S
    (27) assignment -> . error EQ exp S
    (28) print -> . PRINT id S
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 54
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 32

    (31) if_condition -> RO . exp RC
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 55
    id                             shift and go to state 43

state 33

    (32) while -> WHILE while_condition . stmt
    (16) stmt -> . if
    (17) stmt -> . while
    (18) stmt -> . assignment
    (19) stmt -> . print
    (20) stmt -> . BO stmt_list BC
    (23) stmt -> . BO stmt_list error BC
    (24) stmt -> . BO error BC
    (25) stmt -> . error S
    (29) if -> . IF if_condition stmt
    (30) if -> . IF if_condition stmt ELSE stmt
    (32) while -> . WHILE while_condition stmt
    (21) assignment -> . id S
    (22) assignment -> . id EQ exp S
    (26) assignment -> . id EQ error S
    (27) assignment -> . error EQ exp S
    (28) print -> . PRINT id S
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 56
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 34

    (33) while_condition -> RO . exp RC
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 57
    id                             shift and go to state 43

state 35

    (21) assignment -> id S .

    BO              reduce using rule 21 (assignment -> id S .)
    error           reduce using rule 21 (assignment -> id S .)
    IF              reduce using rule 21 (assignment -> id S .)
    WHILE           reduce using rule 21 (assignment -> id S .)
    PRINT           reduce using rule 21 (assignment -> id S .)
    ID              reduce using rule 21 (assignment -> id S .)
    $end            reduce using rule 21 (assignment -> id S .)
    BC              reduce using rule 21 (assignment -> id S .)
    ELSE            reduce using rule 21 (assignment -> id S .)


state 36

    (22) assignment -> id EQ . exp S
    (26) assignment -> id EQ . error S
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    error           shift and go to state 59
    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    id                             shift and go to state 43
    exp                            shift and go to state 58

state 37

    (28) print -> PRINT id . S

    S               shift and go to state 60


state 38

    (55) id -> ID SO . INT SC
    (56) id -> ID SO . ID SC

    INT             shift and go to state 62
    ID              shift and go to state 61


state 39

    (27) assignment -> error EQ exp . S
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQ              shift and go to state 63
    MIN             shift and go to state 67
    MAJ             shift and go to state 68
    MAJ_EQ          shift and go to state 69
    EQ_MAJ          shift and go to state 70
    MIN_EQ          shift and go to state 71
    EQ_MIN          shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76


state 40

    (36) exp -> NOT . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 77
    id                             shift and go to state 43

state 41

    (52) exp -> MINUS . INT
    (53) exp -> MINUS . DOUBLE

    INT             shift and go to state 78
    DOUBLE          shift and go to state 79


state 42

    (48) exp -> RO . exp RC
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 80
    id                             shift and go to state 43

state 43

    (49) exp -> id .

    S               reduce using rule 49 (exp -> id .)
    AND             reduce using rule 49 (exp -> id .)
    OR              reduce using rule 49 (exp -> id .)
    EQ              reduce using rule 49 (exp -> id .)
    MIN             reduce using rule 49 (exp -> id .)
    MAJ             reduce using rule 49 (exp -> id .)
    MAJ_EQ          reduce using rule 49 (exp -> id .)
    EQ_MAJ          reduce using rule 49 (exp -> id .)
    MIN_EQ          reduce using rule 49 (exp -> id .)
    EQ_MIN          reduce using rule 49 (exp -> id .)
    PLUS            reduce using rule 49 (exp -> id .)
    MINUS           reduce using rule 49 (exp -> id .)
    STAR            reduce using rule 49 (exp -> id .)
    DIV             reduce using rule 49 (exp -> id .)
    RC              reduce using rule 49 (exp -> id .)


state 44

    (50) exp -> INT .

    S               reduce using rule 50 (exp -> INT .)
    AND             reduce using rule 50 (exp -> INT .)
    OR              reduce using rule 50 (exp -> INT .)
    EQ              reduce using rule 50 (exp -> INT .)
    MIN             reduce using rule 50 (exp -> INT .)
    MAJ             reduce using rule 50 (exp -> INT .)
    MAJ_EQ          reduce using rule 50 (exp -> INT .)
    EQ_MAJ          reduce using rule 50 (exp -> INT .)
    MIN_EQ          reduce using rule 50 (exp -> INT .)
    EQ_MIN          reduce using rule 50 (exp -> INT .)
    PLUS            reduce using rule 50 (exp -> INT .)
    MINUS           reduce using rule 50 (exp -> INT .)
    STAR            reduce using rule 50 (exp -> INT .)
    DIV             reduce using rule 50 (exp -> INT .)
    RC              reduce using rule 50 (exp -> INT .)


state 45

    (51) exp -> DOUBLE .

    S               reduce using rule 51 (exp -> DOUBLE .)
    AND             reduce using rule 51 (exp -> DOUBLE .)
    OR              reduce using rule 51 (exp -> DOUBLE .)
    EQ              reduce using rule 51 (exp -> DOUBLE .)
    MIN             reduce using rule 51 (exp -> DOUBLE .)
    MAJ             reduce using rule 51 (exp -> DOUBLE .)
    MAJ_EQ          reduce using rule 51 (exp -> DOUBLE .)
    EQ_MAJ          reduce using rule 51 (exp -> DOUBLE .)
    MIN_EQ          reduce using rule 51 (exp -> DOUBLE .)
    EQ_MIN          reduce using rule 51 (exp -> DOUBLE .)
    PLUS            reduce using rule 51 (exp -> DOUBLE .)
    MINUS           reduce using rule 51 (exp -> DOUBLE .)
    STAR            reduce using rule 51 (exp -> DOUBLE .)
    DIV             reduce using rule 51 (exp -> DOUBLE .)
    RC              reduce using rule 51 (exp -> DOUBLE .)


state 46

    (4) decl -> type var_list S .

    error           reduce using rule 4 (decl -> type var_list S .)
    BO              reduce using rule 4 (decl -> type var_list S .)
    INT_TYPE        reduce using rule 4 (decl -> type var_list S .)
    DOUBLE_TYPE     reduce using rule 4 (decl -> type var_list S .)
    IF              reduce using rule 4 (decl -> type var_list S .)
    WHILE           reduce using rule 4 (decl -> type var_list S .)
    PRINT           reduce using rule 4 (decl -> type var_list S .)
    ID              reduce using rule 4 (decl -> type var_list S .)


state 47

    (9) var_list -> var_list CM . var
    (10) var -> . ID array

    ID              shift and go to state 28

    var                            shift and go to state 81

state 48

    (5) decl -> type error S .

    error           reduce using rule 5 (decl -> type error S .)
    BO              reduce using rule 5 (decl -> type error S .)
    INT_TYPE        reduce using rule 5 (decl -> type error S .)
    DOUBLE_TYPE     reduce using rule 5 (decl -> type error S .)
    IF              reduce using rule 5 (decl -> type error S .)
    WHILE           reduce using rule 5 (decl -> type error S .)
    PRINT           reduce using rule 5 (decl -> type error S .)
    ID              reduce using rule 5 (decl -> type error S .)


state 49

    (10) var -> ID array .
    (12) array -> array . SO INT SC

    S               reduce using rule 10 (var -> ID array .)
    CM              reduce using rule 10 (var -> ID array .)
    SO              shift and go to state 82


state 50

    (11) array -> empty .

    SO              reduce using rule 11 (array -> empty .)
    S               reduce using rule 11 (array -> empty .)
    CM              reduce using rule 11 (array -> empty .)


state 51

    (20) stmt -> BO stmt_list BC .

    BO              reduce using rule 20 (stmt -> BO stmt_list BC .)
    error           reduce using rule 20 (stmt -> BO stmt_list BC .)
    IF              reduce using rule 20 (stmt -> BO stmt_list BC .)
    WHILE           reduce using rule 20 (stmt -> BO stmt_list BC .)
    PRINT           reduce using rule 20 (stmt -> BO stmt_list BC .)
    ID              reduce using rule 20 (stmt -> BO stmt_list BC .)
    $end            reduce using rule 20 (stmt -> BO stmt_list BC .)
    BC              reduce using rule 20 (stmt -> BO stmt_list BC .)
    ELSE            reduce using rule 20 (stmt -> BO stmt_list BC .)


state 52

    (23) stmt -> BO stmt_list error . BC
    (25) stmt -> error . S
    (27) assignment -> error . EQ exp S

    BC              shift and go to state 83
    S               shift and go to state 23
    EQ              shift and go to state 24


state 53

    (24) stmt -> BO error BC .

    BO              reduce using rule 24 (stmt -> BO error BC .)
    error           reduce using rule 24 (stmt -> BO error BC .)
    IF              reduce using rule 24 (stmt -> BO error BC .)
    WHILE           reduce using rule 24 (stmt -> BO error BC .)
    PRINT           reduce using rule 24 (stmt -> BO error BC .)
    ID              reduce using rule 24 (stmt -> BO error BC .)
    $end            reduce using rule 24 (stmt -> BO error BC .)
    BC              reduce using rule 24 (stmt -> BO error BC .)
    ELSE            reduce using rule 24 (stmt -> BO error BC .)


state 54

    (29) if -> IF if_condition stmt .
    (30) if -> IF if_condition stmt . ELSE stmt

    BO              reduce using rule 29 (if -> IF if_condition stmt .)
    error           reduce using rule 29 (if -> IF if_condition stmt .)
    IF              reduce using rule 29 (if -> IF if_condition stmt .)
    WHILE           reduce using rule 29 (if -> IF if_condition stmt .)
    PRINT           reduce using rule 29 (if -> IF if_condition stmt .)
    ID              reduce using rule 29 (if -> IF if_condition stmt .)
    $end            reduce using rule 29 (if -> IF if_condition stmt .)
    BC              reduce using rule 29 (if -> IF if_condition stmt .)
    ELSE            shift and go to state 84

  ! ELSE            [ reduce using rule 29 (if -> IF if_condition stmt .) ]


state 55

    (31) if_condition -> RO exp . RC
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    RC              shift and go to state 85
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQ              shift and go to state 63
    MIN             shift and go to state 67
    MAJ             shift and go to state 68
    MAJ_EQ          shift and go to state 69
    EQ_MAJ          shift and go to state 70
    MIN_EQ          shift and go to state 71
    EQ_MIN          shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76


state 56

    (32) while -> WHILE while_condition stmt .

    BO              reduce using rule 32 (while -> WHILE while_condition stmt .)
    error           reduce using rule 32 (while -> WHILE while_condition stmt .)
    IF              reduce using rule 32 (while -> WHILE while_condition stmt .)
    WHILE           reduce using rule 32 (while -> WHILE while_condition stmt .)
    PRINT           reduce using rule 32 (while -> WHILE while_condition stmt .)
    ID              reduce using rule 32 (while -> WHILE while_condition stmt .)
    $end            reduce using rule 32 (while -> WHILE while_condition stmt .)
    BC              reduce using rule 32 (while -> WHILE while_condition stmt .)
    ELSE            reduce using rule 32 (while -> WHILE while_condition stmt .)


state 57

    (33) while_condition -> RO exp . RC
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    RC              shift and go to state 86
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQ              shift and go to state 63
    MIN             shift and go to state 67
    MAJ             shift and go to state 68
    MAJ_EQ          shift and go to state 69
    EQ_MAJ          shift and go to state 70
    MIN_EQ          shift and go to state 71
    EQ_MIN          shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76


state 58

    (22) assignment -> id EQ exp . S
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               shift and go to state 87
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQ              shift and go to state 63
    MIN             shift and go to state 67
    MAJ             shift and go to state 68
    MAJ_EQ          shift and go to state 69
    EQ_MAJ          shift and go to state 70
    MIN_EQ          shift and go to state 71
    EQ_MIN          shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76


state 59

    (26) assignment -> id EQ error . S

    S               shift and go to state 88


state 60

    (28) print -> PRINT id S .

    BO              reduce using rule 28 (print -> PRINT id S .)
    error           reduce using rule 28 (print -> PRINT id S .)
    IF              reduce using rule 28 (print -> PRINT id S .)
    WHILE           reduce using rule 28 (print -> PRINT id S .)
    PRINT           reduce using rule 28 (print -> PRINT id S .)
    ID              reduce using rule 28 (print -> PRINT id S .)
    $end            reduce using rule 28 (print -> PRINT id S .)
    BC              reduce using rule 28 (print -> PRINT id S .)
    ELSE            reduce using rule 28 (print -> PRINT id S .)


state 61

    (56) id -> ID SO ID . SC

    SC              shift and go to state 89


state 62

    (55) id -> ID SO INT . SC

    SC              shift and go to state 90


state 63

    (37) exp -> exp EQ . EQ exp

    EQ              shift and go to state 91


state 64

    (27) assignment -> error EQ exp S .

    BO              reduce using rule 27 (assignment -> error EQ exp S .)
    error           reduce using rule 27 (assignment -> error EQ exp S .)
    IF              reduce using rule 27 (assignment -> error EQ exp S .)
    WHILE           reduce using rule 27 (assignment -> error EQ exp S .)
    PRINT           reduce using rule 27 (assignment -> error EQ exp S .)
    ID              reduce using rule 27 (assignment -> error EQ exp S .)
    $end            reduce using rule 27 (assignment -> error EQ exp S .)
    BC              reduce using rule 27 (assignment -> error EQ exp S .)
    ELSE            reduce using rule 27 (assignment -> error EQ exp S .)


state 65

    (34) exp -> exp AND . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 92
    id                             shift and go to state 43

state 66

    (35) exp -> exp OR . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 93
    id                             shift and go to state 43

state 67

    (38) exp -> exp MIN . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 94
    id                             shift and go to state 43

state 68

    (39) exp -> exp MAJ . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 95
    id                             shift and go to state 43

state 69

    (40) exp -> exp MAJ_EQ . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 96
    id                             shift and go to state 43

state 70

    (41) exp -> exp EQ_MAJ . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 97
    id                             shift and go to state 43

state 71

    (42) exp -> exp MIN_EQ . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 98
    id                             shift and go to state 43

state 72

    (43) exp -> exp EQ_MIN . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 99
    id                             shift and go to state 43

state 73

    (44) exp -> exp PLUS . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 100
    id                             shift and go to state 43

state 74

    (45) exp -> exp MINUS . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 101
    id                             shift and go to state 43

state 75

    (46) exp -> exp STAR . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 102
    id                             shift and go to state 43

state 76

    (47) exp -> exp DIV . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 103
    id                             shift and go to state 43

state 77

    (36) exp -> NOT exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 36 (exp -> NOT exp .)
    AND             reduce using rule 36 (exp -> NOT exp .)
    OR              reduce using rule 36 (exp -> NOT exp .)
    RC              reduce using rule 36 (exp -> NOT exp .)
    EQ              shift and go to state 63
    MIN             shift and go to state 67
    MAJ             shift and go to state 68
    MAJ_EQ          shift and go to state 69
    EQ_MAJ          shift and go to state 70
    MIN_EQ          shift and go to state 71
    EQ_MIN          shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! EQ              [ reduce using rule 36 (exp -> NOT exp .) ]
  ! MIN             [ reduce using rule 36 (exp -> NOT exp .) ]
  ! MAJ             [ reduce using rule 36 (exp -> NOT exp .) ]
  ! MAJ_EQ          [ reduce using rule 36 (exp -> NOT exp .) ]
  ! EQ_MAJ          [ reduce using rule 36 (exp -> NOT exp .) ]
  ! MIN_EQ          [ reduce using rule 36 (exp -> NOT exp .) ]
  ! EQ_MIN          [ reduce using rule 36 (exp -> NOT exp .) ]
  ! PLUS            [ reduce using rule 36 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 36 (exp -> NOT exp .) ]
  ! STAR            [ reduce using rule 36 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 36 (exp -> NOT exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 78

    (52) exp -> MINUS INT .

    S               reduce using rule 52 (exp -> MINUS INT .)
    AND             reduce using rule 52 (exp -> MINUS INT .)
    OR              reduce using rule 52 (exp -> MINUS INT .)
    EQ              reduce using rule 52 (exp -> MINUS INT .)
    MIN             reduce using rule 52 (exp -> MINUS INT .)
    MAJ             reduce using rule 52 (exp -> MINUS INT .)
    MAJ_EQ          reduce using rule 52 (exp -> MINUS INT .)
    EQ_MAJ          reduce using rule 52 (exp -> MINUS INT .)
    MIN_EQ          reduce using rule 52 (exp -> MINUS INT .)
    EQ_MIN          reduce using rule 52 (exp -> MINUS INT .)
    PLUS            reduce using rule 52 (exp -> MINUS INT .)
    MINUS           reduce using rule 52 (exp -> MINUS INT .)
    STAR            reduce using rule 52 (exp -> MINUS INT .)
    DIV             reduce using rule 52 (exp -> MINUS INT .)
    RC              reduce using rule 52 (exp -> MINUS INT .)


state 79

    (53) exp -> MINUS DOUBLE .

    S               reduce using rule 53 (exp -> MINUS DOUBLE .)
    AND             reduce using rule 53 (exp -> MINUS DOUBLE .)
    OR              reduce using rule 53 (exp -> MINUS DOUBLE .)
    EQ              reduce using rule 53 (exp -> MINUS DOUBLE .)
    MIN             reduce using rule 53 (exp -> MINUS DOUBLE .)
    MAJ             reduce using rule 53 (exp -> MINUS DOUBLE .)
    MAJ_EQ          reduce using rule 53 (exp -> MINUS DOUBLE .)
    EQ_MAJ          reduce using rule 53 (exp -> MINUS DOUBLE .)
    MIN_EQ          reduce using rule 53 (exp -> MINUS DOUBLE .)
    EQ_MIN          reduce using rule 53 (exp -> MINUS DOUBLE .)
    PLUS            reduce using rule 53 (exp -> MINUS DOUBLE .)
    MINUS           reduce using rule 53 (exp -> MINUS DOUBLE .)
    STAR            reduce using rule 53 (exp -> MINUS DOUBLE .)
    DIV             reduce using rule 53 (exp -> MINUS DOUBLE .)
    RC              reduce using rule 53 (exp -> MINUS DOUBLE .)


state 80

    (48) exp -> RO exp . RC
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    RC              shift and go to state 104
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQ              shift and go to state 63
    MIN             shift and go to state 67
    MAJ             shift and go to state 68
    MAJ_EQ          shift and go to state 69
    EQ_MAJ          shift and go to state 70
    MIN_EQ          shift and go to state 71
    EQ_MIN          shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76


state 81

    (9) var_list -> var_list CM var .

    S               reduce using rule 9 (var_list -> var_list CM var .)
    CM              reduce using rule 9 (var_list -> var_list CM var .)


state 82

    (12) array -> array SO . INT SC

    INT             shift and go to state 105


state 83

    (23) stmt -> BO stmt_list error BC .

    BO              reduce using rule 23 (stmt -> BO stmt_list error BC .)
    error           reduce using rule 23 (stmt -> BO stmt_list error BC .)
    IF              reduce using rule 23 (stmt -> BO stmt_list error BC .)
    WHILE           reduce using rule 23 (stmt -> BO stmt_list error BC .)
    PRINT           reduce using rule 23 (stmt -> BO stmt_list error BC .)
    ID              reduce using rule 23 (stmt -> BO stmt_list error BC .)
    $end            reduce using rule 23 (stmt -> BO stmt_list error BC .)
    BC              reduce using rule 23 (stmt -> BO stmt_list error BC .)
    ELSE            reduce using rule 23 (stmt -> BO stmt_list error BC .)


state 84

    (30) if -> IF if_condition stmt ELSE . stmt
    (16) stmt -> . if
    (17) stmt -> . while
    (18) stmt -> . assignment
    (19) stmt -> . print
    (20) stmt -> . BO stmt_list BC
    (23) stmt -> . BO stmt_list error BC
    (24) stmt -> . BO error BC
    (25) stmt -> . error S
    (29) if -> . IF if_condition stmt
    (30) if -> . IF if_condition stmt ELSE stmt
    (32) while -> . WHILE while_condition stmt
    (21) assignment -> . id S
    (22) assignment -> . id EQ exp S
    (26) assignment -> . id EQ error S
    (27) assignment -> . error EQ exp S
    (28) print -> . PRINT id S
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 106
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 85

    (31) if_condition -> RO exp RC .

    BO              reduce using rule 31 (if_condition -> RO exp RC .)
    error           reduce using rule 31 (if_condition -> RO exp RC .)
    IF              reduce using rule 31 (if_condition -> RO exp RC .)
    WHILE           reduce using rule 31 (if_condition -> RO exp RC .)
    PRINT           reduce using rule 31 (if_condition -> RO exp RC .)
    ID              reduce using rule 31 (if_condition -> RO exp RC .)


state 86

    (33) while_condition -> RO exp RC .

    BO              reduce using rule 33 (while_condition -> RO exp RC .)
    error           reduce using rule 33 (while_condition -> RO exp RC .)
    IF              reduce using rule 33 (while_condition -> RO exp RC .)
    WHILE           reduce using rule 33 (while_condition -> RO exp RC .)
    PRINT           reduce using rule 33 (while_condition -> RO exp RC .)
    ID              reduce using rule 33 (while_condition -> RO exp RC .)


state 87

    (22) assignment -> id EQ exp S .

    BO              reduce using rule 22 (assignment -> id EQ exp S .)
    error           reduce using rule 22 (assignment -> id EQ exp S .)
    IF              reduce using rule 22 (assignment -> id EQ exp S .)
    WHILE           reduce using rule 22 (assignment -> id EQ exp S .)
    PRINT           reduce using rule 22 (assignment -> id EQ exp S .)
    ID              reduce using rule 22 (assignment -> id EQ exp S .)
    $end            reduce using rule 22 (assignment -> id EQ exp S .)
    BC              reduce using rule 22 (assignment -> id EQ exp S .)
    ELSE            reduce using rule 22 (assignment -> id EQ exp S .)


state 88

    (26) assignment -> id EQ error S .

    BO              reduce using rule 26 (assignment -> id EQ error S .)
    error           reduce using rule 26 (assignment -> id EQ error S .)
    IF              reduce using rule 26 (assignment -> id EQ error S .)
    WHILE           reduce using rule 26 (assignment -> id EQ error S .)
    PRINT           reduce using rule 26 (assignment -> id EQ error S .)
    ID              reduce using rule 26 (assignment -> id EQ error S .)
    $end            reduce using rule 26 (assignment -> id EQ error S .)
    BC              reduce using rule 26 (assignment -> id EQ error S .)
    ELSE            reduce using rule 26 (assignment -> id EQ error S .)


state 89

    (56) id -> ID SO ID SC .

    S               reduce using rule 56 (id -> ID SO ID SC .)
    EQ              reduce using rule 56 (id -> ID SO ID SC .)
    AND             reduce using rule 56 (id -> ID SO ID SC .)
    OR              reduce using rule 56 (id -> ID SO ID SC .)
    MIN             reduce using rule 56 (id -> ID SO ID SC .)
    MAJ             reduce using rule 56 (id -> ID SO ID SC .)
    MAJ_EQ          reduce using rule 56 (id -> ID SO ID SC .)
    EQ_MAJ          reduce using rule 56 (id -> ID SO ID SC .)
    MIN_EQ          reduce using rule 56 (id -> ID SO ID SC .)
    EQ_MIN          reduce using rule 56 (id -> ID SO ID SC .)
    PLUS            reduce using rule 56 (id -> ID SO ID SC .)
    MINUS           reduce using rule 56 (id -> ID SO ID SC .)
    STAR            reduce using rule 56 (id -> ID SO ID SC .)
    DIV             reduce using rule 56 (id -> ID SO ID SC .)
    RC              reduce using rule 56 (id -> ID SO ID SC .)


state 90

    (55) id -> ID SO INT SC .

    S               reduce using rule 55 (id -> ID SO INT SC .)
    EQ              reduce using rule 55 (id -> ID SO INT SC .)
    AND             reduce using rule 55 (id -> ID SO INT SC .)
    OR              reduce using rule 55 (id -> ID SO INT SC .)
    MIN             reduce using rule 55 (id -> ID SO INT SC .)
    MAJ             reduce using rule 55 (id -> ID SO INT SC .)
    MAJ_EQ          reduce using rule 55 (id -> ID SO INT SC .)
    EQ_MAJ          reduce using rule 55 (id -> ID SO INT SC .)
    MIN_EQ          reduce using rule 55 (id -> ID SO INT SC .)
    EQ_MIN          reduce using rule 55 (id -> ID SO INT SC .)
    PLUS            reduce using rule 55 (id -> ID SO INT SC .)
    MINUS           reduce using rule 55 (id -> ID SO INT SC .)
    STAR            reduce using rule 55 (id -> ID SO INT SC .)
    DIV             reduce using rule 55 (id -> ID SO INT SC .)
    RC              reduce using rule 55 (id -> ID SO INT SC .)


state 91

    (37) exp -> exp EQ EQ . exp
    (34) exp -> . exp AND exp
    (35) exp -> . exp OR exp
    (36) exp -> . NOT exp
    (37) exp -> . exp EQ EQ exp
    (38) exp -> . exp MIN exp
    (39) exp -> . exp MAJ exp
    (40) exp -> . exp MAJ_EQ exp
    (41) exp -> . exp EQ_MAJ exp
    (42) exp -> . exp MIN_EQ exp
    (43) exp -> . exp EQ_MIN exp
    (44) exp -> . exp PLUS exp
    (45) exp -> . exp MINUS exp
    (46) exp -> . exp STAR exp
    (47) exp -> . exp DIV exp
    (48) exp -> . RO exp RC
    (49) exp -> . id
    (50) exp -> . INT
    (51) exp -> . DOUBLE
    (52) exp -> . MINUS INT
    (53) exp -> . MINUS DOUBLE
    (54) id -> . ID
    (55) id -> . ID SO INT SC
    (56) id -> . ID SO ID SC

    NOT             shift and go to state 40
    RO              shift and go to state 42
    INT             shift and go to state 44
    DOUBLE          shift and go to state 45
    MINUS           shift and go to state 41
    ID              shift and go to state 19

    exp                            shift and go to state 107
    id                             shift and go to state 43

state 92

    (34) exp -> exp AND exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 34 (exp -> exp AND exp .)
    AND             reduce using rule 34 (exp -> exp AND exp .)
    OR              reduce using rule 34 (exp -> exp AND exp .)
    RC              reduce using rule 34 (exp -> exp AND exp .)
    EQ              shift and go to state 63
    MIN             shift and go to state 67
    MAJ             shift and go to state 68
    MAJ_EQ          shift and go to state 69
    EQ_MAJ          shift and go to state 70
    MIN_EQ          shift and go to state 71
    EQ_MIN          shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! EQ              [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! MIN             [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! MAJ             [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! MAJ_EQ          [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! EQ_MAJ          [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! MIN_EQ          [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! EQ_MIN          [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! PLUS            [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! STAR            [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 34 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]


state 93

    (35) exp -> exp OR exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 35 (exp -> exp OR exp .)
    OR              reduce using rule 35 (exp -> exp OR exp .)
    RC              reduce using rule 35 (exp -> exp OR exp .)
    AND             shift and go to state 65
    EQ              shift and go to state 63
    MIN             shift and go to state 67
    MAJ             shift and go to state 68
    MAJ_EQ          shift and go to state 69
    EQ_MAJ          shift and go to state 70
    MIN_EQ          shift and go to state 71
    EQ_MIN          shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! AND             [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! MIN             [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! MAJ             [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! MAJ_EQ          [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! EQ_MAJ          [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! MIN_EQ          [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! EQ_MIN          [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! PLUS            [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! STAR            [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 35 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 66 ]


state 94

    (38) exp -> exp MIN exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 38 (exp -> exp MIN exp .)
    AND             reduce using rule 38 (exp -> exp MIN exp .)
    OR              reduce using rule 38 (exp -> exp MIN exp .)
    EQ              reduce using rule 38 (exp -> exp MIN exp .)
    MIN             reduce using rule 38 (exp -> exp MIN exp .)
    MAJ             reduce using rule 38 (exp -> exp MIN exp .)
    MAJ_EQ          reduce using rule 38 (exp -> exp MIN exp .)
    EQ_MAJ          reduce using rule 38 (exp -> exp MIN exp .)
    MIN_EQ          reduce using rule 38 (exp -> exp MIN exp .)
    EQ_MIN          reduce using rule 38 (exp -> exp MIN exp .)
    RC              reduce using rule 38 (exp -> exp MIN exp .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! PLUS            [ reduce using rule 38 (exp -> exp MIN exp .) ]
  ! MINUS           [ reduce using rule 38 (exp -> exp MIN exp .) ]
  ! STAR            [ reduce using rule 38 (exp -> exp MIN exp .) ]
  ! DIV             [ reduce using rule 38 (exp -> exp MIN exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]


state 95

    (39) exp -> exp MAJ exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 39 (exp -> exp MAJ exp .)
    AND             reduce using rule 39 (exp -> exp MAJ exp .)
    OR              reduce using rule 39 (exp -> exp MAJ exp .)
    EQ              reduce using rule 39 (exp -> exp MAJ exp .)
    MIN             reduce using rule 39 (exp -> exp MAJ exp .)
    MAJ             reduce using rule 39 (exp -> exp MAJ exp .)
    MAJ_EQ          reduce using rule 39 (exp -> exp MAJ exp .)
    EQ_MAJ          reduce using rule 39 (exp -> exp MAJ exp .)
    MIN_EQ          reduce using rule 39 (exp -> exp MAJ exp .)
    EQ_MIN          reduce using rule 39 (exp -> exp MAJ exp .)
    RC              reduce using rule 39 (exp -> exp MAJ exp .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! PLUS            [ reduce using rule 39 (exp -> exp MAJ exp .) ]
  ! MINUS           [ reduce using rule 39 (exp -> exp MAJ exp .) ]
  ! STAR            [ reduce using rule 39 (exp -> exp MAJ exp .) ]
  ! DIV             [ reduce using rule 39 (exp -> exp MAJ exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]


state 96

    (40) exp -> exp MAJ_EQ exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    AND             reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    OR              reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    EQ              reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    MIN             reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    MAJ             reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    MAJ_EQ          reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    EQ_MAJ          reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    MIN_EQ          reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    EQ_MIN          reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    RC              reduce using rule 40 (exp -> exp MAJ_EQ exp .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! PLUS            [ reduce using rule 40 (exp -> exp MAJ_EQ exp .) ]
  ! MINUS           [ reduce using rule 40 (exp -> exp MAJ_EQ exp .) ]
  ! STAR            [ reduce using rule 40 (exp -> exp MAJ_EQ exp .) ]
  ! DIV             [ reduce using rule 40 (exp -> exp MAJ_EQ exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]


state 97

    (41) exp -> exp EQ_MAJ exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    AND             reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    OR              reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    EQ              reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    MIN             reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    MAJ             reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    MAJ_EQ          reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    EQ_MAJ          reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    MIN_EQ          reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    EQ_MIN          reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    RC              reduce using rule 41 (exp -> exp EQ_MAJ exp .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! PLUS            [ reduce using rule 41 (exp -> exp EQ_MAJ exp .) ]
  ! MINUS           [ reduce using rule 41 (exp -> exp EQ_MAJ exp .) ]
  ! STAR            [ reduce using rule 41 (exp -> exp EQ_MAJ exp .) ]
  ! DIV             [ reduce using rule 41 (exp -> exp EQ_MAJ exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]


state 98

    (42) exp -> exp MIN_EQ exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 42 (exp -> exp MIN_EQ exp .)
    AND             reduce using rule 42 (exp -> exp MIN_EQ exp .)
    OR              reduce using rule 42 (exp -> exp MIN_EQ exp .)
    EQ              reduce using rule 42 (exp -> exp MIN_EQ exp .)
    MIN             reduce using rule 42 (exp -> exp MIN_EQ exp .)
    MAJ             reduce using rule 42 (exp -> exp MIN_EQ exp .)
    MAJ_EQ          reduce using rule 42 (exp -> exp MIN_EQ exp .)
    EQ_MAJ          reduce using rule 42 (exp -> exp MIN_EQ exp .)
    MIN_EQ          reduce using rule 42 (exp -> exp MIN_EQ exp .)
    EQ_MIN          reduce using rule 42 (exp -> exp MIN_EQ exp .)
    RC              reduce using rule 42 (exp -> exp MIN_EQ exp .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! PLUS            [ reduce using rule 42 (exp -> exp MIN_EQ exp .) ]
  ! MINUS           [ reduce using rule 42 (exp -> exp MIN_EQ exp .) ]
  ! STAR            [ reduce using rule 42 (exp -> exp MIN_EQ exp .) ]
  ! DIV             [ reduce using rule 42 (exp -> exp MIN_EQ exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]


state 99

    (43) exp -> exp EQ_MIN exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 43 (exp -> exp EQ_MIN exp .)
    AND             reduce using rule 43 (exp -> exp EQ_MIN exp .)
    OR              reduce using rule 43 (exp -> exp EQ_MIN exp .)
    EQ              reduce using rule 43 (exp -> exp EQ_MIN exp .)
    MIN             reduce using rule 43 (exp -> exp EQ_MIN exp .)
    MAJ             reduce using rule 43 (exp -> exp EQ_MIN exp .)
    MAJ_EQ          reduce using rule 43 (exp -> exp EQ_MIN exp .)
    EQ_MAJ          reduce using rule 43 (exp -> exp EQ_MIN exp .)
    MIN_EQ          reduce using rule 43 (exp -> exp EQ_MIN exp .)
    EQ_MIN          reduce using rule 43 (exp -> exp EQ_MIN exp .)
    RC              reduce using rule 43 (exp -> exp EQ_MIN exp .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! PLUS            [ reduce using rule 43 (exp -> exp EQ_MIN exp .) ]
  ! MINUS           [ reduce using rule 43 (exp -> exp EQ_MIN exp .) ]
  ! STAR            [ reduce using rule 43 (exp -> exp EQ_MIN exp .) ]
  ! DIV             [ reduce using rule 43 (exp -> exp EQ_MIN exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]


state 100

    (44) exp -> exp PLUS exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 44 (exp -> exp PLUS exp .)
    AND             reduce using rule 44 (exp -> exp PLUS exp .)
    OR              reduce using rule 44 (exp -> exp PLUS exp .)
    EQ              reduce using rule 44 (exp -> exp PLUS exp .)
    MIN             reduce using rule 44 (exp -> exp PLUS exp .)
    MAJ             reduce using rule 44 (exp -> exp PLUS exp .)
    MAJ_EQ          reduce using rule 44 (exp -> exp PLUS exp .)
    EQ_MAJ          reduce using rule 44 (exp -> exp PLUS exp .)
    MIN_EQ          reduce using rule 44 (exp -> exp PLUS exp .)
    EQ_MIN          reduce using rule 44 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 44 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 44 (exp -> exp PLUS exp .)
    RC              reduce using rule 44 (exp -> exp PLUS exp .)
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! STAR            [ reduce using rule 44 (exp -> exp PLUS exp .) ]
  ! DIV             [ reduce using rule 44 (exp -> exp PLUS exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]


state 101

    (45) exp -> exp MINUS exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 45 (exp -> exp MINUS exp .)
    AND             reduce using rule 45 (exp -> exp MINUS exp .)
    OR              reduce using rule 45 (exp -> exp MINUS exp .)
    EQ              reduce using rule 45 (exp -> exp MINUS exp .)
    MIN             reduce using rule 45 (exp -> exp MINUS exp .)
    MAJ             reduce using rule 45 (exp -> exp MINUS exp .)
    MAJ_EQ          reduce using rule 45 (exp -> exp MINUS exp .)
    EQ_MAJ          reduce using rule 45 (exp -> exp MINUS exp .)
    MIN_EQ          reduce using rule 45 (exp -> exp MINUS exp .)
    EQ_MIN          reduce using rule 45 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 45 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 45 (exp -> exp MINUS exp .)
    RC              reduce using rule 45 (exp -> exp MINUS exp .)
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! STAR            [ reduce using rule 45 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 45 (exp -> exp MINUS exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]


state 102

    (46) exp -> exp STAR exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 46 (exp -> exp STAR exp .)
    AND             reduce using rule 46 (exp -> exp STAR exp .)
    OR              reduce using rule 46 (exp -> exp STAR exp .)
    EQ              reduce using rule 46 (exp -> exp STAR exp .)
    MIN             reduce using rule 46 (exp -> exp STAR exp .)
    MAJ             reduce using rule 46 (exp -> exp STAR exp .)
    MAJ_EQ          reduce using rule 46 (exp -> exp STAR exp .)
    EQ_MAJ          reduce using rule 46 (exp -> exp STAR exp .)
    MIN_EQ          reduce using rule 46 (exp -> exp STAR exp .)
    EQ_MIN          reduce using rule 46 (exp -> exp STAR exp .)
    PLUS            reduce using rule 46 (exp -> exp STAR exp .)
    MINUS           reduce using rule 46 (exp -> exp STAR exp .)
    STAR            reduce using rule 46 (exp -> exp STAR exp .)
    DIV             reduce using rule 46 (exp -> exp STAR exp .)
    RC              reduce using rule 46 (exp -> exp STAR exp .)

  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! STAR            [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]


state 103

    (47) exp -> exp DIV exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 47 (exp -> exp DIV exp .)
    AND             reduce using rule 47 (exp -> exp DIV exp .)
    OR              reduce using rule 47 (exp -> exp DIV exp .)
    EQ              reduce using rule 47 (exp -> exp DIV exp .)
    MIN             reduce using rule 47 (exp -> exp DIV exp .)
    MAJ             reduce using rule 47 (exp -> exp DIV exp .)
    MAJ_EQ          reduce using rule 47 (exp -> exp DIV exp .)
    EQ_MAJ          reduce using rule 47 (exp -> exp DIV exp .)
    MIN_EQ          reduce using rule 47 (exp -> exp DIV exp .)
    EQ_MIN          reduce using rule 47 (exp -> exp DIV exp .)
    PLUS            reduce using rule 47 (exp -> exp DIV exp .)
    MINUS           reduce using rule 47 (exp -> exp DIV exp .)
    STAR            reduce using rule 47 (exp -> exp DIV exp .)
    DIV             reduce using rule 47 (exp -> exp DIV exp .)
    RC              reduce using rule 47 (exp -> exp DIV exp .)

  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]
  ! PLUS            [ shift and go to state 73 ]
  ! MINUS           [ shift and go to state 74 ]
  ! STAR            [ shift and go to state 75 ]
  ! DIV             [ shift and go to state 76 ]


state 104

    (48) exp -> RO exp RC .

    S               reduce using rule 48 (exp -> RO exp RC .)
    AND             reduce using rule 48 (exp -> RO exp RC .)
    OR              reduce using rule 48 (exp -> RO exp RC .)
    EQ              reduce using rule 48 (exp -> RO exp RC .)
    MIN             reduce using rule 48 (exp -> RO exp RC .)
    MAJ             reduce using rule 48 (exp -> RO exp RC .)
    MAJ_EQ          reduce using rule 48 (exp -> RO exp RC .)
    EQ_MAJ          reduce using rule 48 (exp -> RO exp RC .)
    MIN_EQ          reduce using rule 48 (exp -> RO exp RC .)
    EQ_MIN          reduce using rule 48 (exp -> RO exp RC .)
    PLUS            reduce using rule 48 (exp -> RO exp RC .)
    MINUS           reduce using rule 48 (exp -> RO exp RC .)
    STAR            reduce using rule 48 (exp -> RO exp RC .)
    DIV             reduce using rule 48 (exp -> RO exp RC .)
    RC              reduce using rule 48 (exp -> RO exp RC .)


state 105

    (12) array -> array SO INT . SC

    SC              shift and go to state 108


state 106

    (30) if -> IF if_condition stmt ELSE stmt .

    BO              reduce using rule 30 (if -> IF if_condition stmt ELSE stmt .)
    error           reduce using rule 30 (if -> IF if_condition stmt ELSE stmt .)
    IF              reduce using rule 30 (if -> IF if_condition stmt ELSE stmt .)
    WHILE           reduce using rule 30 (if -> IF if_condition stmt ELSE stmt .)
    PRINT           reduce using rule 30 (if -> IF if_condition stmt ELSE stmt .)
    ID              reduce using rule 30 (if -> IF if_condition stmt ELSE stmt .)
    $end            reduce using rule 30 (if -> IF if_condition stmt ELSE stmt .)
    BC              reduce using rule 30 (if -> IF if_condition stmt ELSE stmt .)
    ELSE            reduce using rule 30 (if -> IF if_condition stmt ELSE stmt .)


state 107

    (37) exp -> exp EQ EQ exp .
    (34) exp -> exp . AND exp
    (35) exp -> exp . OR exp
    (37) exp -> exp . EQ EQ exp
    (38) exp -> exp . MIN exp
    (39) exp -> exp . MAJ exp
    (40) exp -> exp . MAJ_EQ exp
    (41) exp -> exp . EQ_MAJ exp
    (42) exp -> exp . MIN_EQ exp
    (43) exp -> exp . EQ_MIN exp
    (44) exp -> exp . PLUS exp
    (45) exp -> exp . MINUS exp
    (46) exp -> exp . STAR exp
    (47) exp -> exp . DIV exp

    S               reduce using rule 37 (exp -> exp EQ EQ exp .)
    AND             reduce using rule 37 (exp -> exp EQ EQ exp .)
    OR              reduce using rule 37 (exp -> exp EQ EQ exp .)
    EQ              reduce using rule 37 (exp -> exp EQ EQ exp .)
    MIN             reduce using rule 37 (exp -> exp EQ EQ exp .)
    MAJ             reduce using rule 37 (exp -> exp EQ EQ exp .)
    MAJ_EQ          reduce using rule 37 (exp -> exp EQ EQ exp .)
    EQ_MAJ          reduce using rule 37 (exp -> exp EQ EQ exp .)
    MIN_EQ          reduce using rule 37 (exp -> exp EQ EQ exp .)
    EQ_MIN          reduce using rule 37 (exp -> exp EQ EQ exp .)
    RC              reduce using rule 37 (exp -> exp EQ EQ exp .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    STAR            shift and go to state 75
    DIV             shift and go to state 76

  ! PLUS            [ reduce using rule 37 (exp -> exp EQ EQ exp .) ]
  ! MINUS           [ reduce using rule 37 (exp -> exp EQ EQ exp .) ]
  ! STAR            [ reduce using rule 37 (exp -> exp EQ EQ exp .) ]
  ! DIV             [ reduce using rule 37 (exp -> exp EQ EQ exp .) ]
  ! AND             [ shift and go to state 65 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 63 ]
  ! MIN             [ shift and go to state 67 ]
  ! MAJ             [ shift and go to state 68 ]
  ! MAJ_EQ          [ shift and go to state 69 ]
  ! EQ_MAJ          [ shift and go to state 70 ]
  ! MIN_EQ          [ shift and go to state 71 ]
  ! EQ_MIN          [ shift and go to state 72 ]


state 108

    (12) array -> array SO INT SC .

    SO              reduce using rule 12 (array -> array SO INT SC .)
    S               reduce using rule 12 (array -> array SO INT SC .)
    CM              reduce using rule 12 (array -> array SO INT SC .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EMPTY
    comm
    nl
    ws

Grammar

Rule 0     S' -> prog
Rule 1     prog -> decl_list stmt_list
Rule 2     decl_list -> decl_list decl
Rule 3     decl_list -> <empty>
Rule 4     decl -> type var_list S
Rule 5     decl -> type error S
Rule 6     type -> INT_TYPE
Rule 7     type -> DOUBLE_TYPE
Rule 8     m_copy -> empty
Rule 9     var_list -> var
Rule 10    var_list -> var_list CM m_copy var
Rule 11    var -> ID array
Rule 12    array -> empty
Rule 13    array -> array SO INT SC
Rule 14    stmt_list -> stmt_list stmt
Rule 15    stmt_list -> stmt
Rule 16    stmt_list -> error stmt
Rule 17    stmt -> if
Rule 18    stmt -> while
Rule 19    stmt -> assignment
Rule 20    stmt -> print
Rule 21    stmt -> BO stmt_list BC
Rule 22    assignment -> id S
Rule 23    assignment -> id EQ exp S
Rule 24    stmt -> BO stmt_list error BC
Rule 25    stmt -> BO error BC
Rule 26    stmt -> error S
Rule 27    assignment -> id EQ error S
Rule 28    assignment -> error EQ exp S
Rule 29    print -> PRINT id S
Rule 30    print -> PRINT error S
Rule 31    if -> IF if_condition nt0_if stmt ELSE nt1_if stmt
Rule 32    if -> IF if_condition nt0_if stmt
Rule 33    if -> IF if_condition nt0_if stmt error nt1_if stmt
Rule 34    if_condition -> RO exp RC
Rule 35    if_condition -> RO error RC
Rule 36    if_condition -> error exp RC
Rule 37    if_condition -> RO exp error
Rule 38    nt0_if -> empty
Rule 39    nt1_if -> empty
Rule 40    while -> WHILE while_condition nt0_while stmt
Rule 41    while_condition -> RO exp RC
Rule 42    while_condition -> RO error RC
Rule 43    while_condition -> error exp RC
Rule 44    while_condition -> RO exp error
Rule 45    nt0_while -> empty
Rule 46    exp -> exp AND exp
Rule 47    exp -> exp OR exp
Rule 48    exp -> NOT exp
Rule 49    exp -> exp EQ EQ exp
Rule 50    exp -> exp MIN exp
Rule 51    exp -> exp MAJ exp
Rule 52    exp -> exp MAJ_EQ exp
Rule 53    exp -> exp EQ_MAJ exp
Rule 54    exp -> exp MIN_EQ exp
Rule 55    exp -> exp EQ_MIN exp
Rule 56    exp -> exp PLUS exp
Rule 57    exp -> exp MINUS exp
Rule 58    exp -> exp STAR exp
Rule 59    exp -> exp DIV exp
Rule 60    exp -> RO exp RC
Rule 61    exp -> id
Rule 62    exp -> INT
Rule 63    exp -> DOUBLE
Rule 64    exp -> MINUS INT
Rule 65    exp -> MINUS DOUBLE
Rule 66    exp -> RO error RC
Rule 67    id -> ID
Rule 68    id -> ID SO INT SC
Rule 69    id -> ID SO ID SC
Rule 70    empty -> <empty>

Terminals, with rules where they appear

AND                  : 46
BC                   : 21 24 25
BO                   : 21 24 25
CM                   : 10
DIV                  : 59
DOUBLE               : 63 65
DOUBLE_TYPE          : 7
ELSE                 : 31
EMPTY                : 
EQ                   : 23 27 28 49 49
EQ_MAJ               : 53
EQ_MIN               : 55
ID                   : 11 67 68 69 69
IF                   : 31 32 33
INT                  : 13 62 64 68
INT_TYPE             : 6
MAJ                  : 51
MAJ_EQ               : 52
MIN                  : 50
MINUS                : 57 64 65
MIN_EQ               : 54
NOT                  : 48
OR                   : 47
PLUS                 : 56
PRINT                : 29 30
RC                   : 34 35 36 41 42 43 60 66
RO                   : 34 35 37 41 42 44 60 66
S                    : 4 5 22 23 26 27 28 29 30
SC                   : 13 68 69
SO                   : 13 68 69
STAR                 : 58
WHILE                : 40
comm                 : 
error                : 5 16 24 25 26 27 28 30 33 35 36 37 42 43 44 66
nl                   : 
ws                   : 

Nonterminals, with rules where they appear

array                : 11 13
assignment           : 19
decl                 : 2
decl_list            : 1 2
empty                : 8 12 38 39 45
exp                  : 23 28 34 36 37 41 43 44 46 46 47 47 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60
id                   : 22 23 27 29 61
if                   : 17
if_condition         : 31 32 33
m_copy               : 10
nt0_if               : 31 32 33
nt0_while            : 40
nt1_if               : 31 33
print                : 20
prog                 : 0
stmt                 : 14 15 16 31 31 32 33 33 40
stmt_list            : 1 14 21 24
type                 : 4 5
var                  : 9 10
var_list             : 4 10
while                : 18
while_condition      : 40

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . decl_list stmt_list
    (2) decl_list -> . decl_list decl
    (3) decl_list -> .

    error           reduce using rule 3 (decl_list -> .)
    BO              reduce using rule 3 (decl_list -> .)
    INT_TYPE        reduce using rule 3 (decl_list -> .)
    DOUBLE_TYPE     reduce using rule 3 (decl_list -> .)
    IF              reduce using rule 3 (decl_list -> .)
    WHILE           reduce using rule 3 (decl_list -> .)
    PRINT           reduce using rule 3 (decl_list -> .)
    ID              reduce using rule 3 (decl_list -> .)

    prog                           shift and go to state 1
    decl_list                      shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> decl_list . stmt_list
    (2) decl_list -> decl_list . decl
    (14) stmt_list -> . stmt_list stmt
    (15) stmt_list -> . stmt
    (16) stmt_list -> . error stmt
    (4) decl -> . type var_list S
    (5) decl -> . type error S
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (24) stmt -> . BO stmt_list error BC
    (25) stmt -> . BO error BC
    (26) stmt -> . error S
    (6) type -> . INT_TYPE
    (7) type -> . DOUBLE_TYPE
    (31) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> . IF if_condition nt0_if stmt
    (33) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (40) while -> . WHILE while_condition nt0_while stmt
    (22) assignment -> . id S
    (23) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) print -> . PRINT id S
    (30) print -> . PRINT error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    error           shift and go to state 6
    BO              shift and go to state 12
    INT_TYPE        shift and go to state 13
    DOUBLE_TYPE     shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt_list                      shift and go to state 3
    decl                           shift and go to state 4
    stmt                           shift and go to state 5
    type                           shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 3

    (1) prog -> decl_list stmt_list .
    (14) stmt_list -> stmt_list . stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (24) stmt -> . BO stmt_list error BC
    (25) stmt -> . BO error BC
    (26) stmt -> . error S
    (31) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> . IF if_condition nt0_if stmt
    (33) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (40) while -> . WHILE while_condition nt0_while stmt
    (22) assignment -> . id S
    (23) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) print -> . PRINT id S
    (30) print -> . PRINT error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    $end            reduce using rule 1 (prog -> decl_list stmt_list .)
    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 20
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 4

    (2) decl_list -> decl_list decl .

    error           reduce using rule 2 (decl_list -> decl_list decl .)
    BO              reduce using rule 2 (decl_list -> decl_list decl .)
    INT_TYPE        reduce using rule 2 (decl_list -> decl_list decl .)
    DOUBLE_TYPE     reduce using rule 2 (decl_list -> decl_list decl .)
    IF              reduce using rule 2 (decl_list -> decl_list decl .)
    WHILE           reduce using rule 2 (decl_list -> decl_list decl .)
    PRINT           reduce using rule 2 (decl_list -> decl_list decl .)
    ID              reduce using rule 2 (decl_list -> decl_list decl .)


state 5

    (15) stmt_list -> stmt .

    BO              reduce using rule 15 (stmt_list -> stmt .)
    error           reduce using rule 15 (stmt_list -> stmt .)
    IF              reduce using rule 15 (stmt_list -> stmt .)
    WHILE           reduce using rule 15 (stmt_list -> stmt .)
    PRINT           reduce using rule 15 (stmt_list -> stmt .)
    ID              reduce using rule 15 (stmt_list -> stmt .)
    $end            reduce using rule 15 (stmt_list -> stmt .)
    BC              reduce using rule 15 (stmt_list -> stmt .)


state 6

    (16) stmt_list -> error . stmt
    (26) stmt -> error . S
    (28) assignment -> error . EQ exp S
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (24) stmt -> . BO stmt_list error BC
    (25) stmt -> . BO error BC
    (26) stmt -> . error S
    (31) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> . IF if_condition nt0_if stmt
    (33) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (40) while -> . WHILE while_condition nt0_while stmt
    (22) assignment -> . id S
    (23) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) print -> . PRINT id S
    (30) print -> . PRINT error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    S               shift and go to state 23
    EQ              shift and go to state 24
    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 22
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 7

    (4) decl -> type . var_list S
    (5) decl -> type . error S
    (9) var_list -> . var
    (10) var_list -> . var_list CM m_copy var
    (11) var -> . ID array

    error           shift and go to state 26
    ID              shift and go to state 28

    var_list                       shift and go to state 25
    var                            shift and go to state 27

state 8

    (17) stmt -> if .

    BO              reduce using rule 17 (stmt -> if .)
    error           reduce using rule 17 (stmt -> if .)
    IF              reduce using rule 17 (stmt -> if .)
    WHILE           reduce using rule 17 (stmt -> if .)
    PRINT           reduce using rule 17 (stmt -> if .)
    ID              reduce using rule 17 (stmt -> if .)
    $end            reduce using rule 17 (stmt -> if .)
    BC              reduce using rule 17 (stmt -> if .)
    ELSE            reduce using rule 17 (stmt -> if .)


state 9

    (18) stmt -> while .

    BO              reduce using rule 18 (stmt -> while .)
    error           reduce using rule 18 (stmt -> while .)
    IF              reduce using rule 18 (stmt -> while .)
    WHILE           reduce using rule 18 (stmt -> while .)
    PRINT           reduce using rule 18 (stmt -> while .)
    ID              reduce using rule 18 (stmt -> while .)
    $end            reduce using rule 18 (stmt -> while .)
    BC              reduce using rule 18 (stmt -> while .)
    ELSE            reduce using rule 18 (stmt -> while .)


state 10

    (19) stmt -> assignment .

    BO              reduce using rule 19 (stmt -> assignment .)
    error           reduce using rule 19 (stmt -> assignment .)
    IF              reduce using rule 19 (stmt -> assignment .)
    WHILE           reduce using rule 19 (stmt -> assignment .)
    PRINT           reduce using rule 19 (stmt -> assignment .)
    ID              reduce using rule 19 (stmt -> assignment .)
    $end            reduce using rule 19 (stmt -> assignment .)
    BC              reduce using rule 19 (stmt -> assignment .)
    ELSE            reduce using rule 19 (stmt -> assignment .)


state 11

    (20) stmt -> print .

    BO              reduce using rule 20 (stmt -> print .)
    error           reduce using rule 20 (stmt -> print .)
    IF              reduce using rule 20 (stmt -> print .)
    WHILE           reduce using rule 20 (stmt -> print .)
    PRINT           reduce using rule 20 (stmt -> print .)
    ID              reduce using rule 20 (stmt -> print .)
    $end            reduce using rule 20 (stmt -> print .)
    BC              reduce using rule 20 (stmt -> print .)
    ELSE            reduce using rule 20 (stmt -> print .)


state 12

    (21) stmt -> BO . stmt_list BC
    (24) stmt -> BO . stmt_list error BC
    (25) stmt -> BO . error BC
    (14) stmt_list -> . stmt_list stmt
    (15) stmt_list -> . stmt
    (16) stmt_list -> . error stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (24) stmt -> . BO stmt_list error BC
    (25) stmt -> . BO error BC
    (26) stmt -> . error S
    (31) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> . IF if_condition nt0_if stmt
    (33) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (40) while -> . WHILE while_condition nt0_while stmt
    (22) assignment -> . id S
    (23) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) print -> . PRINT id S
    (30) print -> . PRINT error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    error           shift and go to state 30
    BO              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt_list                      shift and go to state 29
    stmt                           shift and go to state 5
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 13

    (6) type -> INT_TYPE .

    error           reduce using rule 6 (type -> INT_TYPE .)
    ID              reduce using rule 6 (type -> INT_TYPE .)


state 14

    (7) type -> DOUBLE_TYPE .

    error           reduce using rule 7 (type -> DOUBLE_TYPE .)
    ID              reduce using rule 7 (type -> DOUBLE_TYPE .)


state 15

    (31) if -> IF . if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> IF . if_condition nt0_if stmt
    (33) if -> IF . if_condition nt0_if stmt error nt1_if stmt
    (34) if_condition -> . RO exp RC
    (35) if_condition -> . RO error RC
    (36) if_condition -> . error exp RC
    (37) if_condition -> . RO exp error

    RO              shift and go to state 33
    error           shift and go to state 32

    if_condition                   shift and go to state 31

state 16

    (40) while -> WHILE . while_condition nt0_while stmt
    (41) while_condition -> . RO exp RC
    (42) while_condition -> . RO error RC
    (43) while_condition -> . error exp RC
    (44) while_condition -> . RO exp error

    RO              shift and go to state 35
    error           shift and go to state 36

    while_condition                shift and go to state 34

state 17

    (22) assignment -> id . S
    (23) assignment -> id . EQ exp S
    (27) assignment -> id . EQ error S

    S               shift and go to state 37
    EQ              shift and go to state 38


state 18

    (29) print -> PRINT . id S
    (30) print -> PRINT . error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    error           shift and go to state 40
    ID              shift and go to state 19

    id                             shift and go to state 39

state 19

    (67) id -> ID .
    (68) id -> ID . SO INT SC
    (69) id -> ID . SO ID SC

    S               reduce using rule 67 (id -> ID .)
    EQ              reduce using rule 67 (id -> ID .)
    AND             reduce using rule 67 (id -> ID .)
    OR              reduce using rule 67 (id -> ID .)
    MIN             reduce using rule 67 (id -> ID .)
    MAJ             reduce using rule 67 (id -> ID .)
    MAJ_EQ          reduce using rule 67 (id -> ID .)
    EQ_MAJ          reduce using rule 67 (id -> ID .)
    MIN_EQ          reduce using rule 67 (id -> ID .)
    EQ_MIN          reduce using rule 67 (id -> ID .)
    PLUS            reduce using rule 67 (id -> ID .)
    MINUS           reduce using rule 67 (id -> ID .)
    STAR            reduce using rule 67 (id -> ID .)
    DIV             reduce using rule 67 (id -> ID .)
    RC              reduce using rule 67 (id -> ID .)
    error           reduce using rule 67 (id -> ID .)
    SO              shift and go to state 41


state 20

    (14) stmt_list -> stmt_list stmt .

    BO              reduce using rule 14 (stmt_list -> stmt_list stmt .)
    error           reduce using rule 14 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 14 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 14 (stmt_list -> stmt_list stmt .)
    PRINT           reduce using rule 14 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 14 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 14 (stmt_list -> stmt_list stmt .)
    BC              reduce using rule 14 (stmt_list -> stmt_list stmt .)


state 21

    (26) stmt -> error . S
    (28) assignment -> error . EQ exp S

    S               shift and go to state 23
    EQ              shift and go to state 24


state 22

    (16) stmt_list -> error stmt .

    BO              reduce using rule 16 (stmt_list -> error stmt .)
    error           reduce using rule 16 (stmt_list -> error stmt .)
    IF              reduce using rule 16 (stmt_list -> error stmt .)
    WHILE           reduce using rule 16 (stmt_list -> error stmt .)
    PRINT           reduce using rule 16 (stmt_list -> error stmt .)
    ID              reduce using rule 16 (stmt_list -> error stmt .)
    $end            reduce using rule 16 (stmt_list -> error stmt .)
    BC              reduce using rule 16 (stmt_list -> error stmt .)


state 23

    (26) stmt -> error S .

    BO              reduce using rule 26 (stmt -> error S .)
    error           reduce using rule 26 (stmt -> error S .)
    IF              reduce using rule 26 (stmt -> error S .)
    WHILE           reduce using rule 26 (stmt -> error S .)
    PRINT           reduce using rule 26 (stmt -> error S .)
    ID              reduce using rule 26 (stmt -> error S .)
    $end            reduce using rule 26 (stmt -> error S .)
    BC              reduce using rule 26 (stmt -> error S .)
    ELSE            reduce using rule 26 (stmt -> error S .)


state 24

    (28) assignment -> error EQ . exp S
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 42
    id                             shift and go to state 46

state 25

    (4) decl -> type var_list . S
    (10) var_list -> var_list . CM m_copy var

    S               shift and go to state 49
    CM              shift and go to state 50


state 26

    (5) decl -> type error . S

    S               shift and go to state 51


state 27

    (9) var_list -> var .

    S               reduce using rule 9 (var_list -> var .)
    CM              reduce using rule 9 (var_list -> var .)


state 28

    (11) var -> ID . array
    (12) array -> . empty
    (13) array -> . array SO INT SC
    (70) empty -> .

    SO              reduce using rule 70 (empty -> .)
    S               reduce using rule 70 (empty -> .)
    CM              reduce using rule 70 (empty -> .)

    array                          shift and go to state 52
    empty                          shift and go to state 53

state 29

    (21) stmt -> BO stmt_list . BC
    (24) stmt -> BO stmt_list . error BC
    (14) stmt_list -> stmt_list . stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (24) stmt -> . BO stmt_list error BC
    (25) stmt -> . BO error BC
    (26) stmt -> . error S
    (31) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> . IF if_condition nt0_if stmt
    (33) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (40) while -> . WHILE while_condition nt0_while stmt
    (22) assignment -> . id S
    (23) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) print -> . PRINT id S
    (30) print -> . PRINT error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    BC              shift and go to state 54
    error           shift and go to state 55
    BO              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 20
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 30

    (25) stmt -> BO error . BC
    (16) stmt_list -> error . stmt
    (26) stmt -> error . S
    (28) assignment -> error . EQ exp S
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (24) stmt -> . BO stmt_list error BC
    (25) stmt -> . BO error BC
    (26) stmt -> . error S
    (31) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> . IF if_condition nt0_if stmt
    (33) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (40) while -> . WHILE while_condition nt0_while stmt
    (22) assignment -> . id S
    (23) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) print -> . PRINT id S
    (30) print -> . PRINT error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    BC              shift and go to state 56
    S               shift and go to state 23
    EQ              shift and go to state 24
    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 22
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 31

    (31) if -> IF if_condition . nt0_if stmt ELSE nt1_if stmt
    (32) if -> IF if_condition . nt0_if stmt
    (33) if -> IF if_condition . nt0_if stmt error nt1_if stmt
    (38) nt0_if -> . empty
    (70) empty -> .

    BO              reduce using rule 70 (empty -> .)
    error           reduce using rule 70 (empty -> .)
    IF              reduce using rule 70 (empty -> .)
    WHILE           reduce using rule 70 (empty -> .)
    PRINT           reduce using rule 70 (empty -> .)
    ID              reduce using rule 70 (empty -> .)

    nt0_if                         shift and go to state 57
    empty                          shift and go to state 58

state 32

    (36) if_condition -> error . exp RC
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 59
    id                             shift and go to state 46

state 33

    (34) if_condition -> RO . exp RC
    (35) if_condition -> RO . error RC
    (37) if_condition -> RO . exp error
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    error           shift and go to state 61
    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 60
    id                             shift and go to state 46

state 34

    (40) while -> WHILE while_condition . nt0_while stmt
    (45) nt0_while -> . empty
    (70) empty -> .

    BO              reduce using rule 70 (empty -> .)
    error           reduce using rule 70 (empty -> .)
    IF              reduce using rule 70 (empty -> .)
    WHILE           reduce using rule 70 (empty -> .)
    PRINT           reduce using rule 70 (empty -> .)
    ID              reduce using rule 70 (empty -> .)

    nt0_while                      shift and go to state 62
    empty                          shift and go to state 63

state 35

    (41) while_condition -> RO . exp RC
    (42) while_condition -> RO . error RC
    (44) while_condition -> RO . exp error
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    error           shift and go to state 65
    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 64
    id                             shift and go to state 46

state 36

    (43) while_condition -> error . exp RC
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 66
    id                             shift and go to state 46

state 37

    (22) assignment -> id S .

    BO              reduce using rule 22 (assignment -> id S .)
    error           reduce using rule 22 (assignment -> id S .)
    IF              reduce using rule 22 (assignment -> id S .)
    WHILE           reduce using rule 22 (assignment -> id S .)
    PRINT           reduce using rule 22 (assignment -> id S .)
    ID              reduce using rule 22 (assignment -> id S .)
    $end            reduce using rule 22 (assignment -> id S .)
    BC              reduce using rule 22 (assignment -> id S .)
    ELSE            reduce using rule 22 (assignment -> id S .)


state 38

    (23) assignment -> id EQ . exp S
    (27) assignment -> id EQ . error S
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    error           shift and go to state 68
    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    id                             shift and go to state 46
    exp                            shift and go to state 67

state 39

    (29) print -> PRINT id . S

    S               shift and go to state 69


state 40

    (30) print -> PRINT error . S

    S               shift and go to state 70


state 41

    (68) id -> ID SO . INT SC
    (69) id -> ID SO . ID SC

    INT             shift and go to state 72
    ID              shift and go to state 71


state 42

    (28) assignment -> error EQ exp . S
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              shift and go to state 73
    MIN             shift and go to state 77
    MAJ             shift and go to state 78
    MAJ_EQ          shift and go to state 79
    EQ_MAJ          shift and go to state 80
    MIN_EQ          shift and go to state 81
    EQ_MIN          shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86


state 43

    (48) exp -> NOT . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 87
    id                             shift and go to state 46

state 44

    (64) exp -> MINUS . INT
    (65) exp -> MINUS . DOUBLE

    INT             shift and go to state 88
    DOUBLE          shift and go to state 89


state 45

    (60) exp -> RO . exp RC
    (66) exp -> RO . error RC
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    error           shift and go to state 91
    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 90
    id                             shift and go to state 46

state 46

    (61) exp -> id .

    S               reduce using rule 61 (exp -> id .)
    AND             reduce using rule 61 (exp -> id .)
    OR              reduce using rule 61 (exp -> id .)
    EQ              reduce using rule 61 (exp -> id .)
    MIN             reduce using rule 61 (exp -> id .)
    MAJ             reduce using rule 61 (exp -> id .)
    MAJ_EQ          reduce using rule 61 (exp -> id .)
    EQ_MAJ          reduce using rule 61 (exp -> id .)
    MIN_EQ          reduce using rule 61 (exp -> id .)
    EQ_MIN          reduce using rule 61 (exp -> id .)
    PLUS            reduce using rule 61 (exp -> id .)
    MINUS           reduce using rule 61 (exp -> id .)
    STAR            reduce using rule 61 (exp -> id .)
    DIV             reduce using rule 61 (exp -> id .)
    RC              reduce using rule 61 (exp -> id .)
    error           reduce using rule 61 (exp -> id .)


state 47

    (62) exp -> INT .

    S               reduce using rule 62 (exp -> INT .)
    AND             reduce using rule 62 (exp -> INT .)
    OR              reduce using rule 62 (exp -> INT .)
    EQ              reduce using rule 62 (exp -> INT .)
    MIN             reduce using rule 62 (exp -> INT .)
    MAJ             reduce using rule 62 (exp -> INT .)
    MAJ_EQ          reduce using rule 62 (exp -> INT .)
    EQ_MAJ          reduce using rule 62 (exp -> INT .)
    MIN_EQ          reduce using rule 62 (exp -> INT .)
    EQ_MIN          reduce using rule 62 (exp -> INT .)
    PLUS            reduce using rule 62 (exp -> INT .)
    MINUS           reduce using rule 62 (exp -> INT .)
    STAR            reduce using rule 62 (exp -> INT .)
    DIV             reduce using rule 62 (exp -> INT .)
    RC              reduce using rule 62 (exp -> INT .)
    error           reduce using rule 62 (exp -> INT .)


state 48

    (63) exp -> DOUBLE .

    S               reduce using rule 63 (exp -> DOUBLE .)
    AND             reduce using rule 63 (exp -> DOUBLE .)
    OR              reduce using rule 63 (exp -> DOUBLE .)
    EQ              reduce using rule 63 (exp -> DOUBLE .)
    MIN             reduce using rule 63 (exp -> DOUBLE .)
    MAJ             reduce using rule 63 (exp -> DOUBLE .)
    MAJ_EQ          reduce using rule 63 (exp -> DOUBLE .)
    EQ_MAJ          reduce using rule 63 (exp -> DOUBLE .)
    MIN_EQ          reduce using rule 63 (exp -> DOUBLE .)
    EQ_MIN          reduce using rule 63 (exp -> DOUBLE .)
    PLUS            reduce using rule 63 (exp -> DOUBLE .)
    MINUS           reduce using rule 63 (exp -> DOUBLE .)
    STAR            reduce using rule 63 (exp -> DOUBLE .)
    DIV             reduce using rule 63 (exp -> DOUBLE .)
    RC              reduce using rule 63 (exp -> DOUBLE .)
    error           reduce using rule 63 (exp -> DOUBLE .)


state 49

    (4) decl -> type var_list S .

    error           reduce using rule 4 (decl -> type var_list S .)
    BO              reduce using rule 4 (decl -> type var_list S .)
    INT_TYPE        reduce using rule 4 (decl -> type var_list S .)
    DOUBLE_TYPE     reduce using rule 4 (decl -> type var_list S .)
    IF              reduce using rule 4 (decl -> type var_list S .)
    WHILE           reduce using rule 4 (decl -> type var_list S .)
    PRINT           reduce using rule 4 (decl -> type var_list S .)
    ID              reduce using rule 4 (decl -> type var_list S .)


state 50

    (10) var_list -> var_list CM . m_copy var
    (8) m_copy -> . empty
    (70) empty -> .

    ID              reduce using rule 70 (empty -> .)

    m_copy                         shift and go to state 92
    empty                          shift and go to state 93

state 51

    (5) decl -> type error S .

    error           reduce using rule 5 (decl -> type error S .)
    BO              reduce using rule 5 (decl -> type error S .)
    INT_TYPE        reduce using rule 5 (decl -> type error S .)
    DOUBLE_TYPE     reduce using rule 5 (decl -> type error S .)
    IF              reduce using rule 5 (decl -> type error S .)
    WHILE           reduce using rule 5 (decl -> type error S .)
    PRINT           reduce using rule 5 (decl -> type error S .)
    ID              reduce using rule 5 (decl -> type error S .)


state 52

    (11) var -> ID array .
    (13) array -> array . SO INT SC

    S               reduce using rule 11 (var -> ID array .)
    CM              reduce using rule 11 (var -> ID array .)
    SO              shift and go to state 94


state 53

    (12) array -> empty .

    SO              reduce using rule 12 (array -> empty .)
    S               reduce using rule 12 (array -> empty .)
    CM              reduce using rule 12 (array -> empty .)


state 54

    (21) stmt -> BO stmt_list BC .

    BO              reduce using rule 21 (stmt -> BO stmt_list BC .)
    error           reduce using rule 21 (stmt -> BO stmt_list BC .)
    IF              reduce using rule 21 (stmt -> BO stmt_list BC .)
    WHILE           reduce using rule 21 (stmt -> BO stmt_list BC .)
    PRINT           reduce using rule 21 (stmt -> BO stmt_list BC .)
    ID              reduce using rule 21 (stmt -> BO stmt_list BC .)
    $end            reduce using rule 21 (stmt -> BO stmt_list BC .)
    BC              reduce using rule 21 (stmt -> BO stmt_list BC .)
    ELSE            reduce using rule 21 (stmt -> BO stmt_list BC .)


state 55

    (24) stmt -> BO stmt_list error . BC
    (26) stmt -> error . S
    (28) assignment -> error . EQ exp S

    BC              shift and go to state 95
    S               shift and go to state 23
    EQ              shift and go to state 24


state 56

    (25) stmt -> BO error BC .

    BO              reduce using rule 25 (stmt -> BO error BC .)
    error           reduce using rule 25 (stmt -> BO error BC .)
    IF              reduce using rule 25 (stmt -> BO error BC .)
    WHILE           reduce using rule 25 (stmt -> BO error BC .)
    PRINT           reduce using rule 25 (stmt -> BO error BC .)
    ID              reduce using rule 25 (stmt -> BO error BC .)
    $end            reduce using rule 25 (stmt -> BO error BC .)
    BC              reduce using rule 25 (stmt -> BO error BC .)
    ELSE            reduce using rule 25 (stmt -> BO error BC .)


state 57

    (31) if -> IF if_condition nt0_if . stmt ELSE nt1_if stmt
    (32) if -> IF if_condition nt0_if . stmt
    (33) if -> IF if_condition nt0_if . stmt error nt1_if stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (24) stmt -> . BO stmt_list error BC
    (25) stmt -> . BO error BC
    (26) stmt -> . error S
    (31) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> . IF if_condition nt0_if stmt
    (33) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (40) while -> . WHILE while_condition nt0_while stmt
    (22) assignment -> . id S
    (23) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) print -> . PRINT id S
    (30) print -> . PRINT error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 96
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 58

    (38) nt0_if -> empty .

    BO              reduce using rule 38 (nt0_if -> empty .)
    error           reduce using rule 38 (nt0_if -> empty .)
    IF              reduce using rule 38 (nt0_if -> empty .)
    WHILE           reduce using rule 38 (nt0_if -> empty .)
    PRINT           reduce using rule 38 (nt0_if -> empty .)
    ID              reduce using rule 38 (nt0_if -> empty .)


state 59

    (36) if_condition -> error exp . RC
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    RC              shift and go to state 97
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              shift and go to state 73
    MIN             shift and go to state 77
    MAJ             shift and go to state 78
    MAJ_EQ          shift and go to state 79
    EQ_MAJ          shift and go to state 80
    MIN_EQ          shift and go to state 81
    EQ_MIN          shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86


state 60

    (34) if_condition -> RO exp . RC
    (37) if_condition -> RO exp . error
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    RC              shift and go to state 98
    error           shift and go to state 99
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              shift and go to state 73
    MIN             shift and go to state 77
    MAJ             shift and go to state 78
    MAJ_EQ          shift and go to state 79
    EQ_MAJ          shift and go to state 80
    MIN_EQ          shift and go to state 81
    EQ_MIN          shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86


state 61

    (35) if_condition -> RO error . RC

    RC              shift and go to state 100


state 62

    (40) while -> WHILE while_condition nt0_while . stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (24) stmt -> . BO stmt_list error BC
    (25) stmt -> . BO error BC
    (26) stmt -> . error S
    (31) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> . IF if_condition nt0_if stmt
    (33) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (40) while -> . WHILE while_condition nt0_while stmt
    (22) assignment -> . id S
    (23) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) print -> . PRINT id S
    (30) print -> . PRINT error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 101
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 63

    (45) nt0_while -> empty .

    BO              reduce using rule 45 (nt0_while -> empty .)
    error           reduce using rule 45 (nt0_while -> empty .)
    IF              reduce using rule 45 (nt0_while -> empty .)
    WHILE           reduce using rule 45 (nt0_while -> empty .)
    PRINT           reduce using rule 45 (nt0_while -> empty .)
    ID              reduce using rule 45 (nt0_while -> empty .)


state 64

    (41) while_condition -> RO exp . RC
    (44) while_condition -> RO exp . error
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    RC              shift and go to state 102
    error           shift and go to state 103
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              shift and go to state 73
    MIN             shift and go to state 77
    MAJ             shift and go to state 78
    MAJ_EQ          shift and go to state 79
    EQ_MAJ          shift and go to state 80
    MIN_EQ          shift and go to state 81
    EQ_MIN          shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86


state 65

    (42) while_condition -> RO error . RC

    RC              shift and go to state 104


state 66

    (43) while_condition -> error exp . RC
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    RC              shift and go to state 105
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              shift and go to state 73
    MIN             shift and go to state 77
    MAJ             shift and go to state 78
    MAJ_EQ          shift and go to state 79
    EQ_MAJ          shift and go to state 80
    MIN_EQ          shift and go to state 81
    EQ_MIN          shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86


state 67

    (23) assignment -> id EQ exp . S
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               shift and go to state 106
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              shift and go to state 73
    MIN             shift and go to state 77
    MAJ             shift and go to state 78
    MAJ_EQ          shift and go to state 79
    EQ_MAJ          shift and go to state 80
    MIN_EQ          shift and go to state 81
    EQ_MIN          shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86


state 68

    (27) assignment -> id EQ error . S

    S               shift and go to state 107


state 69

    (29) print -> PRINT id S .

    BO              reduce using rule 29 (print -> PRINT id S .)
    error           reduce using rule 29 (print -> PRINT id S .)
    IF              reduce using rule 29 (print -> PRINT id S .)
    WHILE           reduce using rule 29 (print -> PRINT id S .)
    PRINT           reduce using rule 29 (print -> PRINT id S .)
    ID              reduce using rule 29 (print -> PRINT id S .)
    $end            reduce using rule 29 (print -> PRINT id S .)
    BC              reduce using rule 29 (print -> PRINT id S .)
    ELSE            reduce using rule 29 (print -> PRINT id S .)


state 70

    (30) print -> PRINT error S .

    BO              reduce using rule 30 (print -> PRINT error S .)
    error           reduce using rule 30 (print -> PRINT error S .)
    IF              reduce using rule 30 (print -> PRINT error S .)
    WHILE           reduce using rule 30 (print -> PRINT error S .)
    PRINT           reduce using rule 30 (print -> PRINT error S .)
    ID              reduce using rule 30 (print -> PRINT error S .)
    $end            reduce using rule 30 (print -> PRINT error S .)
    BC              reduce using rule 30 (print -> PRINT error S .)
    ELSE            reduce using rule 30 (print -> PRINT error S .)


state 71

    (69) id -> ID SO ID . SC

    SC              shift and go to state 108


state 72

    (68) id -> ID SO INT . SC

    SC              shift and go to state 109


state 73

    (49) exp -> exp EQ . EQ exp

    EQ              shift and go to state 110


state 74

    (28) assignment -> error EQ exp S .

    BO              reduce using rule 28 (assignment -> error EQ exp S .)
    error           reduce using rule 28 (assignment -> error EQ exp S .)
    IF              reduce using rule 28 (assignment -> error EQ exp S .)
    WHILE           reduce using rule 28 (assignment -> error EQ exp S .)
    PRINT           reduce using rule 28 (assignment -> error EQ exp S .)
    ID              reduce using rule 28 (assignment -> error EQ exp S .)
    $end            reduce using rule 28 (assignment -> error EQ exp S .)
    BC              reduce using rule 28 (assignment -> error EQ exp S .)
    ELSE            reduce using rule 28 (assignment -> error EQ exp S .)


state 75

    (46) exp -> exp AND . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 111
    id                             shift and go to state 46

state 76

    (47) exp -> exp OR . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 112
    id                             shift and go to state 46

state 77

    (50) exp -> exp MIN . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 113
    id                             shift and go to state 46

state 78

    (51) exp -> exp MAJ . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 114
    id                             shift and go to state 46

state 79

    (52) exp -> exp MAJ_EQ . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 115
    id                             shift and go to state 46

state 80

    (53) exp -> exp EQ_MAJ . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 116
    id                             shift and go to state 46

state 81

    (54) exp -> exp MIN_EQ . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 117
    id                             shift and go to state 46

state 82

    (55) exp -> exp EQ_MIN . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 118
    id                             shift and go to state 46

state 83

    (56) exp -> exp PLUS . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 119
    id                             shift and go to state 46

state 84

    (57) exp -> exp MINUS . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 120
    id                             shift and go to state 46

state 85

    (58) exp -> exp STAR . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 121
    id                             shift and go to state 46

state 86

    (59) exp -> exp DIV . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 122
    id                             shift and go to state 46

state 87

    (48) exp -> NOT exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 48 (exp -> NOT exp .)
    AND             reduce using rule 48 (exp -> NOT exp .)
    OR              reduce using rule 48 (exp -> NOT exp .)
    RC              reduce using rule 48 (exp -> NOT exp .)
    error           reduce using rule 48 (exp -> NOT exp .)
    EQ              shift and go to state 73
    MIN             shift and go to state 77
    MAJ             shift and go to state 78
    MAJ_EQ          shift and go to state 79
    EQ_MAJ          shift and go to state 80
    MIN_EQ          shift and go to state 81
    EQ_MIN          shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! EQ              [ reduce using rule 48 (exp -> NOT exp .) ]
  ! MIN             [ reduce using rule 48 (exp -> NOT exp .) ]
  ! MAJ             [ reduce using rule 48 (exp -> NOT exp .) ]
  ! MAJ_EQ          [ reduce using rule 48 (exp -> NOT exp .) ]
  ! EQ_MAJ          [ reduce using rule 48 (exp -> NOT exp .) ]
  ! MIN_EQ          [ reduce using rule 48 (exp -> NOT exp .) ]
  ! EQ_MIN          [ reduce using rule 48 (exp -> NOT exp .) ]
  ! PLUS            [ reduce using rule 48 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 48 (exp -> NOT exp .) ]
  ! STAR            [ reduce using rule 48 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 48 (exp -> NOT exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]


state 88

    (64) exp -> MINUS INT .

    S               reduce using rule 64 (exp -> MINUS INT .)
    AND             reduce using rule 64 (exp -> MINUS INT .)
    OR              reduce using rule 64 (exp -> MINUS INT .)
    EQ              reduce using rule 64 (exp -> MINUS INT .)
    MIN             reduce using rule 64 (exp -> MINUS INT .)
    MAJ             reduce using rule 64 (exp -> MINUS INT .)
    MAJ_EQ          reduce using rule 64 (exp -> MINUS INT .)
    EQ_MAJ          reduce using rule 64 (exp -> MINUS INT .)
    MIN_EQ          reduce using rule 64 (exp -> MINUS INT .)
    EQ_MIN          reduce using rule 64 (exp -> MINUS INT .)
    PLUS            reduce using rule 64 (exp -> MINUS INT .)
    MINUS           reduce using rule 64 (exp -> MINUS INT .)
    STAR            reduce using rule 64 (exp -> MINUS INT .)
    DIV             reduce using rule 64 (exp -> MINUS INT .)
    RC              reduce using rule 64 (exp -> MINUS INT .)
    error           reduce using rule 64 (exp -> MINUS INT .)


state 89

    (65) exp -> MINUS DOUBLE .

    S               reduce using rule 65 (exp -> MINUS DOUBLE .)
    AND             reduce using rule 65 (exp -> MINUS DOUBLE .)
    OR              reduce using rule 65 (exp -> MINUS DOUBLE .)
    EQ              reduce using rule 65 (exp -> MINUS DOUBLE .)
    MIN             reduce using rule 65 (exp -> MINUS DOUBLE .)
    MAJ             reduce using rule 65 (exp -> MINUS DOUBLE .)
    MAJ_EQ          reduce using rule 65 (exp -> MINUS DOUBLE .)
    EQ_MAJ          reduce using rule 65 (exp -> MINUS DOUBLE .)
    MIN_EQ          reduce using rule 65 (exp -> MINUS DOUBLE .)
    EQ_MIN          reduce using rule 65 (exp -> MINUS DOUBLE .)
    PLUS            reduce using rule 65 (exp -> MINUS DOUBLE .)
    MINUS           reduce using rule 65 (exp -> MINUS DOUBLE .)
    STAR            reduce using rule 65 (exp -> MINUS DOUBLE .)
    DIV             reduce using rule 65 (exp -> MINUS DOUBLE .)
    RC              reduce using rule 65 (exp -> MINUS DOUBLE .)
    error           reduce using rule 65 (exp -> MINUS DOUBLE .)


state 90

    (60) exp -> RO exp . RC
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    RC              shift and go to state 123
    AND             shift and go to state 75
    OR              shift and go to state 76
    EQ              shift and go to state 73
    MIN             shift and go to state 77
    MAJ             shift and go to state 78
    MAJ_EQ          shift and go to state 79
    EQ_MAJ          shift and go to state 80
    MIN_EQ          shift and go to state 81
    EQ_MIN          shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86


state 91

    (66) exp -> RO error . RC

    RC              shift and go to state 124


state 92

    (10) var_list -> var_list CM m_copy . var
    (11) var -> . ID array

    ID              shift and go to state 28

    var                            shift and go to state 125

state 93

    (8) m_copy -> empty .

    ID              reduce using rule 8 (m_copy -> empty .)


state 94

    (13) array -> array SO . INT SC

    INT             shift and go to state 126


state 95

    (24) stmt -> BO stmt_list error BC .

    BO              reduce using rule 24 (stmt -> BO stmt_list error BC .)
    error           reduce using rule 24 (stmt -> BO stmt_list error BC .)
    IF              reduce using rule 24 (stmt -> BO stmt_list error BC .)
    WHILE           reduce using rule 24 (stmt -> BO stmt_list error BC .)
    PRINT           reduce using rule 24 (stmt -> BO stmt_list error BC .)
    ID              reduce using rule 24 (stmt -> BO stmt_list error BC .)
    $end            reduce using rule 24 (stmt -> BO stmt_list error BC .)
    BC              reduce using rule 24 (stmt -> BO stmt_list error BC .)
    ELSE            reduce using rule 24 (stmt -> BO stmt_list error BC .)


state 96

    (31) if -> IF if_condition nt0_if stmt . ELSE nt1_if stmt
    (32) if -> IF if_condition nt0_if stmt .
    (33) if -> IF if_condition nt0_if stmt . error nt1_if stmt

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for error resolved as shift
    ELSE            shift and go to state 127
    BO              reduce using rule 32 (if -> IF if_condition nt0_if stmt .)
    IF              reduce using rule 32 (if -> IF if_condition nt0_if stmt .)
    WHILE           reduce using rule 32 (if -> IF if_condition nt0_if stmt .)
    PRINT           reduce using rule 32 (if -> IF if_condition nt0_if stmt .)
    ID              reduce using rule 32 (if -> IF if_condition nt0_if stmt .)
    $end            reduce using rule 32 (if -> IF if_condition nt0_if stmt .)
    BC              reduce using rule 32 (if -> IF if_condition nt0_if stmt .)
    error           shift and go to state 128

  ! error           [ reduce using rule 32 (if -> IF if_condition nt0_if stmt .) ]
  ! ELSE            [ reduce using rule 32 (if -> IF if_condition nt0_if stmt .) ]


state 97

    (36) if_condition -> error exp RC .

    BO              reduce using rule 36 (if_condition -> error exp RC .)
    error           reduce using rule 36 (if_condition -> error exp RC .)
    IF              reduce using rule 36 (if_condition -> error exp RC .)
    WHILE           reduce using rule 36 (if_condition -> error exp RC .)
    PRINT           reduce using rule 36 (if_condition -> error exp RC .)
    ID              reduce using rule 36 (if_condition -> error exp RC .)


state 98

    (34) if_condition -> RO exp RC .

    BO              reduce using rule 34 (if_condition -> RO exp RC .)
    error           reduce using rule 34 (if_condition -> RO exp RC .)
    IF              reduce using rule 34 (if_condition -> RO exp RC .)
    WHILE           reduce using rule 34 (if_condition -> RO exp RC .)
    PRINT           reduce using rule 34 (if_condition -> RO exp RC .)
    ID              reduce using rule 34 (if_condition -> RO exp RC .)


state 99

    (37) if_condition -> RO exp error .

    BO              reduce using rule 37 (if_condition -> RO exp error .)
    error           reduce using rule 37 (if_condition -> RO exp error .)
    IF              reduce using rule 37 (if_condition -> RO exp error .)
    WHILE           reduce using rule 37 (if_condition -> RO exp error .)
    PRINT           reduce using rule 37 (if_condition -> RO exp error .)
    ID              reduce using rule 37 (if_condition -> RO exp error .)


state 100

    (35) if_condition -> RO error RC .

    BO              reduce using rule 35 (if_condition -> RO error RC .)
    error           reduce using rule 35 (if_condition -> RO error RC .)
    IF              reduce using rule 35 (if_condition -> RO error RC .)
    WHILE           reduce using rule 35 (if_condition -> RO error RC .)
    PRINT           reduce using rule 35 (if_condition -> RO error RC .)
    ID              reduce using rule 35 (if_condition -> RO error RC .)


state 101

    (40) while -> WHILE while_condition nt0_while stmt .

    BO              reduce using rule 40 (while -> WHILE while_condition nt0_while stmt .)
    error           reduce using rule 40 (while -> WHILE while_condition nt0_while stmt .)
    IF              reduce using rule 40 (while -> WHILE while_condition nt0_while stmt .)
    WHILE           reduce using rule 40 (while -> WHILE while_condition nt0_while stmt .)
    PRINT           reduce using rule 40 (while -> WHILE while_condition nt0_while stmt .)
    ID              reduce using rule 40 (while -> WHILE while_condition nt0_while stmt .)
    $end            reduce using rule 40 (while -> WHILE while_condition nt0_while stmt .)
    BC              reduce using rule 40 (while -> WHILE while_condition nt0_while stmt .)
    ELSE            reduce using rule 40 (while -> WHILE while_condition nt0_while stmt .)


state 102

    (41) while_condition -> RO exp RC .

    BO              reduce using rule 41 (while_condition -> RO exp RC .)
    error           reduce using rule 41 (while_condition -> RO exp RC .)
    IF              reduce using rule 41 (while_condition -> RO exp RC .)
    WHILE           reduce using rule 41 (while_condition -> RO exp RC .)
    PRINT           reduce using rule 41 (while_condition -> RO exp RC .)
    ID              reduce using rule 41 (while_condition -> RO exp RC .)


state 103

    (44) while_condition -> RO exp error .

    BO              reduce using rule 44 (while_condition -> RO exp error .)
    error           reduce using rule 44 (while_condition -> RO exp error .)
    IF              reduce using rule 44 (while_condition -> RO exp error .)
    WHILE           reduce using rule 44 (while_condition -> RO exp error .)
    PRINT           reduce using rule 44 (while_condition -> RO exp error .)
    ID              reduce using rule 44 (while_condition -> RO exp error .)


state 104

    (42) while_condition -> RO error RC .

    BO              reduce using rule 42 (while_condition -> RO error RC .)
    error           reduce using rule 42 (while_condition -> RO error RC .)
    IF              reduce using rule 42 (while_condition -> RO error RC .)
    WHILE           reduce using rule 42 (while_condition -> RO error RC .)
    PRINT           reduce using rule 42 (while_condition -> RO error RC .)
    ID              reduce using rule 42 (while_condition -> RO error RC .)


state 105

    (43) while_condition -> error exp RC .

    BO              reduce using rule 43 (while_condition -> error exp RC .)
    error           reduce using rule 43 (while_condition -> error exp RC .)
    IF              reduce using rule 43 (while_condition -> error exp RC .)
    WHILE           reduce using rule 43 (while_condition -> error exp RC .)
    PRINT           reduce using rule 43 (while_condition -> error exp RC .)
    ID              reduce using rule 43 (while_condition -> error exp RC .)


state 106

    (23) assignment -> id EQ exp S .

    BO              reduce using rule 23 (assignment -> id EQ exp S .)
    error           reduce using rule 23 (assignment -> id EQ exp S .)
    IF              reduce using rule 23 (assignment -> id EQ exp S .)
    WHILE           reduce using rule 23 (assignment -> id EQ exp S .)
    PRINT           reduce using rule 23 (assignment -> id EQ exp S .)
    ID              reduce using rule 23 (assignment -> id EQ exp S .)
    $end            reduce using rule 23 (assignment -> id EQ exp S .)
    BC              reduce using rule 23 (assignment -> id EQ exp S .)
    ELSE            reduce using rule 23 (assignment -> id EQ exp S .)


state 107

    (27) assignment -> id EQ error S .

    BO              reduce using rule 27 (assignment -> id EQ error S .)
    error           reduce using rule 27 (assignment -> id EQ error S .)
    IF              reduce using rule 27 (assignment -> id EQ error S .)
    WHILE           reduce using rule 27 (assignment -> id EQ error S .)
    PRINT           reduce using rule 27 (assignment -> id EQ error S .)
    ID              reduce using rule 27 (assignment -> id EQ error S .)
    $end            reduce using rule 27 (assignment -> id EQ error S .)
    BC              reduce using rule 27 (assignment -> id EQ error S .)
    ELSE            reduce using rule 27 (assignment -> id EQ error S .)


state 108

    (69) id -> ID SO ID SC .

    S               reduce using rule 69 (id -> ID SO ID SC .)
    EQ              reduce using rule 69 (id -> ID SO ID SC .)
    AND             reduce using rule 69 (id -> ID SO ID SC .)
    OR              reduce using rule 69 (id -> ID SO ID SC .)
    MIN             reduce using rule 69 (id -> ID SO ID SC .)
    MAJ             reduce using rule 69 (id -> ID SO ID SC .)
    MAJ_EQ          reduce using rule 69 (id -> ID SO ID SC .)
    EQ_MAJ          reduce using rule 69 (id -> ID SO ID SC .)
    MIN_EQ          reduce using rule 69 (id -> ID SO ID SC .)
    EQ_MIN          reduce using rule 69 (id -> ID SO ID SC .)
    PLUS            reduce using rule 69 (id -> ID SO ID SC .)
    MINUS           reduce using rule 69 (id -> ID SO ID SC .)
    STAR            reduce using rule 69 (id -> ID SO ID SC .)
    DIV             reduce using rule 69 (id -> ID SO ID SC .)
    RC              reduce using rule 69 (id -> ID SO ID SC .)
    error           reduce using rule 69 (id -> ID SO ID SC .)


state 109

    (68) id -> ID SO INT SC .

    S               reduce using rule 68 (id -> ID SO INT SC .)
    EQ              reduce using rule 68 (id -> ID SO INT SC .)
    AND             reduce using rule 68 (id -> ID SO INT SC .)
    OR              reduce using rule 68 (id -> ID SO INT SC .)
    MIN             reduce using rule 68 (id -> ID SO INT SC .)
    MAJ             reduce using rule 68 (id -> ID SO INT SC .)
    MAJ_EQ          reduce using rule 68 (id -> ID SO INT SC .)
    EQ_MAJ          reduce using rule 68 (id -> ID SO INT SC .)
    MIN_EQ          reduce using rule 68 (id -> ID SO INT SC .)
    EQ_MIN          reduce using rule 68 (id -> ID SO INT SC .)
    PLUS            reduce using rule 68 (id -> ID SO INT SC .)
    MINUS           reduce using rule 68 (id -> ID SO INT SC .)
    STAR            reduce using rule 68 (id -> ID SO INT SC .)
    DIV             reduce using rule 68 (id -> ID SO INT SC .)
    RC              reduce using rule 68 (id -> ID SO INT SC .)
    error           reduce using rule 68 (id -> ID SO INT SC .)


state 110

    (49) exp -> exp EQ EQ . exp
    (46) exp -> . exp AND exp
    (47) exp -> . exp OR exp
    (48) exp -> . NOT exp
    (49) exp -> . exp EQ EQ exp
    (50) exp -> . exp MIN exp
    (51) exp -> . exp MAJ exp
    (52) exp -> . exp MAJ_EQ exp
    (53) exp -> . exp EQ_MAJ exp
    (54) exp -> . exp MIN_EQ exp
    (55) exp -> . exp EQ_MIN exp
    (56) exp -> . exp PLUS exp
    (57) exp -> . exp MINUS exp
    (58) exp -> . exp STAR exp
    (59) exp -> . exp DIV exp
    (60) exp -> . RO exp RC
    (61) exp -> . id
    (62) exp -> . INT
    (63) exp -> . DOUBLE
    (64) exp -> . MINUS INT
    (65) exp -> . MINUS DOUBLE
    (66) exp -> . RO error RC
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    INT             shift and go to state 47
    DOUBLE          shift and go to state 48
    MINUS           shift and go to state 44
    ID              shift and go to state 19

    exp                            shift and go to state 129
    id                             shift and go to state 46

state 111

    (46) exp -> exp AND exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 46 (exp -> exp AND exp .)
    AND             reduce using rule 46 (exp -> exp AND exp .)
    OR              reduce using rule 46 (exp -> exp AND exp .)
    RC              reduce using rule 46 (exp -> exp AND exp .)
    error           reduce using rule 46 (exp -> exp AND exp .)
    EQ              shift and go to state 73
    MIN             shift and go to state 77
    MAJ             shift and go to state 78
    MAJ_EQ          shift and go to state 79
    EQ_MAJ          shift and go to state 80
    MIN_EQ          shift and go to state 81
    EQ_MIN          shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! EQ              [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! MIN             [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! MAJ             [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! MAJ_EQ          [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! EQ_MAJ          [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! MIN_EQ          [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! EQ_MIN          [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! PLUS            [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! STAR            [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 46 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]


state 112

    (47) exp -> exp OR exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 47 (exp -> exp OR exp .)
    OR              reduce using rule 47 (exp -> exp OR exp .)
    RC              reduce using rule 47 (exp -> exp OR exp .)
    error           reduce using rule 47 (exp -> exp OR exp .)
    AND             shift and go to state 75
    EQ              shift and go to state 73
    MIN             shift and go to state 77
    MAJ             shift and go to state 78
    MAJ_EQ          shift and go to state 79
    EQ_MAJ          shift and go to state 80
    MIN_EQ          shift and go to state 81
    EQ_MIN          shift and go to state 82
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! AND             [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! MIN             [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! MAJ             [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! MAJ_EQ          [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! EQ_MAJ          [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! MIN_EQ          [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! EQ_MIN          [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! PLUS            [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! STAR            [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 47 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 76 ]


state 113

    (50) exp -> exp MIN exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 50 (exp -> exp MIN exp .)
    AND             reduce using rule 50 (exp -> exp MIN exp .)
    OR              reduce using rule 50 (exp -> exp MIN exp .)
    EQ              reduce using rule 50 (exp -> exp MIN exp .)
    MIN             reduce using rule 50 (exp -> exp MIN exp .)
    MAJ             reduce using rule 50 (exp -> exp MIN exp .)
    MAJ_EQ          reduce using rule 50 (exp -> exp MIN exp .)
    EQ_MAJ          reduce using rule 50 (exp -> exp MIN exp .)
    MIN_EQ          reduce using rule 50 (exp -> exp MIN exp .)
    EQ_MIN          reduce using rule 50 (exp -> exp MIN exp .)
    RC              reduce using rule 50 (exp -> exp MIN exp .)
    error           reduce using rule 50 (exp -> exp MIN exp .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! PLUS            [ reduce using rule 50 (exp -> exp MIN exp .) ]
  ! MINUS           [ reduce using rule 50 (exp -> exp MIN exp .) ]
  ! STAR            [ reduce using rule 50 (exp -> exp MIN exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> exp MIN exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]


state 114

    (51) exp -> exp MAJ exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 51 (exp -> exp MAJ exp .)
    AND             reduce using rule 51 (exp -> exp MAJ exp .)
    OR              reduce using rule 51 (exp -> exp MAJ exp .)
    EQ              reduce using rule 51 (exp -> exp MAJ exp .)
    MIN             reduce using rule 51 (exp -> exp MAJ exp .)
    MAJ             reduce using rule 51 (exp -> exp MAJ exp .)
    MAJ_EQ          reduce using rule 51 (exp -> exp MAJ exp .)
    EQ_MAJ          reduce using rule 51 (exp -> exp MAJ exp .)
    MIN_EQ          reduce using rule 51 (exp -> exp MAJ exp .)
    EQ_MIN          reduce using rule 51 (exp -> exp MAJ exp .)
    RC              reduce using rule 51 (exp -> exp MAJ exp .)
    error           reduce using rule 51 (exp -> exp MAJ exp .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! PLUS            [ reduce using rule 51 (exp -> exp MAJ exp .) ]
  ! MINUS           [ reduce using rule 51 (exp -> exp MAJ exp .) ]
  ! STAR            [ reduce using rule 51 (exp -> exp MAJ exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp MAJ exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]


state 115

    (52) exp -> exp MAJ_EQ exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    AND             reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    OR              reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    EQ              reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    MIN             reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    MAJ             reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    MAJ_EQ          reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    EQ_MAJ          reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    MIN_EQ          reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    EQ_MIN          reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    RC              reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    error           reduce using rule 52 (exp -> exp MAJ_EQ exp .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! PLUS            [ reduce using rule 52 (exp -> exp MAJ_EQ exp .) ]
  ! MINUS           [ reduce using rule 52 (exp -> exp MAJ_EQ exp .) ]
  ! STAR            [ reduce using rule 52 (exp -> exp MAJ_EQ exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> exp MAJ_EQ exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]


state 116

    (53) exp -> exp EQ_MAJ exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    AND             reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    OR              reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    EQ              reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    MIN             reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    MAJ             reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    MAJ_EQ          reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    EQ_MAJ          reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    MIN_EQ          reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    EQ_MIN          reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    RC              reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    error           reduce using rule 53 (exp -> exp EQ_MAJ exp .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! PLUS            [ reduce using rule 53 (exp -> exp EQ_MAJ exp .) ]
  ! MINUS           [ reduce using rule 53 (exp -> exp EQ_MAJ exp .) ]
  ! STAR            [ reduce using rule 53 (exp -> exp EQ_MAJ exp .) ]
  ! DIV             [ reduce using rule 53 (exp -> exp EQ_MAJ exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]


state 117

    (54) exp -> exp MIN_EQ exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 54 (exp -> exp MIN_EQ exp .)
    AND             reduce using rule 54 (exp -> exp MIN_EQ exp .)
    OR              reduce using rule 54 (exp -> exp MIN_EQ exp .)
    EQ              reduce using rule 54 (exp -> exp MIN_EQ exp .)
    MIN             reduce using rule 54 (exp -> exp MIN_EQ exp .)
    MAJ             reduce using rule 54 (exp -> exp MIN_EQ exp .)
    MAJ_EQ          reduce using rule 54 (exp -> exp MIN_EQ exp .)
    EQ_MAJ          reduce using rule 54 (exp -> exp MIN_EQ exp .)
    MIN_EQ          reduce using rule 54 (exp -> exp MIN_EQ exp .)
    EQ_MIN          reduce using rule 54 (exp -> exp MIN_EQ exp .)
    RC              reduce using rule 54 (exp -> exp MIN_EQ exp .)
    error           reduce using rule 54 (exp -> exp MIN_EQ exp .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! PLUS            [ reduce using rule 54 (exp -> exp MIN_EQ exp .) ]
  ! MINUS           [ reduce using rule 54 (exp -> exp MIN_EQ exp .) ]
  ! STAR            [ reduce using rule 54 (exp -> exp MIN_EQ exp .) ]
  ! DIV             [ reduce using rule 54 (exp -> exp MIN_EQ exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]


state 118

    (55) exp -> exp EQ_MIN exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 55 (exp -> exp EQ_MIN exp .)
    AND             reduce using rule 55 (exp -> exp EQ_MIN exp .)
    OR              reduce using rule 55 (exp -> exp EQ_MIN exp .)
    EQ              reduce using rule 55 (exp -> exp EQ_MIN exp .)
    MIN             reduce using rule 55 (exp -> exp EQ_MIN exp .)
    MAJ             reduce using rule 55 (exp -> exp EQ_MIN exp .)
    MAJ_EQ          reduce using rule 55 (exp -> exp EQ_MIN exp .)
    EQ_MAJ          reduce using rule 55 (exp -> exp EQ_MIN exp .)
    MIN_EQ          reduce using rule 55 (exp -> exp EQ_MIN exp .)
    EQ_MIN          reduce using rule 55 (exp -> exp EQ_MIN exp .)
    RC              reduce using rule 55 (exp -> exp EQ_MIN exp .)
    error           reduce using rule 55 (exp -> exp EQ_MIN exp .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! PLUS            [ reduce using rule 55 (exp -> exp EQ_MIN exp .) ]
  ! MINUS           [ reduce using rule 55 (exp -> exp EQ_MIN exp .) ]
  ! STAR            [ reduce using rule 55 (exp -> exp EQ_MIN exp .) ]
  ! DIV             [ reduce using rule 55 (exp -> exp EQ_MIN exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]


state 119

    (56) exp -> exp PLUS exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 56 (exp -> exp PLUS exp .)
    AND             reduce using rule 56 (exp -> exp PLUS exp .)
    OR              reduce using rule 56 (exp -> exp PLUS exp .)
    EQ              reduce using rule 56 (exp -> exp PLUS exp .)
    MIN             reduce using rule 56 (exp -> exp PLUS exp .)
    MAJ             reduce using rule 56 (exp -> exp PLUS exp .)
    MAJ_EQ          reduce using rule 56 (exp -> exp PLUS exp .)
    EQ_MAJ          reduce using rule 56 (exp -> exp PLUS exp .)
    MIN_EQ          reduce using rule 56 (exp -> exp PLUS exp .)
    EQ_MIN          reduce using rule 56 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 56 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 56 (exp -> exp PLUS exp .)
    RC              reduce using rule 56 (exp -> exp PLUS exp .)
    error           reduce using rule 56 (exp -> exp PLUS exp .)
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! STAR            [ reduce using rule 56 (exp -> exp PLUS exp .) ]
  ! DIV             [ reduce using rule 56 (exp -> exp PLUS exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]
  ! PLUS            [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 84 ]


state 120

    (57) exp -> exp MINUS exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 57 (exp -> exp MINUS exp .)
    AND             reduce using rule 57 (exp -> exp MINUS exp .)
    OR              reduce using rule 57 (exp -> exp MINUS exp .)
    EQ              reduce using rule 57 (exp -> exp MINUS exp .)
    MIN             reduce using rule 57 (exp -> exp MINUS exp .)
    MAJ             reduce using rule 57 (exp -> exp MINUS exp .)
    MAJ_EQ          reduce using rule 57 (exp -> exp MINUS exp .)
    EQ_MAJ          reduce using rule 57 (exp -> exp MINUS exp .)
    MIN_EQ          reduce using rule 57 (exp -> exp MINUS exp .)
    EQ_MIN          reduce using rule 57 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 57 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 57 (exp -> exp MINUS exp .)
    RC              reduce using rule 57 (exp -> exp MINUS exp .)
    error           reduce using rule 57 (exp -> exp MINUS exp .)
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! STAR            [ reduce using rule 57 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 57 (exp -> exp MINUS exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]
  ! PLUS            [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 84 ]


state 121

    (58) exp -> exp STAR exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 58 (exp -> exp STAR exp .)
    AND             reduce using rule 58 (exp -> exp STAR exp .)
    OR              reduce using rule 58 (exp -> exp STAR exp .)
    EQ              reduce using rule 58 (exp -> exp STAR exp .)
    MIN             reduce using rule 58 (exp -> exp STAR exp .)
    MAJ             reduce using rule 58 (exp -> exp STAR exp .)
    MAJ_EQ          reduce using rule 58 (exp -> exp STAR exp .)
    EQ_MAJ          reduce using rule 58 (exp -> exp STAR exp .)
    MIN_EQ          reduce using rule 58 (exp -> exp STAR exp .)
    EQ_MIN          reduce using rule 58 (exp -> exp STAR exp .)
    PLUS            reduce using rule 58 (exp -> exp STAR exp .)
    MINUS           reduce using rule 58 (exp -> exp STAR exp .)
    STAR            reduce using rule 58 (exp -> exp STAR exp .)
    DIV             reduce using rule 58 (exp -> exp STAR exp .)
    RC              reduce using rule 58 (exp -> exp STAR exp .)
    error           reduce using rule 58 (exp -> exp STAR exp .)

  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]
  ! PLUS            [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 84 ]
  ! STAR            [ shift and go to state 85 ]
  ! DIV             [ shift and go to state 86 ]


state 122

    (59) exp -> exp DIV exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 59 (exp -> exp DIV exp .)
    AND             reduce using rule 59 (exp -> exp DIV exp .)
    OR              reduce using rule 59 (exp -> exp DIV exp .)
    EQ              reduce using rule 59 (exp -> exp DIV exp .)
    MIN             reduce using rule 59 (exp -> exp DIV exp .)
    MAJ             reduce using rule 59 (exp -> exp DIV exp .)
    MAJ_EQ          reduce using rule 59 (exp -> exp DIV exp .)
    EQ_MAJ          reduce using rule 59 (exp -> exp DIV exp .)
    MIN_EQ          reduce using rule 59 (exp -> exp DIV exp .)
    EQ_MIN          reduce using rule 59 (exp -> exp DIV exp .)
    PLUS            reduce using rule 59 (exp -> exp DIV exp .)
    MINUS           reduce using rule 59 (exp -> exp DIV exp .)
    STAR            reduce using rule 59 (exp -> exp DIV exp .)
    DIV             reduce using rule 59 (exp -> exp DIV exp .)
    RC              reduce using rule 59 (exp -> exp DIV exp .)
    error           reduce using rule 59 (exp -> exp DIV exp .)

  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]
  ! PLUS            [ shift and go to state 83 ]
  ! MINUS           [ shift and go to state 84 ]
  ! STAR            [ shift and go to state 85 ]
  ! DIV             [ shift and go to state 86 ]


state 123

    (60) exp -> RO exp RC .

    S               reduce using rule 60 (exp -> RO exp RC .)
    AND             reduce using rule 60 (exp -> RO exp RC .)
    OR              reduce using rule 60 (exp -> RO exp RC .)
    EQ              reduce using rule 60 (exp -> RO exp RC .)
    MIN             reduce using rule 60 (exp -> RO exp RC .)
    MAJ             reduce using rule 60 (exp -> RO exp RC .)
    MAJ_EQ          reduce using rule 60 (exp -> RO exp RC .)
    EQ_MAJ          reduce using rule 60 (exp -> RO exp RC .)
    MIN_EQ          reduce using rule 60 (exp -> RO exp RC .)
    EQ_MIN          reduce using rule 60 (exp -> RO exp RC .)
    PLUS            reduce using rule 60 (exp -> RO exp RC .)
    MINUS           reduce using rule 60 (exp -> RO exp RC .)
    STAR            reduce using rule 60 (exp -> RO exp RC .)
    DIV             reduce using rule 60 (exp -> RO exp RC .)
    RC              reduce using rule 60 (exp -> RO exp RC .)
    error           reduce using rule 60 (exp -> RO exp RC .)


state 124

    (66) exp -> RO error RC .

    S               reduce using rule 66 (exp -> RO error RC .)
    AND             reduce using rule 66 (exp -> RO error RC .)
    OR              reduce using rule 66 (exp -> RO error RC .)
    EQ              reduce using rule 66 (exp -> RO error RC .)
    MIN             reduce using rule 66 (exp -> RO error RC .)
    MAJ             reduce using rule 66 (exp -> RO error RC .)
    MAJ_EQ          reduce using rule 66 (exp -> RO error RC .)
    EQ_MAJ          reduce using rule 66 (exp -> RO error RC .)
    MIN_EQ          reduce using rule 66 (exp -> RO error RC .)
    EQ_MIN          reduce using rule 66 (exp -> RO error RC .)
    PLUS            reduce using rule 66 (exp -> RO error RC .)
    MINUS           reduce using rule 66 (exp -> RO error RC .)
    STAR            reduce using rule 66 (exp -> RO error RC .)
    DIV             reduce using rule 66 (exp -> RO error RC .)
    RC              reduce using rule 66 (exp -> RO error RC .)
    error           reduce using rule 66 (exp -> RO error RC .)


state 125

    (10) var_list -> var_list CM m_copy var .

    S               reduce using rule 10 (var_list -> var_list CM m_copy var .)
    CM              reduce using rule 10 (var_list -> var_list CM m_copy var .)


state 126

    (13) array -> array SO INT . SC

    SC              shift and go to state 130


state 127

    (31) if -> IF if_condition nt0_if stmt ELSE . nt1_if stmt
    (39) nt1_if -> . empty
    (70) empty -> .

    BO              reduce using rule 70 (empty -> .)
    error           reduce using rule 70 (empty -> .)
    IF              reduce using rule 70 (empty -> .)
    WHILE           reduce using rule 70 (empty -> .)
    PRINT           reduce using rule 70 (empty -> .)
    ID              reduce using rule 70 (empty -> .)

    nt1_if                         shift and go to state 131
    empty                          shift and go to state 132

state 128

    (33) if -> IF if_condition nt0_if stmt error . nt1_if stmt
    (39) nt1_if -> . empty
    (70) empty -> .

    BO              reduce using rule 70 (empty -> .)
    error           reduce using rule 70 (empty -> .)
    IF              reduce using rule 70 (empty -> .)
    WHILE           reduce using rule 70 (empty -> .)
    PRINT           reduce using rule 70 (empty -> .)
    ID              reduce using rule 70 (empty -> .)

    nt1_if                         shift and go to state 133
    empty                          shift and go to state 132

state 129

    (49) exp -> exp EQ EQ exp .
    (46) exp -> exp . AND exp
    (47) exp -> exp . OR exp
    (49) exp -> exp . EQ EQ exp
    (50) exp -> exp . MIN exp
    (51) exp -> exp . MAJ exp
    (52) exp -> exp . MAJ_EQ exp
    (53) exp -> exp . EQ_MAJ exp
    (54) exp -> exp . MIN_EQ exp
    (55) exp -> exp . EQ_MIN exp
    (56) exp -> exp . PLUS exp
    (57) exp -> exp . MINUS exp
    (58) exp -> exp . STAR exp
    (59) exp -> exp . DIV exp

    S               reduce using rule 49 (exp -> exp EQ EQ exp .)
    AND             reduce using rule 49 (exp -> exp EQ EQ exp .)
    OR              reduce using rule 49 (exp -> exp EQ EQ exp .)
    EQ              reduce using rule 49 (exp -> exp EQ EQ exp .)
    MIN             reduce using rule 49 (exp -> exp EQ EQ exp .)
    MAJ             reduce using rule 49 (exp -> exp EQ EQ exp .)
    MAJ_EQ          reduce using rule 49 (exp -> exp EQ EQ exp .)
    EQ_MAJ          reduce using rule 49 (exp -> exp EQ EQ exp .)
    MIN_EQ          reduce using rule 49 (exp -> exp EQ EQ exp .)
    EQ_MIN          reduce using rule 49 (exp -> exp EQ EQ exp .)
    RC              reduce using rule 49 (exp -> exp EQ EQ exp .)
    error           reduce using rule 49 (exp -> exp EQ EQ exp .)
    PLUS            shift and go to state 83
    MINUS           shift and go to state 84
    STAR            shift and go to state 85
    DIV             shift and go to state 86

  ! PLUS            [ reduce using rule 49 (exp -> exp EQ EQ exp .) ]
  ! MINUS           [ reduce using rule 49 (exp -> exp EQ EQ exp .) ]
  ! STAR            [ reduce using rule 49 (exp -> exp EQ EQ exp .) ]
  ! DIV             [ reduce using rule 49 (exp -> exp EQ EQ exp .) ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]
  ! EQ              [ shift and go to state 73 ]
  ! MIN             [ shift and go to state 77 ]
  ! MAJ             [ shift and go to state 78 ]
  ! MAJ_EQ          [ shift and go to state 79 ]
  ! EQ_MAJ          [ shift and go to state 80 ]
  ! MIN_EQ          [ shift and go to state 81 ]
  ! EQ_MIN          [ shift and go to state 82 ]


state 130

    (13) array -> array SO INT SC .

    SO              reduce using rule 13 (array -> array SO INT SC .)
    S               reduce using rule 13 (array -> array SO INT SC .)
    CM              reduce using rule 13 (array -> array SO INT SC .)


state 131

    (31) if -> IF if_condition nt0_if stmt ELSE nt1_if . stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (24) stmt -> . BO stmt_list error BC
    (25) stmt -> . BO error BC
    (26) stmt -> . error S
    (31) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> . IF if_condition nt0_if stmt
    (33) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (40) while -> . WHILE while_condition nt0_while stmt
    (22) assignment -> . id S
    (23) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) print -> . PRINT id S
    (30) print -> . PRINT error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 134
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 132

    (39) nt1_if -> empty .

    BO              reduce using rule 39 (nt1_if -> empty .)
    error           reduce using rule 39 (nt1_if -> empty .)
    IF              reduce using rule 39 (nt1_if -> empty .)
    WHILE           reduce using rule 39 (nt1_if -> empty .)
    PRINT           reduce using rule 39 (nt1_if -> empty .)
    ID              reduce using rule 39 (nt1_if -> empty .)


state 133

    (33) if -> IF if_condition nt0_if stmt error nt1_if . stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (24) stmt -> . BO stmt_list error BC
    (25) stmt -> . BO error BC
    (26) stmt -> . error S
    (31) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (32) if -> . IF if_condition nt0_if stmt
    (33) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (40) while -> . WHILE while_condition nt0_while stmt
    (22) assignment -> . id S
    (23) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) print -> . PRINT id S
    (30) print -> . PRINT error S
    (67) id -> . ID
    (68) id -> . ID SO INT SC
    (69) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 135
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 134

    (31) if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .

    BO              reduce using rule 31 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    error           reduce using rule 31 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    IF              reduce using rule 31 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    WHILE           reduce using rule 31 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    PRINT           reduce using rule 31 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    ID              reduce using rule 31 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    $end            reduce using rule 31 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    BC              reduce using rule 31 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    ELSE            reduce using rule 31 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)


state 135

    (33) if -> IF if_condition nt0_if stmt error nt1_if stmt .

    BO              reduce using rule 33 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    error           reduce using rule 33 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    IF              reduce using rule 33 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    WHILE           reduce using rule 33 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    PRINT           reduce using rule 33 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    ID              reduce using rule 33 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    $end            reduce using rule 33 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    BC              reduce using rule 33 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    ELSE            reduce using rule 33 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 96 resolved as shift
WARNING: shift/reduce conflict for error in state 96 resolved as shift

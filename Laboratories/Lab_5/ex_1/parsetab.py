
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMINUSPLUSleftDIVPRODPTleftEXPleftUMINUSCM CONST DIV EQUALS EXP LBR LBS MINUS PLUS PROD PT PV QP RBR RBS SCALAR_VAR VECTOR_VAR nl ws\n        sessione : expr_list QP\n        \n        expr_list : expr_list PV expr\n                    | expr\n        \n        expr : scalar_assign \n                    | vector_assign \n                    | vect_expr_ \n                    | scalar_expr_\n        \n        vect_expr_ : vect_expr\n        \n        scalar_expr_ : scalar_expr\n        \n        vect_scal_expr : scalar_expr PROD vect_expr \n                            | scalar_expr DIV vect_expr\n        \n        vect_expr : vect_expr PLUS vect_expr\n                    | vect_expr MINUS vect_expr \n                    | vect_scal_expr\n                    | vect_expr PROD scalar_expr \n                    | vect_expr DIV scalar_expr \n                    | LBR vect_expr RBR\n                    | vector\n        \n        scalar_expr : scalar_expr PLUS scalar_expr \n                        | scalar_expr MINUS scalar_expr\n                        | scalar_expr PROD scalar_expr\n                        | scalar_expr DIV scalar_expr\n                        | MINUS scalar_expr %prec UMINUS\n                        | scalar_expr EXP scalar_expr \n                        | LBR scalar_expr RBR\n                        | vect_expr PT vect_expr\n                        | scalar\n        \n        scalar_assign : SCALAR_VAR EQUALS scalar_expr\n        \n        vector_assign : VECTOR_VAR EQUALS vect_expr\n        \n        scalar : CONST\n                | SCALAR_VAR\n        \n        vector : VECTOR_VAR\n                | LBS scalar_expr CM scalar_expr RBS\n        '
    
_lr_action_items = {'SCALAR_VAR':([0,12,14,17,20,21,22,23,24,25,26,27,28,29,30,31,32,34,60,61,62,],[8,36,36,36,8,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'VECTOR_VAR':([0,12,14,17,20,21,22,23,24,25,26,27,28,29,30,31,32,34,60,61,62,],[10,37,37,37,10,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'LBR':([0,12,14,17,20,21,22,23,24,25,26,27,28,29,30,31,32,34,60,61,62,],[14,34,14,34,14,34,34,34,34,34,34,14,14,14,34,34,14,34,34,14,14,]),'MINUS':([0,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[12,-31,23,-32,29,12,-14,12,-18,-27,12,-30,12,12,12,12,12,12,12,12,12,12,12,12,12,-23,12,29,-31,-32,29,23,23,23,-19,-20,-21,-10,-22,-11,-24,29,23,-12,-13,-15,-16,-26,29,-17,-25,12,12,12,23,-10,-11,-33,]),'LBS':([0,12,14,17,20,21,22,23,24,25,26,27,28,29,30,31,32,34,60,61,62,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'CONST':([0,12,14,17,20,21,22,23,24,25,26,27,28,29,30,31,32,34,60,61,62,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'$end':([1,19,],[0,-1,]),'QP':([2,3,4,5,6,7,8,9,10,11,13,15,16,18,33,36,37,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,58,59,64,65,66,],[19,-3,-4,-5,-6,-7,-31,-9,-32,-8,-14,-18,-27,-30,-23,-31,-32,-2,-28,-19,-20,-21,-10,-22,-11,-24,-29,-12,-13,-15,-16,-26,-17,-25,-10,-11,-33,]),'PV':([2,3,4,5,6,7,8,9,10,11,13,15,16,18,33,36,37,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,58,59,64,65,66,],[20,-3,-4,-5,-6,-7,-31,-9,-32,-8,-14,-18,-27,-30,-23,-31,-32,-2,-28,-19,-20,-21,-10,-22,-11,-24,-29,-12,-13,-15,-16,-26,-17,-25,-10,-11,-33,]),'EQUALS':([8,10,],[21,27,]),'PLUS':([8,9,10,11,13,15,16,18,33,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,63,64,65,66,],[-31,22,-32,28,-14,-18,-27,-30,-23,28,-31,-32,28,22,22,22,-19,-20,-21,-10,-22,-11,-24,28,22,-12,-13,-15,-16,-26,28,-17,-25,22,-10,-11,-33,]),'PROD':([8,9,10,11,13,15,16,18,33,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,63,64,65,66,],[-31,24,-32,30,-14,-18,-27,-30,-23,30,-31,-32,30,24,24,24,24,24,-21,-10,-22,-11,-24,30,61,30,30,-15,-16,-26,30,-17,-25,24,-10,-11,-33,]),'DIV':([8,9,10,11,13,15,16,18,33,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,63,64,65,66,],[-31,25,-32,31,-14,-18,-27,-30,-23,31,-31,-32,31,25,25,25,25,25,-21,-10,-22,-11,-24,31,62,31,31,-15,-16,-26,31,-17,-25,25,-10,-11,-33,]),'EXP':([8,9,13,15,16,18,33,36,37,39,40,42,43,44,45,46,47,48,49,51,52,53,54,55,56,58,59,63,64,65,66,],[-31,26,-14,-18,-27,-30,-23,-31,-32,26,26,26,26,26,26,-10,26,-11,-24,26,-12,-13,26,26,-26,-17,-25,26,-10,-11,-33,]),'PT':([10,11,13,15,16,18,33,35,36,37,38,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,64,65,66,],[-32,32,-14,-18,-27,-30,-23,32,-31,-32,32,-19,-20,-21,-10,-22,-11,-24,32,32,32,-15,-16,-26,32,-17,-25,-10,-11,-33,]),'RBR':([13,15,16,18,33,36,37,38,39,43,44,45,46,47,48,49,52,53,54,55,56,57,58,59,64,65,66,],[-14,-18,-27,-30,-23,-31,-32,58,59,-19,-20,-21,-10,-22,-11,-24,-12,-13,-15,-16,-26,58,-17,-25,-10,-11,-33,]),'CM':([13,15,16,18,33,36,37,40,43,44,45,46,47,48,49,52,53,54,55,56,58,59,64,65,66,],[-14,-18,-27,-30,-23,-31,-32,60,-19,-20,-21,-10,-22,-11,-24,-12,-13,-15,-16,-26,-17,-25,-10,-11,-33,]),'RBS':([13,15,16,18,33,36,37,43,44,45,46,47,48,49,52,53,54,55,56,58,59,63,64,65,66,],[-14,-18,-27,-30,-23,-31,-32,-19,-20,-21,-10,-22,-11,-24,-12,-13,-15,-16,-26,-17,-25,66,-10,-11,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sessione':([0,],[1,]),'expr_list':([0,],[2,]),'expr':([0,20,],[3,41,]),'scalar_assign':([0,20,],[4,4,]),'vector_assign':([0,20,],[5,5,]),'vect_expr_':([0,20,],[6,6,]),'scalar_expr_':([0,20,],[7,7,]),'scalar_expr':([0,12,14,17,20,21,22,23,24,25,26,27,28,29,30,31,32,34,60,61,62,],[9,33,39,40,9,42,43,44,45,47,49,51,51,51,54,55,51,39,63,45,47,]),'vect_expr':([0,12,14,17,20,21,22,23,24,25,26,27,28,29,30,31,32,34,60,61,62,],[11,35,38,35,11,35,35,35,46,48,35,50,52,53,35,35,56,57,35,64,65,]),'vect_scal_expr':([0,12,14,17,20,21,22,23,24,25,26,27,28,29,30,31,32,34,60,61,62,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'vector':([0,12,14,17,20,21,22,23,24,25,26,27,28,29,30,31,32,34,60,61,62,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'scalar':([0,12,14,17,20,21,22,23,24,25,26,27,28,29,30,31,32,34,60,61,62,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sessione","S'",1,None,None,None),
  ('sessione -> expr_list QP','sessione',2,'p_sessione','myParser.py',47),
  ('expr_list -> expr_list PV expr','expr_list',3,'p_expr_list','myParser.py',52),
  ('expr_list -> expr','expr_list',1,'p_expr_list','myParser.py',53),
  ('expr -> scalar_assign','expr',1,'p_expr','myParser.py',58),
  ('expr -> vector_assign','expr',1,'p_expr','myParser.py',59),
  ('expr -> vect_expr_','expr',1,'p_expr','myParser.py',60),
  ('expr -> scalar_expr_','expr',1,'p_expr','myParser.py',61),
  ('vect_expr_ -> vect_expr','vect_expr_',1,'p_vect_expr_','myParser.py',66),
  ('scalar_expr_ -> scalar_expr','scalar_expr_',1,'p_scalar_expr_','myParser.py',76),
  ('vect_scal_expr -> scalar_expr PROD vect_expr','vect_scal_expr',3,'p_vect_scal_expr','myParser.py',87),
  ('vect_scal_expr -> scalar_expr DIV vect_expr','vect_scal_expr',3,'p_vect_scal_expr','myParser.py',88),
  ('vect_expr -> vect_expr PLUS vect_expr','vect_expr',3,'p_vect_expr','myParser.py',103),
  ('vect_expr -> vect_expr MINUS vect_expr','vect_expr',3,'p_vect_expr','myParser.py',104),
  ('vect_expr -> vect_scal_expr','vect_expr',1,'p_vect_expr','myParser.py',105),
  ('vect_expr -> vect_expr PROD scalar_expr','vect_expr',3,'p_vect_expr','myParser.py',106),
  ('vect_expr -> vect_expr DIV scalar_expr','vect_expr',3,'p_vect_expr','myParser.py',107),
  ('vect_expr -> LBR vect_expr RBR','vect_expr',3,'p_vect_expr','myParser.py',108),
  ('vect_expr -> vector','vect_expr',1,'p_vect_expr','myParser.py',109),
  ('scalar_expr -> scalar_expr PLUS scalar_expr','scalar_expr',3,'p_scalar_expr','myParser.py',135),
  ('scalar_expr -> scalar_expr MINUS scalar_expr','scalar_expr',3,'p_scalar_expr','myParser.py',136),
  ('scalar_expr -> scalar_expr PROD scalar_expr','scalar_expr',3,'p_scalar_expr','myParser.py',137),
  ('scalar_expr -> scalar_expr DIV scalar_expr','scalar_expr',3,'p_scalar_expr','myParser.py',138),
  ('scalar_expr -> MINUS scalar_expr','scalar_expr',2,'p_scalar_expr','myParser.py',139),
  ('scalar_expr -> scalar_expr EXP scalar_expr','scalar_expr',3,'p_scalar_expr','myParser.py',140),
  ('scalar_expr -> LBR scalar_expr RBR','scalar_expr',3,'p_scalar_expr','myParser.py',141),
  ('scalar_expr -> vect_expr PT vect_expr','scalar_expr',3,'p_scalar_expr','myParser.py',142),
  ('scalar_expr -> scalar','scalar_expr',1,'p_scalar_expr','myParser.py',143),
  ('scalar_assign -> SCALAR_VAR EQUALS scalar_expr','scalar_assign',3,'p_scalar_assign','myParser.py',180),
  ('vector_assign -> VECTOR_VAR EQUALS vect_expr','vector_assign',3,'p_vector_assign','myParser.py',189),
  ('scalar -> CONST','scalar',1,'p_scalar','myParser.py',201),
  ('scalar -> SCALAR_VAR','scalar',1,'p_scalar','myParser.py',202),
  ('vector -> VECTOR_VAR','vector',1,'p_vector','myParser.py',213),
  ('vector -> LBS scalar_expr CM scalar_expr RBS','vector',5,'p_vector','myParser.py',214),
]

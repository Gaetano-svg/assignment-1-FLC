
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ATOM CM PT RC RO SEP1 SEP2 VARIABLE ws\n        prog : elements interrogation elements\n        \n        elements : \n                    | elements element\n        \n        element : fact\n                    | rule\n        \n        fact : predicate PT\n        \n        fact : error PT\n        \n        rule : predicate SEP1 predicates PT\n        \n        rule : error SEP1 predicates PT\n        \n        predicates : predicates CM predicate\n                    | predicate\n        \n        interrogation : SEP2 predicates PT\n        \n        interrogation : SEP2 error PT\n        \n        predicate : ATOM RO arguments RC \n                | ATOM \n        \n        arguments : arguments CM argument \n                    | argument \n        \n        argument : predicate\n                | VARIABLE \n        '
    
_lr_action_items = {'SEP2':([0,2,4,7,8,15,17,30,31,],[-2,5,-3,-4,-5,-7,-6,-9,-8,]),'error':([0,2,3,4,5,7,8,11,15,17,20,22,30,31,],[-2,6,-2,-3,13,-4,-5,6,-7,-6,-12,-13,-9,-8,]),'ATOM':([0,2,3,4,5,7,8,11,15,16,17,18,19,20,21,22,30,31,33,],[-2,10,-2,-3,10,-4,-5,10,-7,10,-6,10,10,-12,10,-13,-9,-8,10,]),'$end':([1,3,4,7,8,11,15,17,20,22,30,31,],[0,-2,-3,-4,-5,-1,-7,-6,-12,-13,-9,-8,]),'PT':([6,9,10,12,13,14,23,24,29,32,],[15,17,-15,20,22,-11,30,31,-10,-14,]),'SEP1':([6,9,10,32,],[16,18,-15,-14,]),'RO':([10,],[19,]),'CM':([10,12,14,23,24,25,26,27,28,29,32,34,],[-15,21,-11,21,21,33,-17,-18,-19,-10,-14,-16,]),'RC':([10,25,26,27,28,32,34,],[-15,32,-17,-18,-19,-14,-16,]),'VARIABLE':([19,33,],[28,28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'elements':([0,3,],[2,11,]),'interrogation':([2,],[3,]),'element':([2,11,],[4,4,]),'fact':([2,11,],[7,7,]),'rule':([2,11,],[8,8,]),'predicate':([2,5,11,16,18,19,21,33,],[9,14,9,14,14,27,29,27,]),'predicates':([5,16,18,],[12,23,24,]),'arguments':([19,],[25,]),'argument':([19,33,],[26,34,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> elements interrogation elements','prog',3,'p_log_prog','parser.py',34),
  ('elements -> <empty>','elements',0,'p_elements','parser.py',46),
  ('elements -> elements element','elements',2,'p_elements','parser.py',47),
  ('element -> fact','element',1,'p_element','parser.py',52),
  ('element -> rule','element',1,'p_element','parser.py',53),
  ('fact -> predicate PT','fact',2,'p_fact','parser.py',58),
  ('fact -> error PT','fact',2,'p_fact_error','parser.py',65),
  ('rule -> predicate SEP1 predicates PT','rule',4,'p_rule','parser.py',73),
  ('rule -> error SEP1 predicates PT','rule',4,'p_rule_error','parser.py',78),
  ('predicates -> predicates CM predicate','predicates',3,'p_predicates','parser.py',86),
  ('predicates -> predicate','predicates',1,'p_predicates','parser.py',87),
  ('interrogation -> SEP2 predicates PT','interrogation',3,'p_interrogation','parser.py',92),
  ('interrogation -> SEP2 error PT','interrogation',3,'p_interrogation_error','parser.py',97),
  ('predicate -> ATOM RO arguments RC','predicate',4,'p_predicate','parser.py',105),
  ('predicate -> ATOM','predicate',1,'p_predicate','parser.py',106),
  ('arguments -> arguments CM argument','arguments',3,'p_arguments','parser.py',111),
  ('arguments -> argument','arguments',1,'p_arguments','parser.py',112),
  ('argument -> predicate','argument',1,'p_argument','parser.py',117),
  ('argument -> VARIABLE','argument',1,'p_argument','parser.py',118),
]

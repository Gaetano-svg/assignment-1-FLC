
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftNOTleftMINMAJMIN_EQEQ_MINMAJ_EQEQ_MAJEQleftPLUSMINUSleftSTARDIVleftUMINUSnonassocELSEAND BC BO CM DIV DOUBLE DOUBLE_TYPE ELSE EMPTY EQ EQ_MAJ EQ_MIN ID IF INT INT_TYPE MAJ MAJ_EQ MIN MINUS MIN_EQ NOT OR PLUS PRINT RC RO S SC SO STAR WHILE comm nl ws\n        prog : decl_list stmt_list\n        \n        decl_list : decl_list decl \n                    | \n        \n        decl : type var_list S\n        \n        decl : type error S\n        \n        type : INT_TYPE \n                | DOUBLE_TYPE\n        \n        m_copy : empty\n        \n        var_list : var \n                    | var_list CM m_copy var\n        \n        var : ID \n                | ID SO INT SC\n        \n        stmt_list : stmt_list stmt \n                    | stmt \n        \n        stmt_list : error stmt \n        \n        stmt : if \n                | while \n                | assignment \n                | print \n                | BO stmt_list BC\n        \n        stmt :  BO stmt_list error BC \n                | BO error BC \n                | error S \n        \n        assignment : id S \n                        | id EQ exp S \n        \n        assignment : id EQ error S \n                        | error EQ exp S \n        \n        print : PRINT id S\n        \n        print : PRINT error S\n        \n        if  :  IF if_condition nt0_if stmt ELSE nt1_if stmt\n                | IF if_condition nt0_if stmt\n                | IF if_condition nt0_if stmt error nt1_if stmt\n        \n        if_condition : RO exp RC\n        \n        if_condition : RO error RC\n                        | error exp RC\n                        | RO exp error\n        \n        nt0_if : empty\n        \n        nt1_if : empty\n        \n        while : WHILE while_condition nt0_while stmt\n        \n        while_condition : RO exp RC\n        \n        while_condition : RO error RC\n                            | error exp RC\n                            | RO exp error\n        \n        nt0_while : empty\n        \n        exp_int : INT\n                    | MINUS INT %prec UMINUS\n        \n        exp_double : DOUBLE\n                    | MINUS DOUBLE %prec UMINUS\n        \n        exp :   exp AND exp\n                | exp OR exp\n                | NOT exp\n                | exp EQ EQ exp\n                | exp MIN exp\n                | exp MAJ exp\n                | exp MAJ_EQ exp\n                | exp EQ_MAJ exp\n                | exp MIN_EQ exp\n                | exp EQ_MIN exp\n                | exp PLUS exp\n                | exp MINUS exp\n                | exp STAR exp\n                | exp DIV exp\n                | RO exp RC\n                | exp_double\n                | exp_int\n                | id\n        \n        exp : RO error RC\n        \n        id : ID\n            | ID SO INT SC\n            | ID SO ID SC\n        \n        empty :\n        '
    
_lr_action_items = {'error':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,22,23,29,30,31,33,34,35,37,38,45,46,47,48,49,50,51,53,55,57,58,59,61,63,64,65,70,71,75,88,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,134,135,],[-3,6,21,-2,-14,21,26,-16,-17,-18,-19,30,-6,-7,32,36,40,-68,-13,-15,-23,56,21,-71,62,-71,66,-24,69,92,-64,-65,-66,-47,-45,-4,-5,-20,-22,21,-37,100,21,-44,104,-28,-29,-27,-51,-48,-46,-21,129,-35,-33,-36,-34,-39,-40,-43,-41,-42,-25,-26,-70,-69,-49,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-71,-71,-52,21,-38,21,-30,-32,]),'BO':([0,2,3,4,5,6,8,9,10,11,12,20,22,23,29,30,31,34,37,51,53,55,57,58,59,63,64,70,71,75,96,97,98,99,100,101,102,103,104,105,106,107,108,128,129,131,132,133,134,135,],[-3,12,12,-2,-14,12,-16,-17,-18,-19,12,-13,-15,-23,12,12,-71,-71,-24,-4,-5,-20,-22,12,-37,12,-44,-28,-29,-27,-21,-31,-35,-33,-36,-34,-39,-40,-43,-41,-42,-25,-26,-71,-71,12,-38,12,-30,-32,]),'INT_TYPE':([0,2,4,51,53,],[-3,13,-2,-4,-5,]),'DOUBLE_TYPE':([0,2,4,51,53,],[-3,14,-2,-4,-5,]),'IF':([0,2,3,4,5,6,8,9,10,11,12,20,22,23,29,30,31,34,37,51,53,55,57,58,59,63,64,70,71,75,96,97,98,99,100,101,102,103,104,105,106,107,108,128,129,131,132,133,134,135,],[-3,15,15,-2,-14,15,-16,-17,-18,-19,15,-13,-15,-23,15,15,-71,-71,-24,-4,-5,-20,-22,15,-37,15,-44,-28,-29,-27,-21,-31,-35,-33,-36,-34,-39,-40,-43,-41,-42,-25,-26,-71,-71,15,-38,15,-30,-32,]),'WHILE':([0,2,3,4,5,6,8,9,10,11,12,20,22,23,29,30,31,34,37,51,53,55,57,58,59,63,64,70,71,75,96,97,98,99,100,101,102,103,104,105,106,107,108,128,129,131,132,133,134,135,],[-3,16,16,-2,-14,16,-16,-17,-18,-19,16,-13,-15,-23,16,16,-71,-71,-24,-4,-5,-20,-22,16,-37,16,-44,-28,-29,-27,-21,-31,-35,-33,-36,-34,-39,-40,-43,-41,-42,-25,-26,-71,-71,16,-38,16,-30,-32,]),'PRINT':([0,2,3,4,5,6,8,9,10,11,12,20,22,23,29,30,31,34,37,51,53,55,57,58,59,63,64,70,71,75,96,97,98,99,100,101,102,103,104,105,106,107,108,128,129,131,132,133,134,135,],[-3,18,18,-2,-14,18,-16,-17,-18,-19,18,-13,-15,-23,18,18,-71,-71,-24,-4,-5,-20,-22,18,-37,18,-44,-28,-29,-27,-21,-31,-35,-33,-36,-34,-39,-40,-43,-41,-42,-25,-26,-71,-71,18,-38,18,-30,-32,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,18,20,22,23,24,29,30,31,32,33,34,35,36,37,38,41,43,45,51,52,53,55,57,58,59,63,64,70,71,75,76,77,78,79,80,81,82,83,84,85,86,87,93,94,96,97,98,99,100,101,102,103,104,105,106,107,108,111,128,129,131,132,133,134,135,],[-3,19,19,-2,-14,19,28,-16,-17,-18,-19,19,-6,-7,19,-13,-15,-23,19,19,19,-71,19,19,-71,19,19,-24,19,72,19,19,-4,-71,-5,-20,-22,19,-37,19,-44,-28,-29,-27,19,19,19,19,19,19,19,19,19,19,19,19,28,-8,-21,-31,-35,-33,-36,-34,-39,-40,-43,-41,-42,-25,-26,19,-71,-71,19,-38,19,-30,-32,]),'$end':([1,3,5,8,9,10,11,20,22,23,37,55,57,70,71,75,96,97,102,107,108,134,135,],[0,-1,-14,-16,-17,-18,-19,-13,-15,-23,-24,-20,-22,-28,-29,-27,-21,-31,-39,-25,-26,-30,-32,]),'BC':([5,8,9,10,11,20,22,23,29,30,37,55,56,57,70,71,75,96,97,102,107,108,134,135,],[-14,-16,-17,-18,-19,-13,-15,-23,55,57,-24,-20,96,-22,-28,-29,-27,-21,-31,-39,-25,-26,-30,-32,]),'S':([6,17,19,21,25,26,27,28,30,39,40,42,46,47,48,49,50,56,68,69,88,89,90,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,],[23,37,-68,23,51,53,-9,-11,23,70,71,75,-64,-65,-66,-47,-45,23,107,108,-51,-48,-46,-70,-69,-49,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-10,-12,-52,]),'EQ':([6,17,19,21,30,42,46,47,48,49,50,56,60,61,65,67,68,74,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[24,38,-68,24,24,74,-64,-65,-66,-47,-45,24,74,74,74,74,74,111,74,-48,-46,74,-70,-69,74,74,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-52,]),'ELSE':([8,9,10,11,23,37,55,57,70,71,75,96,97,102,107,108,134,135,],[-16,-17,-18,-19,-23,-24,-20,-22,-28,-29,-27,-21,128,-39,-25,-26,-30,-32,]),'RO':([15,16,24,32,33,35,36,38,43,45,76,77,78,79,80,81,82,83,84,85,86,87,111,],[33,35,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'AND':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,76,-64,-65,-66,-47,-45,76,76,76,76,76,-51,-48,-46,76,-70,-69,-49,76,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-52,]),'OR':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,77,-64,-65,-66,-47,-45,77,77,77,77,77,-51,-48,-46,77,-70,-69,-49,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-52,]),'MIN':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,78,-64,-65,-66,-47,-45,78,78,78,78,78,78,-48,-46,78,-70,-69,78,78,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-52,]),'MAJ':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,79,-64,-65,-66,-47,-45,79,79,79,79,79,79,-48,-46,79,-70,-69,79,79,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-52,]),'MAJ_EQ':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,80,-64,-65,-66,-47,-45,80,80,80,80,80,80,-48,-46,80,-70,-69,80,80,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-52,]),'EQ_MAJ':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,81,-64,-65,-66,-47,-45,81,81,81,81,81,81,-48,-46,81,-70,-69,81,81,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-52,]),'MIN_EQ':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,82,-64,-65,-66,-47,-45,82,82,82,82,82,82,-48,-46,82,-70,-69,82,82,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-52,]),'EQ_MIN':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,83,-64,-65,-66,-47,-45,83,83,83,83,83,83,-48,-46,83,-70,-69,83,83,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-52,]),'PLUS':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,84,-64,-65,-66,-47,-45,84,84,84,84,84,84,-48,-46,84,-70,-69,84,84,84,84,84,84,84,84,-59,-60,-61,-62,-63,-67,84,]),'MINUS':([19,24,32,33,35,36,38,42,43,45,46,47,48,49,50,60,61,65,67,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,44,44,44,44,44,44,85,44,44,-64,-65,-66,-47,-45,85,85,85,85,85,44,44,44,44,44,44,44,44,44,44,44,44,85,-48,-46,85,-70,-69,44,85,85,85,85,85,85,85,85,-59,-60,-61,-62,-63,-67,85,]),'STAR':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,86,-64,-65,-66,-47,-45,86,86,86,86,86,86,-48,-46,86,-70,-69,86,86,86,86,86,86,86,86,86,86,-61,-62,-63,-67,86,]),'DIV':([19,42,46,47,48,49,50,60,61,65,67,68,88,89,90,91,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,87,-64,-65,-66,-47,-45,87,87,87,87,87,87,-48,-46,87,-70,-69,87,87,87,87,87,87,87,87,87,87,-61,-62,-63,-67,87,]),'RC':([19,46,47,48,49,50,60,61,62,65,66,67,88,89,90,91,92,109,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,130,],[-68,-64,-65,-66,-47,-45,98,99,101,103,105,106,-51,-48,-46,124,125,-70,-69,-49,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-67,-52,]),'SO':([19,28,],[41,54,]),'NOT':([24,32,33,35,36,38,43,45,76,77,78,79,80,81,82,83,84,85,86,87,111,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'DOUBLE':([24,32,33,35,36,38,43,44,45,76,77,78,79,80,81,82,83,84,85,86,87,111,],[49,49,49,49,49,49,49,89,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'INT':([24,32,33,35,36,38,41,43,44,45,54,76,77,78,79,80,81,82,83,84,85,86,87,111,],[50,50,50,50,50,50,73,50,90,50,95,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'CM':([25,27,28,126,127,],[52,-9,-11,-10,-12,]),'SC':([72,73,95,],[109,110,127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'decl_list':([0,],[2,]),'stmt_list':([2,12,],[3,29,]),'decl':([2,],[4,]),'stmt':([2,3,6,12,29,30,58,63,131,133,],[5,20,22,5,20,22,97,102,134,135,]),'type':([2,],[7,]),'if':([2,3,6,12,29,30,58,63,131,133,],[8,8,8,8,8,8,8,8,8,8,]),'while':([2,3,6,12,29,30,58,63,131,133,],[9,9,9,9,9,9,9,9,9,9,]),'assignment':([2,3,6,12,29,30,58,63,131,133,],[10,10,10,10,10,10,10,10,10,10,]),'print':([2,3,6,12,29,30,58,63,131,133,],[11,11,11,11,11,11,11,11,11,11,]),'id':([2,3,6,12,18,24,29,30,32,33,35,36,38,43,45,58,63,76,77,78,79,80,81,82,83,84,85,86,87,111,131,133,],[17,17,17,17,39,48,17,17,48,48,48,48,48,48,48,17,17,48,48,48,48,48,48,48,48,48,48,48,48,48,17,17,]),'var_list':([7,],[25,]),'var':([7,93,],[27,126,]),'if_condition':([15,],[31,]),'while_condition':([16,],[34,]),'exp':([24,32,33,35,36,38,43,45,76,77,78,79,80,81,82,83,84,85,86,87,111,],[42,60,61,65,67,68,88,91,112,113,114,115,116,117,118,119,120,121,122,123,130,]),'exp_double':([24,32,33,35,36,38,43,45,76,77,78,79,80,81,82,83,84,85,86,87,111,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'exp_int':([24,32,33,35,36,38,43,45,76,77,78,79,80,81,82,83,84,85,86,87,111,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'nt0_if':([31,],[58,]),'empty':([31,34,52,128,129,],[59,64,94,132,132,]),'nt0_while':([34,],[63,]),'m_copy':([52,],[93,]),'nt1_if':([128,129,],[131,133,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> decl_list stmt_list','prog',2,'p_prog','myParser.py',85),
  ('decl_list -> decl_list decl','decl_list',2,'p_decl_list','myParser.py',104),
  ('decl_list -> <empty>','decl_list',0,'p_decl_list','myParser.py',105),
  ('decl -> type var_list S','decl',3,'p_decl','myParser.py',110),
  ('decl -> type error S','decl',3,'p_decl_error','myParser.py',116),
  ('type -> INT_TYPE','type',1,'p_type','myParser.py',124),
  ('type -> DOUBLE_TYPE','type',1,'p_type','myParser.py',125),
  ('m_copy -> empty','m_copy',1,'p_m_copy','myParser.py',136),
  ('var_list -> var','var_list',1,'p_var_list','myParser.py',144),
  ('var_list -> var_list CM m_copy var','var_list',4,'p_var_list','myParser.py',145),
  ('var -> ID','var',1,'p_var','myParser.py',158),
  ('var -> ID SO INT SC','var',4,'p_var','myParser.py',159),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','myParser.py',188),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','myParser.py',189),
  ('stmt_list -> error stmt','stmt_list',2,'p_stmt_list_error','myParser.py',195),
  ('stmt -> if','stmt',1,'p_stmt','myParser.py',203),
  ('stmt -> while','stmt',1,'p_stmt','myParser.py',204),
  ('stmt -> assignment','stmt',1,'p_stmt','myParser.py',205),
  ('stmt -> print','stmt',1,'p_stmt','myParser.py',206),
  ('stmt -> BO stmt_list BC','stmt',3,'p_stmt','myParser.py',207),
  ('stmt -> BO stmt_list error BC','stmt',4,'p_stmt_error','myParser.py',212),
  ('stmt -> BO error BC','stmt',3,'p_stmt_error','myParser.py',213),
  ('stmt -> error S','stmt',2,'p_stmt_error','myParser.py',214),
  ('assignment -> id S','assignment',2,'p_assignment','myParser.py',231),
  ('assignment -> id EQ exp S','assignment',4,'p_assignment','myParser.py',232),
  ('assignment -> id EQ error S','assignment',4,'p_assignment_error','myParser.py',246),
  ('assignment -> error EQ exp S','assignment',4,'p_assignment_error','myParser.py',247),
  ('print -> PRINT id S','print',3,'p_print','myParser.py',269),
  ('print -> PRINT error S','print',3,'p_print_error','myParser.py',279),
  ('if -> IF if_condition nt0_if stmt ELSE nt1_if stmt','if',7,'p_if','myParser.py',287),
  ('if -> IF if_condition nt0_if stmt','if',4,'p_if','myParser.py',288),
  ('if -> IF if_condition nt0_if stmt error nt1_if stmt','if',7,'p_if','myParser.py',289),
  ('if_condition -> RO exp RC','if_condition',3,'p_if_condition','myParser.py',303),
  ('if_condition -> RO error RC','if_condition',3,'p_if_condition_error','myParser.py',311),
  ('if_condition -> error exp RC','if_condition',3,'p_if_condition_error','myParser.py',312),
  ('if_condition -> RO exp error','if_condition',3,'p_if_condition_error','myParser.py',313),
  ('nt0_if -> empty','nt0_if',1,'p_nt0_if','myParser.py',331),
  ('nt1_if -> empty','nt1_if',1,'p_nt1_if','myParser.py',340),
  ('while -> WHILE while_condition nt0_while stmt','while',4,'p_while','myParser.py',351),
  ('while_condition -> RO exp RC','while_condition',3,'p_while_condition','myParser.py',362),
  ('while_condition -> RO error RC','while_condition',3,'p_while_condition_error','myParser.py',370),
  ('while_condition -> error exp RC','while_condition',3,'p_while_condition_error','myParser.py',371),
  ('while_condition -> RO exp error','while_condition',3,'p_while_condition_error','myParser.py',372),
  ('nt0_while -> empty','nt0_while',1,'p_nt0_while','myParser.py',387),
  ('exp_int -> INT','exp_int',1,'p_exp_int','myParser.py',400),
  ('exp_int -> MINUS INT','exp_int',2,'p_exp_int','myParser.py',401),
  ('exp_double -> DOUBLE','exp_double',1,'p_exp_double','myParser.py',412),
  ('exp_double -> MINUS DOUBLE','exp_double',2,'p_exp_double','myParser.py',413),
  ('exp -> exp AND exp','exp',3,'p_exp','myParser.py',425),
  ('exp -> exp OR exp','exp',3,'p_exp','myParser.py',426),
  ('exp -> NOT exp','exp',2,'p_exp','myParser.py',427),
  ('exp -> exp EQ EQ exp','exp',4,'p_exp','myParser.py',428),
  ('exp -> exp MIN exp','exp',3,'p_exp','myParser.py',429),
  ('exp -> exp MAJ exp','exp',3,'p_exp','myParser.py',430),
  ('exp -> exp MAJ_EQ exp','exp',3,'p_exp','myParser.py',431),
  ('exp -> exp EQ_MAJ exp','exp',3,'p_exp','myParser.py',432),
  ('exp -> exp MIN_EQ exp','exp',3,'p_exp','myParser.py',433),
  ('exp -> exp EQ_MIN exp','exp',3,'p_exp','myParser.py',434),
  ('exp -> exp PLUS exp','exp',3,'p_exp','myParser.py',435),
  ('exp -> exp MINUS exp','exp',3,'p_exp','myParser.py',436),
  ('exp -> exp STAR exp','exp',3,'p_exp','myParser.py',437),
  ('exp -> exp DIV exp','exp',3,'p_exp','myParser.py',438),
  ('exp -> RO exp RC','exp',3,'p_exp','myParser.py',439),
  ('exp -> exp_double','exp',1,'p_exp','myParser.py',440),
  ('exp -> exp_int','exp',1,'p_exp','myParser.py',441),
  ('exp -> id','exp',1,'p_exp','myParser.py',442),
  ('exp -> RO error RC','exp',3,'p_exp_error','myParser.py',491),
  ('id -> ID','id',1,'p_id','myParser.py',498),
  ('id -> ID SO INT SC','id',4,'p_id','myParser.py',499),
  ('id -> ID SO ID SC','id',4,'p_id','myParser.py',500),
  ('empty -> <empty>','empty',0,'p_empty','myParser.py',517),
]

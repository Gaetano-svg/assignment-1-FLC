Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    EMPTY
    comm
    newline
    ws

Grammar

Rule 0     S' -> prog
Rule 1     prog -> decl_list stmt_list
Rule 2     decl_list -> decl_list decl
Rule 3     decl_list -> <empty>
Rule 4     decl -> type var_list S
Rule 5     decl -> type error S
Rule 6     decl -> type var_list error
Rule 7     type -> INT_TYPE
Rule 8     type -> DOUBLE_TYPE
Rule 9     m_copy -> empty
Rule 10    var_list -> var
Rule 11    var_list -> var_list CM m_copy var
Rule 12    var -> ID
Rule 13    var -> ID SO INT SC
Rule 14    stmt_list -> stmt_list stmt
Rule 15    stmt_list -> stmt
Rule 16    stmt_list -> error stmt
Rule 17    stmt -> if
Rule 18    stmt -> while
Rule 19    stmt -> assignment
Rule 20    stmt -> print
Rule 21    stmt -> BO stmt_list BC
Rule 22    stmt -> BO stmt_list error BC
Rule 23    stmt -> BO error BC
Rule 24    stmt -> error S
Rule 25    assignment -> id S
Rule 26    assignment -> id EQ exp S
Rule 27    assignment -> id EQ error S
Rule 28    assignment -> error EQ exp S
Rule 29    assignment -> id EQ exp error
Rule 30    print -> PRINT id S
Rule 31    print -> PRINT error S
Rule 32    if -> IF if_condition nt0_if stmt ELSE nt1_if stmt
Rule 33    if -> IF if_condition nt0_if stmt
Rule 34    if -> IF if_condition nt0_if stmt error nt1_if stmt
Rule 35    if_condition -> RO exp RC
Rule 36    if_condition -> RO error RC
Rule 37    if_condition -> error exp RC
Rule 38    if_condition -> RO exp error
Rule 39    nt0_if -> empty
Rule 40    nt1_if -> empty
Rule 41    while -> WHILE while_condition nt0_while stmt
Rule 42    while_condition -> RO exp RC
Rule 43    while_condition -> RO error RC
Rule 44    while_condition -> error exp RC
Rule 45    while_condition -> RO exp error
Rule 46    nt0_while -> empty
Rule 47    exp_int -> INT
Rule 48    exp_int -> MINUS INT
Rule 49    exp_double -> DOUBLE
Rule 50    exp_double -> MINUS DOUBLE
Rule 51    exp -> exp AND exp
Rule 52    exp -> exp OR exp
Rule 53    exp -> NOT exp
Rule 54    exp -> exp EQ EQ exp
Rule 55    exp -> exp MIN exp
Rule 56    exp -> exp MAJ exp
Rule 57    exp -> exp MAJ_EQ exp
Rule 58    exp -> exp EQ_MAJ exp
Rule 59    exp -> exp MIN_EQ exp
Rule 60    exp -> exp EQ_MIN exp
Rule 61    exp -> exp PLUS exp
Rule 62    exp -> exp MINUS exp
Rule 63    exp -> exp STAR exp
Rule 64    exp -> exp DIV exp
Rule 65    exp -> RO exp RC
Rule 66    exp -> exp_double
Rule 67    exp -> exp_int
Rule 68    exp -> id
Rule 69    exp -> RO error RC
Rule 70    id -> ID
Rule 71    id -> ID SO INT SC
Rule 72    id -> ID SO ID SC
Rule 73    empty -> <empty>

Terminals, with rules where they appear

AND                  : 51
BC                   : 21 22 23
BO                   : 21 22 23
CM                   : 11
DIV                  : 64
DOUBLE               : 49 50
DOUBLE_TYPE          : 8
ELSE                 : 32
EMPTY                : 
EQ                   : 26 27 28 29 54 54
EQ_MAJ               : 58
EQ_MIN               : 60
ID                   : 12 13 70 71 72 72
IF                   : 32 33 34
INT                  : 13 47 48 71
INT_TYPE             : 7
MAJ                  : 56
MAJ_EQ               : 57
MIN                  : 55
MINUS                : 48 50 62
MIN_EQ               : 59
NOT                  : 53
OR                   : 52
PLUS                 : 61
PRINT                : 30 31
RC                   : 35 36 37 42 43 44 65 69
RO                   : 35 36 38 42 43 45 65 69
S                    : 4 5 24 25 26 27 28 30 31
SC                   : 13 71 72
SO                   : 13 71 72
STAR                 : 63
WHILE                : 41
comm                 : 
error                : 5 6 16 22 23 24 27 28 29 31 34 36 37 38 43 44 45 69
newline              : 
ws                   : 

Nonterminals, with rules where they appear

assignment           : 19
decl                 : 2
decl_list            : 1 2
empty                : 9 39 40 46
exp                  : 26 28 29 35 37 38 42 44 45 51 51 52 52 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65
exp_double           : 66
exp_int              : 67
id                   : 25 26 27 29 30 68
if                   : 17
if_condition         : 32 33 34
m_copy               : 11
nt0_if               : 32 33 34
nt0_while            : 41
nt1_if               : 32 34
print                : 20
prog                 : 0
stmt                 : 14 15 16 32 32 33 34 34 41
stmt_list            : 1 14 21 22
type                 : 4 5 6
var                  : 10 11
var_list             : 4 6 11
while                : 18
while_condition      : 41

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . decl_list stmt_list
    (2) decl_list -> . decl_list decl
    (3) decl_list -> .

    error           reduce using rule 3 (decl_list -> .)
    BO              reduce using rule 3 (decl_list -> .)
    INT_TYPE        reduce using rule 3 (decl_list -> .)
    DOUBLE_TYPE     reduce using rule 3 (decl_list -> .)
    IF              reduce using rule 3 (decl_list -> .)
    WHILE           reduce using rule 3 (decl_list -> .)
    PRINT           reduce using rule 3 (decl_list -> .)
    ID              reduce using rule 3 (decl_list -> .)

    prog                           shift and go to state 1
    decl_list                      shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> decl_list . stmt_list
    (2) decl_list -> decl_list . decl
    (14) stmt_list -> . stmt_list stmt
    (15) stmt_list -> . stmt
    (16) stmt_list -> . error stmt
    (4) decl -> . type var_list S
    (5) decl -> . type error S
    (6) decl -> . type var_list error
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (22) stmt -> . BO stmt_list error BC
    (23) stmt -> . BO error BC
    (24) stmt -> . error S
    (7) type -> . INT_TYPE
    (8) type -> . DOUBLE_TYPE
    (32) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> . IF if_condition nt0_if stmt
    (34) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (41) while -> . WHILE while_condition nt0_while stmt
    (25) assignment -> . id S
    (26) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) assignment -> . id EQ exp error
    (30) print -> . PRINT id S
    (31) print -> . PRINT error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    error           shift and go to state 6
    BO              shift and go to state 12
    INT_TYPE        shift and go to state 13
    DOUBLE_TYPE     shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt_list                      shift and go to state 3
    decl                           shift and go to state 4
    stmt                           shift and go to state 5
    type                           shift and go to state 7
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 3

    (1) prog -> decl_list stmt_list .
    (14) stmt_list -> stmt_list . stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (22) stmt -> . BO stmt_list error BC
    (23) stmt -> . BO error BC
    (24) stmt -> . error S
    (32) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> . IF if_condition nt0_if stmt
    (34) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (41) while -> . WHILE while_condition nt0_while stmt
    (25) assignment -> . id S
    (26) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) assignment -> . id EQ exp error
    (30) print -> . PRINT id S
    (31) print -> . PRINT error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    $end            reduce using rule 1 (prog -> decl_list stmt_list .)
    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 20
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 4

    (2) decl_list -> decl_list decl .

    error           reduce using rule 2 (decl_list -> decl_list decl .)
    BO              reduce using rule 2 (decl_list -> decl_list decl .)
    INT_TYPE        reduce using rule 2 (decl_list -> decl_list decl .)
    DOUBLE_TYPE     reduce using rule 2 (decl_list -> decl_list decl .)
    IF              reduce using rule 2 (decl_list -> decl_list decl .)
    WHILE           reduce using rule 2 (decl_list -> decl_list decl .)
    PRINT           reduce using rule 2 (decl_list -> decl_list decl .)
    ID              reduce using rule 2 (decl_list -> decl_list decl .)


state 5

    (15) stmt_list -> stmt .

    BO              reduce using rule 15 (stmt_list -> stmt .)
    error           reduce using rule 15 (stmt_list -> stmt .)
    IF              reduce using rule 15 (stmt_list -> stmt .)
    WHILE           reduce using rule 15 (stmt_list -> stmt .)
    PRINT           reduce using rule 15 (stmt_list -> stmt .)
    ID              reduce using rule 15 (stmt_list -> stmt .)
    $end            reduce using rule 15 (stmt_list -> stmt .)
    BC              reduce using rule 15 (stmt_list -> stmt .)


state 6

    (16) stmt_list -> error . stmt
    (24) stmt -> error . S
    (28) assignment -> error . EQ exp S
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (22) stmt -> . BO stmt_list error BC
    (23) stmt -> . BO error BC
    (24) stmt -> . error S
    (32) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> . IF if_condition nt0_if stmt
    (34) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (41) while -> . WHILE while_condition nt0_while stmt
    (25) assignment -> . id S
    (26) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) assignment -> . id EQ exp error
    (30) print -> . PRINT id S
    (31) print -> . PRINT error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    S               shift and go to state 23
    EQ              shift and go to state 24
    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 22
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 7

    (4) decl -> type . var_list S
    (5) decl -> type . error S
    (6) decl -> type . var_list error
    (10) var_list -> . var
    (11) var_list -> . var_list CM m_copy var
    (12) var -> . ID
    (13) var -> . ID SO INT SC

    error           shift and go to state 26
    ID              shift and go to state 28

    var_list                       shift and go to state 25
    var                            shift and go to state 27

state 8

    (17) stmt -> if .

    BO              reduce using rule 17 (stmt -> if .)
    error           reduce using rule 17 (stmt -> if .)
    IF              reduce using rule 17 (stmt -> if .)
    WHILE           reduce using rule 17 (stmt -> if .)
    PRINT           reduce using rule 17 (stmt -> if .)
    ID              reduce using rule 17 (stmt -> if .)
    $end            reduce using rule 17 (stmt -> if .)
    BC              reduce using rule 17 (stmt -> if .)
    ELSE            reduce using rule 17 (stmt -> if .)


state 9

    (18) stmt -> while .

    BO              reduce using rule 18 (stmt -> while .)
    error           reduce using rule 18 (stmt -> while .)
    IF              reduce using rule 18 (stmt -> while .)
    WHILE           reduce using rule 18 (stmt -> while .)
    PRINT           reduce using rule 18 (stmt -> while .)
    ID              reduce using rule 18 (stmt -> while .)
    $end            reduce using rule 18 (stmt -> while .)
    BC              reduce using rule 18 (stmt -> while .)
    ELSE            reduce using rule 18 (stmt -> while .)


state 10

    (19) stmt -> assignment .

    BO              reduce using rule 19 (stmt -> assignment .)
    error           reduce using rule 19 (stmt -> assignment .)
    IF              reduce using rule 19 (stmt -> assignment .)
    WHILE           reduce using rule 19 (stmt -> assignment .)
    PRINT           reduce using rule 19 (stmt -> assignment .)
    ID              reduce using rule 19 (stmt -> assignment .)
    $end            reduce using rule 19 (stmt -> assignment .)
    BC              reduce using rule 19 (stmt -> assignment .)
    ELSE            reduce using rule 19 (stmt -> assignment .)


state 11

    (20) stmt -> print .

    BO              reduce using rule 20 (stmt -> print .)
    error           reduce using rule 20 (stmt -> print .)
    IF              reduce using rule 20 (stmt -> print .)
    WHILE           reduce using rule 20 (stmt -> print .)
    PRINT           reduce using rule 20 (stmt -> print .)
    ID              reduce using rule 20 (stmt -> print .)
    $end            reduce using rule 20 (stmt -> print .)
    BC              reduce using rule 20 (stmt -> print .)
    ELSE            reduce using rule 20 (stmt -> print .)


state 12

    (21) stmt -> BO . stmt_list BC
    (22) stmt -> BO . stmt_list error BC
    (23) stmt -> BO . error BC
    (14) stmt_list -> . stmt_list stmt
    (15) stmt_list -> . stmt
    (16) stmt_list -> . error stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (22) stmt -> . BO stmt_list error BC
    (23) stmt -> . BO error BC
    (24) stmt -> . error S
    (32) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> . IF if_condition nt0_if stmt
    (34) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (41) while -> . WHILE while_condition nt0_while stmt
    (25) assignment -> . id S
    (26) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) assignment -> . id EQ exp error
    (30) print -> . PRINT id S
    (31) print -> . PRINT error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    error           shift and go to state 30
    BO              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt_list                      shift and go to state 29
    stmt                           shift and go to state 5
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 13

    (7) type -> INT_TYPE .

    error           reduce using rule 7 (type -> INT_TYPE .)
    ID              reduce using rule 7 (type -> INT_TYPE .)


state 14

    (8) type -> DOUBLE_TYPE .

    error           reduce using rule 8 (type -> DOUBLE_TYPE .)
    ID              reduce using rule 8 (type -> DOUBLE_TYPE .)


state 15

    (32) if -> IF . if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> IF . if_condition nt0_if stmt
    (34) if -> IF . if_condition nt0_if stmt error nt1_if stmt
    (35) if_condition -> . RO exp RC
    (36) if_condition -> . RO error RC
    (37) if_condition -> . error exp RC
    (38) if_condition -> . RO exp error

    RO              shift and go to state 33
    error           shift and go to state 32

    if_condition                   shift and go to state 31

state 16

    (41) while -> WHILE . while_condition nt0_while stmt
    (42) while_condition -> . RO exp RC
    (43) while_condition -> . RO error RC
    (44) while_condition -> . error exp RC
    (45) while_condition -> . RO exp error

    RO              shift and go to state 35
    error           shift and go to state 36

    while_condition                shift and go to state 34

state 17

    (25) assignment -> id . S
    (26) assignment -> id . EQ exp S
    (27) assignment -> id . EQ error S
    (29) assignment -> id . EQ exp error

    S               shift and go to state 37
    EQ              shift and go to state 38


state 18

    (30) print -> PRINT . id S
    (31) print -> PRINT . error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    error           shift and go to state 40
    ID              shift and go to state 19

    id                             shift and go to state 39

state 19

    (70) id -> ID .
    (71) id -> ID . SO INT SC
    (72) id -> ID . SO ID SC

    S               reduce using rule 70 (id -> ID .)
    EQ              reduce using rule 70 (id -> ID .)
    AND             reduce using rule 70 (id -> ID .)
    OR              reduce using rule 70 (id -> ID .)
    MIN             reduce using rule 70 (id -> ID .)
    MAJ             reduce using rule 70 (id -> ID .)
    MAJ_EQ          reduce using rule 70 (id -> ID .)
    EQ_MAJ          reduce using rule 70 (id -> ID .)
    MIN_EQ          reduce using rule 70 (id -> ID .)
    EQ_MIN          reduce using rule 70 (id -> ID .)
    PLUS            reduce using rule 70 (id -> ID .)
    MINUS           reduce using rule 70 (id -> ID .)
    STAR            reduce using rule 70 (id -> ID .)
    DIV             reduce using rule 70 (id -> ID .)
    RC              reduce using rule 70 (id -> ID .)
    error           reduce using rule 70 (id -> ID .)
    SO              shift and go to state 41


state 20

    (14) stmt_list -> stmt_list stmt .

    BO              reduce using rule 14 (stmt_list -> stmt_list stmt .)
    error           reduce using rule 14 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 14 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 14 (stmt_list -> stmt_list stmt .)
    PRINT           reduce using rule 14 (stmt_list -> stmt_list stmt .)
    ID              reduce using rule 14 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 14 (stmt_list -> stmt_list stmt .)
    BC              reduce using rule 14 (stmt_list -> stmt_list stmt .)


state 21

    (24) stmt -> error . S
    (28) assignment -> error . EQ exp S

    S               shift and go to state 23
    EQ              shift and go to state 24


state 22

    (16) stmt_list -> error stmt .

    BO              reduce using rule 16 (stmt_list -> error stmt .)
    error           reduce using rule 16 (stmt_list -> error stmt .)
    IF              reduce using rule 16 (stmt_list -> error stmt .)
    WHILE           reduce using rule 16 (stmt_list -> error stmt .)
    PRINT           reduce using rule 16 (stmt_list -> error stmt .)
    ID              reduce using rule 16 (stmt_list -> error stmt .)
    $end            reduce using rule 16 (stmt_list -> error stmt .)
    BC              reduce using rule 16 (stmt_list -> error stmt .)


state 23

    (24) stmt -> error S .

    BO              reduce using rule 24 (stmt -> error S .)
    error           reduce using rule 24 (stmt -> error S .)
    IF              reduce using rule 24 (stmt -> error S .)
    WHILE           reduce using rule 24 (stmt -> error S .)
    PRINT           reduce using rule 24 (stmt -> error S .)
    ID              reduce using rule 24 (stmt -> error S .)
    $end            reduce using rule 24 (stmt -> error S .)
    BC              reduce using rule 24 (stmt -> error S .)
    ELSE            reduce using rule 24 (stmt -> error S .)


state 24

    (28) assignment -> error EQ . exp S
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 42
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 25

    (4) decl -> type var_list . S
    (6) decl -> type var_list . error
    (11) var_list -> var_list . CM m_copy var

    S               shift and go to state 51
    error           shift and go to state 52
    CM              shift and go to state 53


state 26

    (5) decl -> type error . S

    S               shift and go to state 54


state 27

    (10) var_list -> var .

    S               reduce using rule 10 (var_list -> var .)
    error           reduce using rule 10 (var_list -> var .)
    CM              reduce using rule 10 (var_list -> var .)


state 28

    (12) var -> ID .
    (13) var -> ID . SO INT SC

    S               reduce using rule 12 (var -> ID .)
    error           reduce using rule 12 (var -> ID .)
    CM              reduce using rule 12 (var -> ID .)
    SO              shift and go to state 55


state 29

    (21) stmt -> BO stmt_list . BC
    (22) stmt -> BO stmt_list . error BC
    (14) stmt_list -> stmt_list . stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (22) stmt -> . BO stmt_list error BC
    (23) stmt -> . BO error BC
    (24) stmt -> . error S
    (32) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> . IF if_condition nt0_if stmt
    (34) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (41) while -> . WHILE while_condition nt0_while stmt
    (25) assignment -> . id S
    (26) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) assignment -> . id EQ exp error
    (30) print -> . PRINT id S
    (31) print -> . PRINT error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    BC              shift and go to state 56
    error           shift and go to state 57
    BO              shift and go to state 12
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 20
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 30

    (23) stmt -> BO error . BC
    (16) stmt_list -> error . stmt
    (24) stmt -> error . S
    (28) assignment -> error . EQ exp S
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (22) stmt -> . BO stmt_list error BC
    (23) stmt -> . BO error BC
    (24) stmt -> . error S
    (32) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> . IF if_condition nt0_if stmt
    (34) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (41) while -> . WHILE while_condition nt0_while stmt
    (25) assignment -> . id S
    (26) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) assignment -> . id EQ exp error
    (30) print -> . PRINT id S
    (31) print -> . PRINT error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    BC              shift and go to state 58
    S               shift and go to state 23
    EQ              shift and go to state 24
    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 22
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 31

    (32) if -> IF if_condition . nt0_if stmt ELSE nt1_if stmt
    (33) if -> IF if_condition . nt0_if stmt
    (34) if -> IF if_condition . nt0_if stmt error nt1_if stmt
    (39) nt0_if -> . empty
    (73) empty -> .

    BO              reduce using rule 73 (empty -> .)
    error           reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)

    nt0_if                         shift and go to state 59
    empty                          shift and go to state 60

state 32

    (37) if_condition -> error . exp RC
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 61
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 33

    (35) if_condition -> RO . exp RC
    (36) if_condition -> RO . error RC
    (38) if_condition -> RO . exp error
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    error           shift and go to state 63
    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 62
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 34

    (41) while -> WHILE while_condition . nt0_while stmt
    (46) nt0_while -> . empty
    (73) empty -> .

    BO              reduce using rule 73 (empty -> .)
    error           reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)

    nt0_while                      shift and go to state 64
    empty                          shift and go to state 65

state 35

    (42) while_condition -> RO . exp RC
    (43) while_condition -> RO . error RC
    (45) while_condition -> RO . exp error
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    error           shift and go to state 67
    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 66
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 36

    (44) while_condition -> error . exp RC
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 68
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 37

    (25) assignment -> id S .

    BO              reduce using rule 25 (assignment -> id S .)
    error           reduce using rule 25 (assignment -> id S .)
    IF              reduce using rule 25 (assignment -> id S .)
    WHILE           reduce using rule 25 (assignment -> id S .)
    PRINT           reduce using rule 25 (assignment -> id S .)
    ID              reduce using rule 25 (assignment -> id S .)
    $end            reduce using rule 25 (assignment -> id S .)
    BC              reduce using rule 25 (assignment -> id S .)
    ELSE            reduce using rule 25 (assignment -> id S .)


state 38

    (26) assignment -> id EQ . exp S
    (27) assignment -> id EQ . error S
    (29) assignment -> id EQ . exp error
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    error           shift and go to state 70
    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    id                             shift and go to state 48
    exp                            shift and go to state 69
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47

state 39

    (30) print -> PRINT id . S

    S               shift and go to state 71


state 40

    (31) print -> PRINT error . S

    S               shift and go to state 72


state 41

    (71) id -> ID SO . INT SC
    (72) id -> ID SO . ID SC

    INT             shift and go to state 74
    ID              shift and go to state 73


state 42

    (28) assignment -> error EQ exp . S
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               shift and go to state 76
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 75
    MIN             shift and go to state 79
    MAJ             shift and go to state 80
    MAJ_EQ          shift and go to state 81
    EQ_MAJ          shift and go to state 82
    MIN_EQ          shift and go to state 83
    EQ_MIN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88


state 43

    (53) exp -> NOT . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 89
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 44

    (50) exp_double -> MINUS . DOUBLE
    (48) exp_int -> MINUS . INT

    DOUBLE          shift and go to state 90
    INT             shift and go to state 91


state 45

    (65) exp -> RO . exp RC
    (69) exp -> RO . error RC
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    error           shift and go to state 93
    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 92
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 46

    (66) exp -> exp_double .

    S               reduce using rule 66 (exp -> exp_double .)
    AND             reduce using rule 66 (exp -> exp_double .)
    OR              reduce using rule 66 (exp -> exp_double .)
    EQ              reduce using rule 66 (exp -> exp_double .)
    MIN             reduce using rule 66 (exp -> exp_double .)
    MAJ             reduce using rule 66 (exp -> exp_double .)
    MAJ_EQ          reduce using rule 66 (exp -> exp_double .)
    EQ_MAJ          reduce using rule 66 (exp -> exp_double .)
    MIN_EQ          reduce using rule 66 (exp -> exp_double .)
    EQ_MIN          reduce using rule 66 (exp -> exp_double .)
    PLUS            reduce using rule 66 (exp -> exp_double .)
    MINUS           reduce using rule 66 (exp -> exp_double .)
    STAR            reduce using rule 66 (exp -> exp_double .)
    DIV             reduce using rule 66 (exp -> exp_double .)
    RC              reduce using rule 66 (exp -> exp_double .)
    error           reduce using rule 66 (exp -> exp_double .)


state 47

    (67) exp -> exp_int .

    S               reduce using rule 67 (exp -> exp_int .)
    AND             reduce using rule 67 (exp -> exp_int .)
    OR              reduce using rule 67 (exp -> exp_int .)
    EQ              reduce using rule 67 (exp -> exp_int .)
    MIN             reduce using rule 67 (exp -> exp_int .)
    MAJ             reduce using rule 67 (exp -> exp_int .)
    MAJ_EQ          reduce using rule 67 (exp -> exp_int .)
    EQ_MAJ          reduce using rule 67 (exp -> exp_int .)
    MIN_EQ          reduce using rule 67 (exp -> exp_int .)
    EQ_MIN          reduce using rule 67 (exp -> exp_int .)
    PLUS            reduce using rule 67 (exp -> exp_int .)
    MINUS           reduce using rule 67 (exp -> exp_int .)
    STAR            reduce using rule 67 (exp -> exp_int .)
    DIV             reduce using rule 67 (exp -> exp_int .)
    RC              reduce using rule 67 (exp -> exp_int .)
    error           reduce using rule 67 (exp -> exp_int .)


state 48

    (68) exp -> id .

    S               reduce using rule 68 (exp -> id .)
    AND             reduce using rule 68 (exp -> id .)
    OR              reduce using rule 68 (exp -> id .)
    EQ              reduce using rule 68 (exp -> id .)
    MIN             reduce using rule 68 (exp -> id .)
    MAJ             reduce using rule 68 (exp -> id .)
    MAJ_EQ          reduce using rule 68 (exp -> id .)
    EQ_MAJ          reduce using rule 68 (exp -> id .)
    MIN_EQ          reduce using rule 68 (exp -> id .)
    EQ_MIN          reduce using rule 68 (exp -> id .)
    PLUS            reduce using rule 68 (exp -> id .)
    MINUS           reduce using rule 68 (exp -> id .)
    STAR            reduce using rule 68 (exp -> id .)
    DIV             reduce using rule 68 (exp -> id .)
    RC              reduce using rule 68 (exp -> id .)
    error           reduce using rule 68 (exp -> id .)


state 49

    (49) exp_double -> DOUBLE .

    S               reduce using rule 49 (exp_double -> DOUBLE .)
    AND             reduce using rule 49 (exp_double -> DOUBLE .)
    OR              reduce using rule 49 (exp_double -> DOUBLE .)
    EQ              reduce using rule 49 (exp_double -> DOUBLE .)
    MIN             reduce using rule 49 (exp_double -> DOUBLE .)
    MAJ             reduce using rule 49 (exp_double -> DOUBLE .)
    MAJ_EQ          reduce using rule 49 (exp_double -> DOUBLE .)
    EQ_MAJ          reduce using rule 49 (exp_double -> DOUBLE .)
    MIN_EQ          reduce using rule 49 (exp_double -> DOUBLE .)
    EQ_MIN          reduce using rule 49 (exp_double -> DOUBLE .)
    PLUS            reduce using rule 49 (exp_double -> DOUBLE .)
    MINUS           reduce using rule 49 (exp_double -> DOUBLE .)
    STAR            reduce using rule 49 (exp_double -> DOUBLE .)
    DIV             reduce using rule 49 (exp_double -> DOUBLE .)
    RC              reduce using rule 49 (exp_double -> DOUBLE .)
    error           reduce using rule 49 (exp_double -> DOUBLE .)


state 50

    (47) exp_int -> INT .

    S               reduce using rule 47 (exp_int -> INT .)
    AND             reduce using rule 47 (exp_int -> INT .)
    OR              reduce using rule 47 (exp_int -> INT .)
    EQ              reduce using rule 47 (exp_int -> INT .)
    MIN             reduce using rule 47 (exp_int -> INT .)
    MAJ             reduce using rule 47 (exp_int -> INT .)
    MAJ_EQ          reduce using rule 47 (exp_int -> INT .)
    EQ_MAJ          reduce using rule 47 (exp_int -> INT .)
    MIN_EQ          reduce using rule 47 (exp_int -> INT .)
    EQ_MIN          reduce using rule 47 (exp_int -> INT .)
    PLUS            reduce using rule 47 (exp_int -> INT .)
    MINUS           reduce using rule 47 (exp_int -> INT .)
    STAR            reduce using rule 47 (exp_int -> INT .)
    DIV             reduce using rule 47 (exp_int -> INT .)
    RC              reduce using rule 47 (exp_int -> INT .)
    error           reduce using rule 47 (exp_int -> INT .)


state 51

    (4) decl -> type var_list S .

    error           reduce using rule 4 (decl -> type var_list S .)
    BO              reduce using rule 4 (decl -> type var_list S .)
    INT_TYPE        reduce using rule 4 (decl -> type var_list S .)
    DOUBLE_TYPE     reduce using rule 4 (decl -> type var_list S .)
    IF              reduce using rule 4 (decl -> type var_list S .)
    WHILE           reduce using rule 4 (decl -> type var_list S .)
    PRINT           reduce using rule 4 (decl -> type var_list S .)
    ID              reduce using rule 4 (decl -> type var_list S .)


state 52

    (6) decl -> type var_list error .

    error           reduce using rule 6 (decl -> type var_list error .)
    BO              reduce using rule 6 (decl -> type var_list error .)
    INT_TYPE        reduce using rule 6 (decl -> type var_list error .)
    DOUBLE_TYPE     reduce using rule 6 (decl -> type var_list error .)
    IF              reduce using rule 6 (decl -> type var_list error .)
    WHILE           reduce using rule 6 (decl -> type var_list error .)
    PRINT           reduce using rule 6 (decl -> type var_list error .)
    ID              reduce using rule 6 (decl -> type var_list error .)


state 53

    (11) var_list -> var_list CM . m_copy var
    (9) m_copy -> . empty
    (73) empty -> .

    ID              reduce using rule 73 (empty -> .)

    m_copy                         shift and go to state 94
    empty                          shift and go to state 95

state 54

    (5) decl -> type error S .

    error           reduce using rule 5 (decl -> type error S .)
    BO              reduce using rule 5 (decl -> type error S .)
    INT_TYPE        reduce using rule 5 (decl -> type error S .)
    DOUBLE_TYPE     reduce using rule 5 (decl -> type error S .)
    IF              reduce using rule 5 (decl -> type error S .)
    WHILE           reduce using rule 5 (decl -> type error S .)
    PRINT           reduce using rule 5 (decl -> type error S .)
    ID              reduce using rule 5 (decl -> type error S .)


state 55

    (13) var -> ID SO . INT SC

    INT             shift and go to state 96


state 56

    (21) stmt -> BO stmt_list BC .

    BO              reduce using rule 21 (stmt -> BO stmt_list BC .)
    error           reduce using rule 21 (stmt -> BO stmt_list BC .)
    IF              reduce using rule 21 (stmt -> BO stmt_list BC .)
    WHILE           reduce using rule 21 (stmt -> BO stmt_list BC .)
    PRINT           reduce using rule 21 (stmt -> BO stmt_list BC .)
    ID              reduce using rule 21 (stmt -> BO stmt_list BC .)
    $end            reduce using rule 21 (stmt -> BO stmt_list BC .)
    BC              reduce using rule 21 (stmt -> BO stmt_list BC .)
    ELSE            reduce using rule 21 (stmt -> BO stmt_list BC .)


state 57

    (22) stmt -> BO stmt_list error . BC
    (24) stmt -> error . S
    (28) assignment -> error . EQ exp S

    BC              shift and go to state 97
    S               shift and go to state 23
    EQ              shift and go to state 24


state 58

    (23) stmt -> BO error BC .

    BO              reduce using rule 23 (stmt -> BO error BC .)
    error           reduce using rule 23 (stmt -> BO error BC .)
    IF              reduce using rule 23 (stmt -> BO error BC .)
    WHILE           reduce using rule 23 (stmt -> BO error BC .)
    PRINT           reduce using rule 23 (stmt -> BO error BC .)
    ID              reduce using rule 23 (stmt -> BO error BC .)
    $end            reduce using rule 23 (stmt -> BO error BC .)
    BC              reduce using rule 23 (stmt -> BO error BC .)
    ELSE            reduce using rule 23 (stmt -> BO error BC .)


state 59

    (32) if -> IF if_condition nt0_if . stmt ELSE nt1_if stmt
    (33) if -> IF if_condition nt0_if . stmt
    (34) if -> IF if_condition nt0_if . stmt error nt1_if stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (22) stmt -> . BO stmt_list error BC
    (23) stmt -> . BO error BC
    (24) stmt -> . error S
    (32) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> . IF if_condition nt0_if stmt
    (34) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (41) while -> . WHILE while_condition nt0_while stmt
    (25) assignment -> . id S
    (26) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) assignment -> . id EQ exp error
    (30) print -> . PRINT id S
    (31) print -> . PRINT error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 98
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 60

    (39) nt0_if -> empty .

    BO              reduce using rule 39 (nt0_if -> empty .)
    error           reduce using rule 39 (nt0_if -> empty .)
    IF              reduce using rule 39 (nt0_if -> empty .)
    WHILE           reduce using rule 39 (nt0_if -> empty .)
    PRINT           reduce using rule 39 (nt0_if -> empty .)
    ID              reduce using rule 39 (nt0_if -> empty .)


state 61

    (37) if_condition -> error exp . RC
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    RC              shift and go to state 99
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 75
    MIN             shift and go to state 79
    MAJ             shift and go to state 80
    MAJ_EQ          shift and go to state 81
    EQ_MAJ          shift and go to state 82
    MIN_EQ          shift and go to state 83
    EQ_MIN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88


state 62

    (35) if_condition -> RO exp . RC
    (38) if_condition -> RO exp . error
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    RC              shift and go to state 100
    error           shift and go to state 101
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 75
    MIN             shift and go to state 79
    MAJ             shift and go to state 80
    MAJ_EQ          shift and go to state 81
    EQ_MAJ          shift and go to state 82
    MIN_EQ          shift and go to state 83
    EQ_MIN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88


state 63

    (36) if_condition -> RO error . RC

    RC              shift and go to state 102


state 64

    (41) while -> WHILE while_condition nt0_while . stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (22) stmt -> . BO stmt_list error BC
    (23) stmt -> . BO error BC
    (24) stmt -> . error S
    (32) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> . IF if_condition nt0_if stmt
    (34) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (41) while -> . WHILE while_condition nt0_while stmt
    (25) assignment -> . id S
    (26) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) assignment -> . id EQ exp error
    (30) print -> . PRINT id S
    (31) print -> . PRINT error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 103
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 65

    (46) nt0_while -> empty .

    BO              reduce using rule 46 (nt0_while -> empty .)
    error           reduce using rule 46 (nt0_while -> empty .)
    IF              reduce using rule 46 (nt0_while -> empty .)
    WHILE           reduce using rule 46 (nt0_while -> empty .)
    PRINT           reduce using rule 46 (nt0_while -> empty .)
    ID              reduce using rule 46 (nt0_while -> empty .)


state 66

    (42) while_condition -> RO exp . RC
    (45) while_condition -> RO exp . error
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    RC              shift and go to state 104
    error           shift and go to state 105
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 75
    MIN             shift and go to state 79
    MAJ             shift and go to state 80
    MAJ_EQ          shift and go to state 81
    EQ_MAJ          shift and go to state 82
    MIN_EQ          shift and go to state 83
    EQ_MIN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88


state 67

    (43) while_condition -> RO error . RC

    RC              shift and go to state 106


state 68

    (44) while_condition -> error exp . RC
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    RC              shift and go to state 107
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 75
    MIN             shift and go to state 79
    MAJ             shift and go to state 80
    MAJ_EQ          shift and go to state 81
    EQ_MAJ          shift and go to state 82
    MIN_EQ          shift and go to state 83
    EQ_MIN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88


state 69

    (26) assignment -> id EQ exp . S
    (29) assignment -> id EQ exp . error
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               shift and go to state 108
    error           shift and go to state 109
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 75
    MIN             shift and go to state 79
    MAJ             shift and go to state 80
    MAJ_EQ          shift and go to state 81
    EQ_MAJ          shift and go to state 82
    MIN_EQ          shift and go to state 83
    EQ_MIN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88


state 70

    (27) assignment -> id EQ error . S

    S               shift and go to state 110


state 71

    (30) print -> PRINT id S .

    BO              reduce using rule 30 (print -> PRINT id S .)
    error           reduce using rule 30 (print -> PRINT id S .)
    IF              reduce using rule 30 (print -> PRINT id S .)
    WHILE           reduce using rule 30 (print -> PRINT id S .)
    PRINT           reduce using rule 30 (print -> PRINT id S .)
    ID              reduce using rule 30 (print -> PRINT id S .)
    $end            reduce using rule 30 (print -> PRINT id S .)
    BC              reduce using rule 30 (print -> PRINT id S .)
    ELSE            reduce using rule 30 (print -> PRINT id S .)


state 72

    (31) print -> PRINT error S .

    BO              reduce using rule 31 (print -> PRINT error S .)
    error           reduce using rule 31 (print -> PRINT error S .)
    IF              reduce using rule 31 (print -> PRINT error S .)
    WHILE           reduce using rule 31 (print -> PRINT error S .)
    PRINT           reduce using rule 31 (print -> PRINT error S .)
    ID              reduce using rule 31 (print -> PRINT error S .)
    $end            reduce using rule 31 (print -> PRINT error S .)
    BC              reduce using rule 31 (print -> PRINT error S .)
    ELSE            reduce using rule 31 (print -> PRINT error S .)


state 73

    (72) id -> ID SO ID . SC

    SC              shift and go to state 111


state 74

    (71) id -> ID SO INT . SC

    SC              shift and go to state 112


state 75

    (54) exp -> exp EQ . EQ exp

    EQ              shift and go to state 113


state 76

    (28) assignment -> error EQ exp S .

    BO              reduce using rule 28 (assignment -> error EQ exp S .)
    error           reduce using rule 28 (assignment -> error EQ exp S .)
    IF              reduce using rule 28 (assignment -> error EQ exp S .)
    WHILE           reduce using rule 28 (assignment -> error EQ exp S .)
    PRINT           reduce using rule 28 (assignment -> error EQ exp S .)
    ID              reduce using rule 28 (assignment -> error EQ exp S .)
    $end            reduce using rule 28 (assignment -> error EQ exp S .)
    BC              reduce using rule 28 (assignment -> error EQ exp S .)
    ELSE            reduce using rule 28 (assignment -> error EQ exp S .)


state 77

    (51) exp -> exp AND . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 114
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 78

    (52) exp -> exp OR . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 115
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 79

    (55) exp -> exp MIN . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 116
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 80

    (56) exp -> exp MAJ . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 117
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 81

    (57) exp -> exp MAJ_EQ . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 118
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 82

    (58) exp -> exp EQ_MAJ . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 119
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 83

    (59) exp -> exp MIN_EQ . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 120
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 84

    (60) exp -> exp EQ_MIN . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 121
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 85

    (61) exp -> exp PLUS . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 122
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 86

    (62) exp -> exp MINUS . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 123
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 87

    (63) exp -> exp STAR . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 124
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 88

    (64) exp -> exp DIV . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 125
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 89

    (53) exp -> NOT exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 53 (exp -> NOT exp .)
    AND             reduce using rule 53 (exp -> NOT exp .)
    OR              reduce using rule 53 (exp -> NOT exp .)
    RC              reduce using rule 53 (exp -> NOT exp .)
    error           reduce using rule 53 (exp -> NOT exp .)
    EQ              shift and go to state 75
    MIN             shift and go to state 79
    MAJ             shift and go to state 80
    MAJ_EQ          shift and go to state 81
    EQ_MAJ          shift and go to state 82
    MIN_EQ          shift and go to state 83
    EQ_MIN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! EQ              [ reduce using rule 53 (exp -> NOT exp .) ]
  ! MIN             [ reduce using rule 53 (exp -> NOT exp .) ]
  ! MAJ             [ reduce using rule 53 (exp -> NOT exp .) ]
  ! MAJ_EQ          [ reduce using rule 53 (exp -> NOT exp .) ]
  ! EQ_MAJ          [ reduce using rule 53 (exp -> NOT exp .) ]
  ! MIN_EQ          [ reduce using rule 53 (exp -> NOT exp .) ]
  ! EQ_MIN          [ reduce using rule 53 (exp -> NOT exp .) ]
  ! PLUS            [ reduce using rule 53 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 53 (exp -> NOT exp .) ]
  ! STAR            [ reduce using rule 53 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 53 (exp -> NOT exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]


state 90

    (50) exp_double -> MINUS DOUBLE .

    S               reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    AND             reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    OR              reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    EQ              reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    MIN             reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    MAJ             reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    MAJ_EQ          reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    EQ_MAJ          reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    MIN_EQ          reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    EQ_MIN          reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    PLUS            reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    MINUS           reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    STAR            reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    DIV             reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    RC              reduce using rule 50 (exp_double -> MINUS DOUBLE .)
    error           reduce using rule 50 (exp_double -> MINUS DOUBLE .)


state 91

    (48) exp_int -> MINUS INT .

    S               reduce using rule 48 (exp_int -> MINUS INT .)
    AND             reduce using rule 48 (exp_int -> MINUS INT .)
    OR              reduce using rule 48 (exp_int -> MINUS INT .)
    EQ              reduce using rule 48 (exp_int -> MINUS INT .)
    MIN             reduce using rule 48 (exp_int -> MINUS INT .)
    MAJ             reduce using rule 48 (exp_int -> MINUS INT .)
    MAJ_EQ          reduce using rule 48 (exp_int -> MINUS INT .)
    EQ_MAJ          reduce using rule 48 (exp_int -> MINUS INT .)
    MIN_EQ          reduce using rule 48 (exp_int -> MINUS INT .)
    EQ_MIN          reduce using rule 48 (exp_int -> MINUS INT .)
    PLUS            reduce using rule 48 (exp_int -> MINUS INT .)
    MINUS           reduce using rule 48 (exp_int -> MINUS INT .)
    STAR            reduce using rule 48 (exp_int -> MINUS INT .)
    DIV             reduce using rule 48 (exp_int -> MINUS INT .)
    RC              reduce using rule 48 (exp_int -> MINUS INT .)
    error           reduce using rule 48 (exp_int -> MINUS INT .)


state 92

    (65) exp -> RO exp . RC
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    RC              shift and go to state 126
    AND             shift and go to state 77
    OR              shift and go to state 78
    EQ              shift and go to state 75
    MIN             shift and go to state 79
    MAJ             shift and go to state 80
    MAJ_EQ          shift and go to state 81
    EQ_MAJ          shift and go to state 82
    MIN_EQ          shift and go to state 83
    EQ_MIN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88


state 93

    (69) exp -> RO error . RC

    RC              shift and go to state 127


state 94

    (11) var_list -> var_list CM m_copy . var
    (12) var -> . ID
    (13) var -> . ID SO INT SC

    ID              shift and go to state 28

    var                            shift and go to state 128

state 95

    (9) m_copy -> empty .

    ID              reduce using rule 9 (m_copy -> empty .)


state 96

    (13) var -> ID SO INT . SC

    SC              shift and go to state 129


state 97

    (22) stmt -> BO stmt_list error BC .

    BO              reduce using rule 22 (stmt -> BO stmt_list error BC .)
    error           reduce using rule 22 (stmt -> BO stmt_list error BC .)
    IF              reduce using rule 22 (stmt -> BO stmt_list error BC .)
    WHILE           reduce using rule 22 (stmt -> BO stmt_list error BC .)
    PRINT           reduce using rule 22 (stmt -> BO stmt_list error BC .)
    ID              reduce using rule 22 (stmt -> BO stmt_list error BC .)
    $end            reduce using rule 22 (stmt -> BO stmt_list error BC .)
    BC              reduce using rule 22 (stmt -> BO stmt_list error BC .)
    ELSE            reduce using rule 22 (stmt -> BO stmt_list error BC .)


state 98

    (32) if -> IF if_condition nt0_if stmt . ELSE nt1_if stmt
    (33) if -> IF if_condition nt0_if stmt .
    (34) if -> IF if_condition nt0_if stmt . error nt1_if stmt

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for error resolved as shift
    ELSE            shift and go to state 130
    BO              reduce using rule 33 (if -> IF if_condition nt0_if stmt .)
    IF              reduce using rule 33 (if -> IF if_condition nt0_if stmt .)
    WHILE           reduce using rule 33 (if -> IF if_condition nt0_if stmt .)
    PRINT           reduce using rule 33 (if -> IF if_condition nt0_if stmt .)
    ID              reduce using rule 33 (if -> IF if_condition nt0_if stmt .)
    $end            reduce using rule 33 (if -> IF if_condition nt0_if stmt .)
    BC              reduce using rule 33 (if -> IF if_condition nt0_if stmt .)
    error           shift and go to state 131

  ! error           [ reduce using rule 33 (if -> IF if_condition nt0_if stmt .) ]
  ! ELSE            [ reduce using rule 33 (if -> IF if_condition nt0_if stmt .) ]


state 99

    (37) if_condition -> error exp RC .

    BO              reduce using rule 37 (if_condition -> error exp RC .)
    error           reduce using rule 37 (if_condition -> error exp RC .)
    IF              reduce using rule 37 (if_condition -> error exp RC .)
    WHILE           reduce using rule 37 (if_condition -> error exp RC .)
    PRINT           reduce using rule 37 (if_condition -> error exp RC .)
    ID              reduce using rule 37 (if_condition -> error exp RC .)


state 100

    (35) if_condition -> RO exp RC .

    BO              reduce using rule 35 (if_condition -> RO exp RC .)
    error           reduce using rule 35 (if_condition -> RO exp RC .)
    IF              reduce using rule 35 (if_condition -> RO exp RC .)
    WHILE           reduce using rule 35 (if_condition -> RO exp RC .)
    PRINT           reduce using rule 35 (if_condition -> RO exp RC .)
    ID              reduce using rule 35 (if_condition -> RO exp RC .)


state 101

    (38) if_condition -> RO exp error .

    BO              reduce using rule 38 (if_condition -> RO exp error .)
    error           reduce using rule 38 (if_condition -> RO exp error .)
    IF              reduce using rule 38 (if_condition -> RO exp error .)
    WHILE           reduce using rule 38 (if_condition -> RO exp error .)
    PRINT           reduce using rule 38 (if_condition -> RO exp error .)
    ID              reduce using rule 38 (if_condition -> RO exp error .)


state 102

    (36) if_condition -> RO error RC .

    BO              reduce using rule 36 (if_condition -> RO error RC .)
    error           reduce using rule 36 (if_condition -> RO error RC .)
    IF              reduce using rule 36 (if_condition -> RO error RC .)
    WHILE           reduce using rule 36 (if_condition -> RO error RC .)
    PRINT           reduce using rule 36 (if_condition -> RO error RC .)
    ID              reduce using rule 36 (if_condition -> RO error RC .)


state 103

    (41) while -> WHILE while_condition nt0_while stmt .

    BO              reduce using rule 41 (while -> WHILE while_condition nt0_while stmt .)
    error           reduce using rule 41 (while -> WHILE while_condition nt0_while stmt .)
    IF              reduce using rule 41 (while -> WHILE while_condition nt0_while stmt .)
    WHILE           reduce using rule 41 (while -> WHILE while_condition nt0_while stmt .)
    PRINT           reduce using rule 41 (while -> WHILE while_condition nt0_while stmt .)
    ID              reduce using rule 41 (while -> WHILE while_condition nt0_while stmt .)
    $end            reduce using rule 41 (while -> WHILE while_condition nt0_while stmt .)
    BC              reduce using rule 41 (while -> WHILE while_condition nt0_while stmt .)
    ELSE            reduce using rule 41 (while -> WHILE while_condition nt0_while stmt .)


state 104

    (42) while_condition -> RO exp RC .

    BO              reduce using rule 42 (while_condition -> RO exp RC .)
    error           reduce using rule 42 (while_condition -> RO exp RC .)
    IF              reduce using rule 42 (while_condition -> RO exp RC .)
    WHILE           reduce using rule 42 (while_condition -> RO exp RC .)
    PRINT           reduce using rule 42 (while_condition -> RO exp RC .)
    ID              reduce using rule 42 (while_condition -> RO exp RC .)


state 105

    (45) while_condition -> RO exp error .

    BO              reduce using rule 45 (while_condition -> RO exp error .)
    error           reduce using rule 45 (while_condition -> RO exp error .)
    IF              reduce using rule 45 (while_condition -> RO exp error .)
    WHILE           reduce using rule 45 (while_condition -> RO exp error .)
    PRINT           reduce using rule 45 (while_condition -> RO exp error .)
    ID              reduce using rule 45 (while_condition -> RO exp error .)


state 106

    (43) while_condition -> RO error RC .

    BO              reduce using rule 43 (while_condition -> RO error RC .)
    error           reduce using rule 43 (while_condition -> RO error RC .)
    IF              reduce using rule 43 (while_condition -> RO error RC .)
    WHILE           reduce using rule 43 (while_condition -> RO error RC .)
    PRINT           reduce using rule 43 (while_condition -> RO error RC .)
    ID              reduce using rule 43 (while_condition -> RO error RC .)


state 107

    (44) while_condition -> error exp RC .

    BO              reduce using rule 44 (while_condition -> error exp RC .)
    error           reduce using rule 44 (while_condition -> error exp RC .)
    IF              reduce using rule 44 (while_condition -> error exp RC .)
    WHILE           reduce using rule 44 (while_condition -> error exp RC .)
    PRINT           reduce using rule 44 (while_condition -> error exp RC .)
    ID              reduce using rule 44 (while_condition -> error exp RC .)


state 108

    (26) assignment -> id EQ exp S .

    BO              reduce using rule 26 (assignment -> id EQ exp S .)
    error           reduce using rule 26 (assignment -> id EQ exp S .)
    IF              reduce using rule 26 (assignment -> id EQ exp S .)
    WHILE           reduce using rule 26 (assignment -> id EQ exp S .)
    PRINT           reduce using rule 26 (assignment -> id EQ exp S .)
    ID              reduce using rule 26 (assignment -> id EQ exp S .)
    $end            reduce using rule 26 (assignment -> id EQ exp S .)
    BC              reduce using rule 26 (assignment -> id EQ exp S .)
    ELSE            reduce using rule 26 (assignment -> id EQ exp S .)


state 109

    (29) assignment -> id EQ exp error .

    BO              reduce using rule 29 (assignment -> id EQ exp error .)
    error           reduce using rule 29 (assignment -> id EQ exp error .)
    IF              reduce using rule 29 (assignment -> id EQ exp error .)
    WHILE           reduce using rule 29 (assignment -> id EQ exp error .)
    PRINT           reduce using rule 29 (assignment -> id EQ exp error .)
    ID              reduce using rule 29 (assignment -> id EQ exp error .)
    $end            reduce using rule 29 (assignment -> id EQ exp error .)
    BC              reduce using rule 29 (assignment -> id EQ exp error .)
    ELSE            reduce using rule 29 (assignment -> id EQ exp error .)


state 110

    (27) assignment -> id EQ error S .

    BO              reduce using rule 27 (assignment -> id EQ error S .)
    error           reduce using rule 27 (assignment -> id EQ error S .)
    IF              reduce using rule 27 (assignment -> id EQ error S .)
    WHILE           reduce using rule 27 (assignment -> id EQ error S .)
    PRINT           reduce using rule 27 (assignment -> id EQ error S .)
    ID              reduce using rule 27 (assignment -> id EQ error S .)
    $end            reduce using rule 27 (assignment -> id EQ error S .)
    BC              reduce using rule 27 (assignment -> id EQ error S .)
    ELSE            reduce using rule 27 (assignment -> id EQ error S .)


state 111

    (72) id -> ID SO ID SC .

    S               reduce using rule 72 (id -> ID SO ID SC .)
    EQ              reduce using rule 72 (id -> ID SO ID SC .)
    AND             reduce using rule 72 (id -> ID SO ID SC .)
    OR              reduce using rule 72 (id -> ID SO ID SC .)
    MIN             reduce using rule 72 (id -> ID SO ID SC .)
    MAJ             reduce using rule 72 (id -> ID SO ID SC .)
    MAJ_EQ          reduce using rule 72 (id -> ID SO ID SC .)
    EQ_MAJ          reduce using rule 72 (id -> ID SO ID SC .)
    MIN_EQ          reduce using rule 72 (id -> ID SO ID SC .)
    EQ_MIN          reduce using rule 72 (id -> ID SO ID SC .)
    PLUS            reduce using rule 72 (id -> ID SO ID SC .)
    MINUS           reduce using rule 72 (id -> ID SO ID SC .)
    STAR            reduce using rule 72 (id -> ID SO ID SC .)
    DIV             reduce using rule 72 (id -> ID SO ID SC .)
    RC              reduce using rule 72 (id -> ID SO ID SC .)
    error           reduce using rule 72 (id -> ID SO ID SC .)


state 112

    (71) id -> ID SO INT SC .

    S               reduce using rule 71 (id -> ID SO INT SC .)
    EQ              reduce using rule 71 (id -> ID SO INT SC .)
    AND             reduce using rule 71 (id -> ID SO INT SC .)
    OR              reduce using rule 71 (id -> ID SO INT SC .)
    MIN             reduce using rule 71 (id -> ID SO INT SC .)
    MAJ             reduce using rule 71 (id -> ID SO INT SC .)
    MAJ_EQ          reduce using rule 71 (id -> ID SO INT SC .)
    EQ_MAJ          reduce using rule 71 (id -> ID SO INT SC .)
    MIN_EQ          reduce using rule 71 (id -> ID SO INT SC .)
    EQ_MIN          reduce using rule 71 (id -> ID SO INT SC .)
    PLUS            reduce using rule 71 (id -> ID SO INT SC .)
    MINUS           reduce using rule 71 (id -> ID SO INT SC .)
    STAR            reduce using rule 71 (id -> ID SO INT SC .)
    DIV             reduce using rule 71 (id -> ID SO INT SC .)
    RC              reduce using rule 71 (id -> ID SO INT SC .)
    error           reduce using rule 71 (id -> ID SO INT SC .)


state 113

    (54) exp -> exp EQ EQ . exp
    (51) exp -> . exp AND exp
    (52) exp -> . exp OR exp
    (53) exp -> . NOT exp
    (54) exp -> . exp EQ EQ exp
    (55) exp -> . exp MIN exp
    (56) exp -> . exp MAJ exp
    (57) exp -> . exp MAJ_EQ exp
    (58) exp -> . exp EQ_MAJ exp
    (59) exp -> . exp MIN_EQ exp
    (60) exp -> . exp EQ_MIN exp
    (61) exp -> . exp PLUS exp
    (62) exp -> . exp MINUS exp
    (63) exp -> . exp STAR exp
    (64) exp -> . exp DIV exp
    (65) exp -> . RO exp RC
    (66) exp -> . exp_double
    (67) exp -> . exp_int
    (68) exp -> . id
    (69) exp -> . RO error RC
    (49) exp_double -> . DOUBLE
    (50) exp_double -> . MINUS DOUBLE
    (47) exp_int -> . INT
    (48) exp_int -> . MINUS INT
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    NOT             shift and go to state 43
    RO              shift and go to state 45
    DOUBLE          shift and go to state 49
    MINUS           shift and go to state 44
    INT             shift and go to state 50
    ID              shift and go to state 19

    exp                            shift and go to state 132
    exp_double                     shift and go to state 46
    exp_int                        shift and go to state 47
    id                             shift and go to state 48

state 114

    (51) exp -> exp AND exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 51 (exp -> exp AND exp .)
    AND             reduce using rule 51 (exp -> exp AND exp .)
    OR              reduce using rule 51 (exp -> exp AND exp .)
    RC              reduce using rule 51 (exp -> exp AND exp .)
    error           reduce using rule 51 (exp -> exp AND exp .)
    EQ              shift and go to state 75
    MIN             shift and go to state 79
    MAJ             shift and go to state 80
    MAJ_EQ          shift and go to state 81
    EQ_MAJ          shift and go to state 82
    MIN_EQ          shift and go to state 83
    EQ_MIN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! EQ              [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! MIN             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! MAJ             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! MAJ_EQ          [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! EQ_MAJ          [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! MIN_EQ          [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! EQ_MIN          [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! PLUS            [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! STAR            [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]


state 115

    (52) exp -> exp OR exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 52 (exp -> exp OR exp .)
    OR              reduce using rule 52 (exp -> exp OR exp .)
    RC              reduce using rule 52 (exp -> exp OR exp .)
    error           reduce using rule 52 (exp -> exp OR exp .)
    AND             shift and go to state 77
    EQ              shift and go to state 75
    MIN             shift and go to state 79
    MAJ             shift and go to state 80
    MAJ_EQ          shift and go to state 81
    EQ_MAJ          shift and go to state 82
    MIN_EQ          shift and go to state 83
    EQ_MIN          shift and go to state 84
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! AND             [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! MIN             [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! MAJ             [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! MAJ_EQ          [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! EQ_MAJ          [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! MIN_EQ          [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! EQ_MIN          [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! PLUS            [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! STAR            [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 78 ]


state 116

    (55) exp -> exp MIN exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 55 (exp -> exp MIN exp .)
    AND             reduce using rule 55 (exp -> exp MIN exp .)
    OR              reduce using rule 55 (exp -> exp MIN exp .)
    EQ              reduce using rule 55 (exp -> exp MIN exp .)
    MIN             reduce using rule 55 (exp -> exp MIN exp .)
    MAJ             reduce using rule 55 (exp -> exp MIN exp .)
    MAJ_EQ          reduce using rule 55 (exp -> exp MIN exp .)
    EQ_MAJ          reduce using rule 55 (exp -> exp MIN exp .)
    MIN_EQ          reduce using rule 55 (exp -> exp MIN exp .)
    EQ_MIN          reduce using rule 55 (exp -> exp MIN exp .)
    RC              reduce using rule 55 (exp -> exp MIN exp .)
    error           reduce using rule 55 (exp -> exp MIN exp .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! PLUS            [ reduce using rule 55 (exp -> exp MIN exp .) ]
  ! MINUS           [ reduce using rule 55 (exp -> exp MIN exp .) ]
  ! STAR            [ reduce using rule 55 (exp -> exp MIN exp .) ]
  ! DIV             [ reduce using rule 55 (exp -> exp MIN exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]


state 117

    (56) exp -> exp MAJ exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 56 (exp -> exp MAJ exp .)
    AND             reduce using rule 56 (exp -> exp MAJ exp .)
    OR              reduce using rule 56 (exp -> exp MAJ exp .)
    EQ              reduce using rule 56 (exp -> exp MAJ exp .)
    MIN             reduce using rule 56 (exp -> exp MAJ exp .)
    MAJ             reduce using rule 56 (exp -> exp MAJ exp .)
    MAJ_EQ          reduce using rule 56 (exp -> exp MAJ exp .)
    EQ_MAJ          reduce using rule 56 (exp -> exp MAJ exp .)
    MIN_EQ          reduce using rule 56 (exp -> exp MAJ exp .)
    EQ_MIN          reduce using rule 56 (exp -> exp MAJ exp .)
    RC              reduce using rule 56 (exp -> exp MAJ exp .)
    error           reduce using rule 56 (exp -> exp MAJ exp .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! PLUS            [ reduce using rule 56 (exp -> exp MAJ exp .) ]
  ! MINUS           [ reduce using rule 56 (exp -> exp MAJ exp .) ]
  ! STAR            [ reduce using rule 56 (exp -> exp MAJ exp .) ]
  ! DIV             [ reduce using rule 56 (exp -> exp MAJ exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]


state 118

    (57) exp -> exp MAJ_EQ exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    AND             reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    OR              reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    EQ              reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    MIN             reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    MAJ             reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    MAJ_EQ          reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    EQ_MAJ          reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    MIN_EQ          reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    EQ_MIN          reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    RC              reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    error           reduce using rule 57 (exp -> exp MAJ_EQ exp .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! PLUS            [ reduce using rule 57 (exp -> exp MAJ_EQ exp .) ]
  ! MINUS           [ reduce using rule 57 (exp -> exp MAJ_EQ exp .) ]
  ! STAR            [ reduce using rule 57 (exp -> exp MAJ_EQ exp .) ]
  ! DIV             [ reduce using rule 57 (exp -> exp MAJ_EQ exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]


state 119

    (58) exp -> exp EQ_MAJ exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    AND             reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    OR              reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    EQ              reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    MIN             reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    MAJ             reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    MAJ_EQ          reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    EQ_MAJ          reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    MIN_EQ          reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    EQ_MIN          reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    RC              reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    error           reduce using rule 58 (exp -> exp EQ_MAJ exp .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! PLUS            [ reduce using rule 58 (exp -> exp EQ_MAJ exp .) ]
  ! MINUS           [ reduce using rule 58 (exp -> exp EQ_MAJ exp .) ]
  ! STAR            [ reduce using rule 58 (exp -> exp EQ_MAJ exp .) ]
  ! DIV             [ reduce using rule 58 (exp -> exp EQ_MAJ exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]


state 120

    (59) exp -> exp MIN_EQ exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 59 (exp -> exp MIN_EQ exp .)
    AND             reduce using rule 59 (exp -> exp MIN_EQ exp .)
    OR              reduce using rule 59 (exp -> exp MIN_EQ exp .)
    EQ              reduce using rule 59 (exp -> exp MIN_EQ exp .)
    MIN             reduce using rule 59 (exp -> exp MIN_EQ exp .)
    MAJ             reduce using rule 59 (exp -> exp MIN_EQ exp .)
    MAJ_EQ          reduce using rule 59 (exp -> exp MIN_EQ exp .)
    EQ_MAJ          reduce using rule 59 (exp -> exp MIN_EQ exp .)
    MIN_EQ          reduce using rule 59 (exp -> exp MIN_EQ exp .)
    EQ_MIN          reduce using rule 59 (exp -> exp MIN_EQ exp .)
    RC              reduce using rule 59 (exp -> exp MIN_EQ exp .)
    error           reduce using rule 59 (exp -> exp MIN_EQ exp .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! PLUS            [ reduce using rule 59 (exp -> exp MIN_EQ exp .) ]
  ! MINUS           [ reduce using rule 59 (exp -> exp MIN_EQ exp .) ]
  ! STAR            [ reduce using rule 59 (exp -> exp MIN_EQ exp .) ]
  ! DIV             [ reduce using rule 59 (exp -> exp MIN_EQ exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]


state 121

    (60) exp -> exp EQ_MIN exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 60 (exp -> exp EQ_MIN exp .)
    AND             reduce using rule 60 (exp -> exp EQ_MIN exp .)
    OR              reduce using rule 60 (exp -> exp EQ_MIN exp .)
    EQ              reduce using rule 60 (exp -> exp EQ_MIN exp .)
    MIN             reduce using rule 60 (exp -> exp EQ_MIN exp .)
    MAJ             reduce using rule 60 (exp -> exp EQ_MIN exp .)
    MAJ_EQ          reduce using rule 60 (exp -> exp EQ_MIN exp .)
    EQ_MAJ          reduce using rule 60 (exp -> exp EQ_MIN exp .)
    MIN_EQ          reduce using rule 60 (exp -> exp EQ_MIN exp .)
    EQ_MIN          reduce using rule 60 (exp -> exp EQ_MIN exp .)
    RC              reduce using rule 60 (exp -> exp EQ_MIN exp .)
    error           reduce using rule 60 (exp -> exp EQ_MIN exp .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! PLUS            [ reduce using rule 60 (exp -> exp EQ_MIN exp .) ]
  ! MINUS           [ reduce using rule 60 (exp -> exp EQ_MIN exp .) ]
  ! STAR            [ reduce using rule 60 (exp -> exp EQ_MIN exp .) ]
  ! DIV             [ reduce using rule 60 (exp -> exp EQ_MIN exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]


state 122

    (61) exp -> exp PLUS exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 61 (exp -> exp PLUS exp .)
    AND             reduce using rule 61 (exp -> exp PLUS exp .)
    OR              reduce using rule 61 (exp -> exp PLUS exp .)
    EQ              reduce using rule 61 (exp -> exp PLUS exp .)
    MIN             reduce using rule 61 (exp -> exp PLUS exp .)
    MAJ             reduce using rule 61 (exp -> exp PLUS exp .)
    MAJ_EQ          reduce using rule 61 (exp -> exp PLUS exp .)
    EQ_MAJ          reduce using rule 61 (exp -> exp PLUS exp .)
    MIN_EQ          reduce using rule 61 (exp -> exp PLUS exp .)
    EQ_MIN          reduce using rule 61 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 61 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 61 (exp -> exp PLUS exp .)
    RC              reduce using rule 61 (exp -> exp PLUS exp .)
    error           reduce using rule 61 (exp -> exp PLUS exp .)
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! STAR            [ reduce using rule 61 (exp -> exp PLUS exp .) ]
  ! DIV             [ reduce using rule 61 (exp -> exp PLUS exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]


state 123

    (62) exp -> exp MINUS exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 62 (exp -> exp MINUS exp .)
    AND             reduce using rule 62 (exp -> exp MINUS exp .)
    OR              reduce using rule 62 (exp -> exp MINUS exp .)
    EQ              reduce using rule 62 (exp -> exp MINUS exp .)
    MIN             reduce using rule 62 (exp -> exp MINUS exp .)
    MAJ             reduce using rule 62 (exp -> exp MINUS exp .)
    MAJ_EQ          reduce using rule 62 (exp -> exp MINUS exp .)
    EQ_MAJ          reduce using rule 62 (exp -> exp MINUS exp .)
    MIN_EQ          reduce using rule 62 (exp -> exp MINUS exp .)
    EQ_MIN          reduce using rule 62 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 62 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 62 (exp -> exp MINUS exp .)
    RC              reduce using rule 62 (exp -> exp MINUS exp .)
    error           reduce using rule 62 (exp -> exp MINUS exp .)
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! STAR            [ reduce using rule 62 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 62 (exp -> exp MINUS exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]


state 124

    (63) exp -> exp STAR exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 63 (exp -> exp STAR exp .)
    AND             reduce using rule 63 (exp -> exp STAR exp .)
    OR              reduce using rule 63 (exp -> exp STAR exp .)
    EQ              reduce using rule 63 (exp -> exp STAR exp .)
    MIN             reduce using rule 63 (exp -> exp STAR exp .)
    MAJ             reduce using rule 63 (exp -> exp STAR exp .)
    MAJ_EQ          reduce using rule 63 (exp -> exp STAR exp .)
    EQ_MAJ          reduce using rule 63 (exp -> exp STAR exp .)
    MIN_EQ          reduce using rule 63 (exp -> exp STAR exp .)
    EQ_MIN          reduce using rule 63 (exp -> exp STAR exp .)
    PLUS            reduce using rule 63 (exp -> exp STAR exp .)
    MINUS           reduce using rule 63 (exp -> exp STAR exp .)
    STAR            reduce using rule 63 (exp -> exp STAR exp .)
    DIV             reduce using rule 63 (exp -> exp STAR exp .)
    RC              reduce using rule 63 (exp -> exp STAR exp .)
    error           reduce using rule 63 (exp -> exp STAR exp .)

  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]
  ! STAR            [ shift and go to state 87 ]
  ! DIV             [ shift and go to state 88 ]


state 125

    (64) exp -> exp DIV exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 64 (exp -> exp DIV exp .)
    AND             reduce using rule 64 (exp -> exp DIV exp .)
    OR              reduce using rule 64 (exp -> exp DIV exp .)
    EQ              reduce using rule 64 (exp -> exp DIV exp .)
    MIN             reduce using rule 64 (exp -> exp DIV exp .)
    MAJ             reduce using rule 64 (exp -> exp DIV exp .)
    MAJ_EQ          reduce using rule 64 (exp -> exp DIV exp .)
    EQ_MAJ          reduce using rule 64 (exp -> exp DIV exp .)
    MIN_EQ          reduce using rule 64 (exp -> exp DIV exp .)
    EQ_MIN          reduce using rule 64 (exp -> exp DIV exp .)
    PLUS            reduce using rule 64 (exp -> exp DIV exp .)
    MINUS           reduce using rule 64 (exp -> exp DIV exp .)
    STAR            reduce using rule 64 (exp -> exp DIV exp .)
    DIV             reduce using rule 64 (exp -> exp DIV exp .)
    RC              reduce using rule 64 (exp -> exp DIV exp .)
    error           reduce using rule 64 (exp -> exp DIV exp .)

  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 86 ]
  ! STAR            [ shift and go to state 87 ]
  ! DIV             [ shift and go to state 88 ]


state 126

    (65) exp -> RO exp RC .

    S               reduce using rule 65 (exp -> RO exp RC .)
    AND             reduce using rule 65 (exp -> RO exp RC .)
    OR              reduce using rule 65 (exp -> RO exp RC .)
    EQ              reduce using rule 65 (exp -> RO exp RC .)
    MIN             reduce using rule 65 (exp -> RO exp RC .)
    MAJ             reduce using rule 65 (exp -> RO exp RC .)
    MAJ_EQ          reduce using rule 65 (exp -> RO exp RC .)
    EQ_MAJ          reduce using rule 65 (exp -> RO exp RC .)
    MIN_EQ          reduce using rule 65 (exp -> RO exp RC .)
    EQ_MIN          reduce using rule 65 (exp -> RO exp RC .)
    PLUS            reduce using rule 65 (exp -> RO exp RC .)
    MINUS           reduce using rule 65 (exp -> RO exp RC .)
    STAR            reduce using rule 65 (exp -> RO exp RC .)
    DIV             reduce using rule 65 (exp -> RO exp RC .)
    RC              reduce using rule 65 (exp -> RO exp RC .)
    error           reduce using rule 65 (exp -> RO exp RC .)


state 127

    (69) exp -> RO error RC .

    S               reduce using rule 69 (exp -> RO error RC .)
    AND             reduce using rule 69 (exp -> RO error RC .)
    OR              reduce using rule 69 (exp -> RO error RC .)
    EQ              reduce using rule 69 (exp -> RO error RC .)
    MIN             reduce using rule 69 (exp -> RO error RC .)
    MAJ             reduce using rule 69 (exp -> RO error RC .)
    MAJ_EQ          reduce using rule 69 (exp -> RO error RC .)
    EQ_MAJ          reduce using rule 69 (exp -> RO error RC .)
    MIN_EQ          reduce using rule 69 (exp -> RO error RC .)
    EQ_MIN          reduce using rule 69 (exp -> RO error RC .)
    PLUS            reduce using rule 69 (exp -> RO error RC .)
    MINUS           reduce using rule 69 (exp -> RO error RC .)
    STAR            reduce using rule 69 (exp -> RO error RC .)
    DIV             reduce using rule 69 (exp -> RO error RC .)
    RC              reduce using rule 69 (exp -> RO error RC .)
    error           reduce using rule 69 (exp -> RO error RC .)


state 128

    (11) var_list -> var_list CM m_copy var .

    S               reduce using rule 11 (var_list -> var_list CM m_copy var .)
    error           reduce using rule 11 (var_list -> var_list CM m_copy var .)
    CM              reduce using rule 11 (var_list -> var_list CM m_copy var .)


state 129

    (13) var -> ID SO INT SC .

    S               reduce using rule 13 (var -> ID SO INT SC .)
    error           reduce using rule 13 (var -> ID SO INT SC .)
    CM              reduce using rule 13 (var -> ID SO INT SC .)


state 130

    (32) if -> IF if_condition nt0_if stmt ELSE . nt1_if stmt
    (40) nt1_if -> . empty
    (73) empty -> .

    BO              reduce using rule 73 (empty -> .)
    error           reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)

    nt1_if                         shift and go to state 133
    empty                          shift and go to state 134

state 131

    (34) if -> IF if_condition nt0_if stmt error . nt1_if stmt
    (40) nt1_if -> . empty
    (73) empty -> .

    BO              reduce using rule 73 (empty -> .)
    error           reduce using rule 73 (empty -> .)
    IF              reduce using rule 73 (empty -> .)
    WHILE           reduce using rule 73 (empty -> .)
    PRINT           reduce using rule 73 (empty -> .)
    ID              reduce using rule 73 (empty -> .)

    nt1_if                         shift and go to state 135
    empty                          shift and go to state 134

state 132

    (54) exp -> exp EQ EQ exp .
    (51) exp -> exp . AND exp
    (52) exp -> exp . OR exp
    (54) exp -> exp . EQ EQ exp
    (55) exp -> exp . MIN exp
    (56) exp -> exp . MAJ exp
    (57) exp -> exp . MAJ_EQ exp
    (58) exp -> exp . EQ_MAJ exp
    (59) exp -> exp . MIN_EQ exp
    (60) exp -> exp . EQ_MIN exp
    (61) exp -> exp . PLUS exp
    (62) exp -> exp . MINUS exp
    (63) exp -> exp . STAR exp
    (64) exp -> exp . DIV exp

    S               reduce using rule 54 (exp -> exp EQ EQ exp .)
    AND             reduce using rule 54 (exp -> exp EQ EQ exp .)
    OR              reduce using rule 54 (exp -> exp EQ EQ exp .)
    EQ              reduce using rule 54 (exp -> exp EQ EQ exp .)
    MIN             reduce using rule 54 (exp -> exp EQ EQ exp .)
    MAJ             reduce using rule 54 (exp -> exp EQ EQ exp .)
    MAJ_EQ          reduce using rule 54 (exp -> exp EQ EQ exp .)
    EQ_MAJ          reduce using rule 54 (exp -> exp EQ EQ exp .)
    MIN_EQ          reduce using rule 54 (exp -> exp EQ EQ exp .)
    EQ_MIN          reduce using rule 54 (exp -> exp EQ EQ exp .)
    RC              reduce using rule 54 (exp -> exp EQ EQ exp .)
    error           reduce using rule 54 (exp -> exp EQ EQ exp .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86
    STAR            shift and go to state 87
    DIV             shift and go to state 88

  ! PLUS            [ reduce using rule 54 (exp -> exp EQ EQ exp .) ]
  ! MINUS           [ reduce using rule 54 (exp -> exp EQ EQ exp .) ]
  ! STAR            [ reduce using rule 54 (exp -> exp EQ EQ exp .) ]
  ! DIV             [ reduce using rule 54 (exp -> exp EQ EQ exp .) ]
  ! AND             [ shift and go to state 77 ]
  ! OR              [ shift and go to state 78 ]
  ! EQ              [ shift and go to state 75 ]
  ! MIN             [ shift and go to state 79 ]
  ! MAJ             [ shift and go to state 80 ]
  ! MAJ_EQ          [ shift and go to state 81 ]
  ! EQ_MAJ          [ shift and go to state 82 ]
  ! MIN_EQ          [ shift and go to state 83 ]
  ! EQ_MIN          [ shift and go to state 84 ]


state 133

    (32) if -> IF if_condition nt0_if stmt ELSE nt1_if . stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (22) stmt -> . BO stmt_list error BC
    (23) stmt -> . BO error BC
    (24) stmt -> . error S
    (32) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> . IF if_condition nt0_if stmt
    (34) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (41) while -> . WHILE while_condition nt0_while stmt
    (25) assignment -> . id S
    (26) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) assignment -> . id EQ exp error
    (30) print -> . PRINT id S
    (31) print -> . PRINT error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 136
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 134

    (40) nt1_if -> empty .

    BO              reduce using rule 40 (nt1_if -> empty .)
    error           reduce using rule 40 (nt1_if -> empty .)
    IF              reduce using rule 40 (nt1_if -> empty .)
    WHILE           reduce using rule 40 (nt1_if -> empty .)
    PRINT           reduce using rule 40 (nt1_if -> empty .)
    ID              reduce using rule 40 (nt1_if -> empty .)


state 135

    (34) if -> IF if_condition nt0_if stmt error nt1_if . stmt
    (17) stmt -> . if
    (18) stmt -> . while
    (19) stmt -> . assignment
    (20) stmt -> . print
    (21) stmt -> . BO stmt_list BC
    (22) stmt -> . BO stmt_list error BC
    (23) stmt -> . BO error BC
    (24) stmt -> . error S
    (32) if -> . IF if_condition nt0_if stmt ELSE nt1_if stmt
    (33) if -> . IF if_condition nt0_if stmt
    (34) if -> . IF if_condition nt0_if stmt error nt1_if stmt
    (41) while -> . WHILE while_condition nt0_while stmt
    (25) assignment -> . id S
    (26) assignment -> . id EQ exp S
    (27) assignment -> . id EQ error S
    (28) assignment -> . error EQ exp S
    (29) assignment -> . id EQ exp error
    (30) print -> . PRINT id S
    (31) print -> . PRINT error S
    (70) id -> . ID
    (71) id -> . ID SO INT SC
    (72) id -> . ID SO ID SC

    BO              shift and go to state 12
    error           shift and go to state 21
    IF              shift and go to state 15
    WHILE           shift and go to state 16
    PRINT           shift and go to state 18
    ID              shift and go to state 19

    stmt                           shift and go to state 137
    if                             shift and go to state 8
    while                          shift and go to state 9
    assignment                     shift and go to state 10
    print                          shift and go to state 11
    id                             shift and go to state 17

state 136

    (32) if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .

    BO              reduce using rule 32 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    error           reduce using rule 32 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    IF              reduce using rule 32 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    WHILE           reduce using rule 32 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    PRINT           reduce using rule 32 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    ID              reduce using rule 32 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    $end            reduce using rule 32 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    BC              reduce using rule 32 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)
    ELSE            reduce using rule 32 (if -> IF if_condition nt0_if stmt ELSE nt1_if stmt .)


state 137

    (34) if -> IF if_condition nt0_if stmt error nt1_if stmt .

    BO              reduce using rule 34 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    error           reduce using rule 34 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    IF              reduce using rule 34 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    WHILE           reduce using rule 34 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    PRINT           reduce using rule 34 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    ID              reduce using rule 34 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    $end            reduce using rule 34 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    BC              reduce using rule 34 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)
    ELSE            reduce using rule 34 (if -> IF if_condition nt0_if stmt error nt1_if stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 98 resolved as shift
WARNING: shift/reduce conflict for error in state 98 resolved as shift

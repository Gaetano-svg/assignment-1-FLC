Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> goal
Rule 1     goal -> list_decl
Rule 2     list_decl -> <empty>
Rule 3     list_decl -> list_decl decl
Rule 4     decl -> TYPE lid S
Rule 5     lid -> ID CM r_copy lid
Rule 6     lid -> ID
Rule 7     r_copy -> <empty>

Terminals, with rules where they appear

CM                   : 5
ID                   : 5 6
S                    : 4
TYPE                 : 4
error                : 

Nonterminals, with rules where they appear

decl                 : 3
goal                 : 0
lid                  : 4 5
list_decl            : 1 3
r_copy               : 5

Parsing method: LALR

state 0

    (0) S' -> . goal
    (1) goal -> . list_decl
    (2) list_decl -> .
    (3) list_decl -> . list_decl decl

    TYPE            reduce using rule 2 (list_decl -> .)
    $end            reduce using rule 2 (list_decl -> .)

    goal                           shift and go to state 1
    list_decl                      shift and go to state 2

state 1

    (0) S' -> goal .



state 2

    (1) goal -> list_decl .
    (3) list_decl -> list_decl . decl
    (4) decl -> . TYPE lid S

    $end            reduce using rule 1 (goal -> list_decl .)
    TYPE            shift and go to state 4

    decl                           shift and go to state 3

state 3

    (3) list_decl -> list_decl decl .

    TYPE            reduce using rule 3 (list_decl -> list_decl decl .)
    $end            reduce using rule 3 (list_decl -> list_decl decl .)


state 4

    (4) decl -> TYPE . lid S
    (5) lid -> . ID CM r_copy lid
    (6) lid -> . ID

    ID              shift and go to state 6

    lid                            shift and go to state 5

state 5

    (4) decl -> TYPE lid . S

    S               shift and go to state 7


state 6

    (5) lid -> ID . CM r_copy lid
    (6) lid -> ID .

    CM              shift and go to state 8
    S               reduce using rule 6 (lid -> ID .)


state 7

    (4) decl -> TYPE lid S .

    TYPE            reduce using rule 4 (decl -> TYPE lid S .)
    $end            reduce using rule 4 (decl -> TYPE lid S .)


state 8

    (5) lid -> ID CM . r_copy lid
    (7) r_copy -> .

    ID              reduce using rule 7 (r_copy -> .)

    r_copy                         shift and go to state 9

state 9

    (5) lid -> ID CM r_copy . lid
    (5) lid -> . ID CM r_copy lid
    (6) lid -> . ID

    ID              shift and go to state 6

    lid                            shift and go to state 10

state 10

    (5) lid -> ID CM r_copy lid .

    S               reduce using rule 5 (lid -> ID CM r_copy lid .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> products SEP receipts
Rule 2     products -> products product
Rule 3     products -> product
Rule 4     product -> ID EURO S
Rule 5     receipts -> receipts receipt
Rule 6     receipts -> <empty>
Rule 7     receipt -> ID C purchasedProducts S
Rule 8     purchasedProducts -> purchasedProducts CM purchasedProduct
Rule 9     purchasedProducts -> purchasedProduct
Rule 10    purchasedProduct -> INT ID

Terminals, with rules where they appear

C                    : 7
CM                   : 8
EURO                 : 4
ID                   : 4 7 10
INT                  : 10
S                    : 4 7
SEP                  : 1
error                : 

Nonterminals, with rules where they appear

product              : 2 3
products             : 1 2
prog                 : 0
purchasedProduct     : 8 9
purchasedProducts    : 7 8
receipt              : 5
receipts             : 1 5

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . products SEP receipts
    (2) products -> . products product
    (3) products -> . product
    (4) product -> . ID EURO S

    ID              shift and go to state 4

    prog                           shift and go to state 1
    products                       shift and go to state 2
    product                        shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> products . SEP receipts
    (2) products -> products . product
    (4) product -> . ID EURO S

    SEP             shift and go to state 5
    ID              shift and go to state 4

    product                        shift and go to state 6

state 3

    (3) products -> product .

    SEP             reduce using rule 3 (products -> product .)
    ID              reduce using rule 3 (products -> product .)


state 4

    (4) product -> ID . EURO S

    EURO            shift and go to state 7


state 5

    (1) prog -> products SEP . receipts
    (5) receipts -> . receipts receipt
    (6) receipts -> .

    ID              reduce using rule 6 (receipts -> .)
    $end            reduce using rule 6 (receipts -> .)

    receipts                       shift and go to state 8

state 6

    (2) products -> products product .

    SEP             reduce using rule 2 (products -> products product .)
    ID              reduce using rule 2 (products -> products product .)


state 7

    (4) product -> ID EURO . S

    S               shift and go to state 9


state 8

    (1) prog -> products SEP receipts .
    (5) receipts -> receipts . receipt
    (7) receipt -> . ID C purchasedProducts S

    $end            reduce using rule 1 (prog -> products SEP receipts .)
    ID              shift and go to state 11

    receipt                        shift and go to state 10

state 9

    (4) product -> ID EURO S .

    SEP             reduce using rule 4 (product -> ID EURO S .)
    ID              reduce using rule 4 (product -> ID EURO S .)


state 10

    (5) receipts -> receipts receipt .

    ID              reduce using rule 5 (receipts -> receipts receipt .)
    $end            reduce using rule 5 (receipts -> receipts receipt .)


state 11

    (7) receipt -> ID . C purchasedProducts S

    C               shift and go to state 12


state 12

    (7) receipt -> ID C . purchasedProducts S
    (8) purchasedProducts -> . purchasedProducts CM purchasedProduct
    (9) purchasedProducts -> . purchasedProduct
    (10) purchasedProduct -> . INT ID

    INT             shift and go to state 15

    purchasedProducts              shift and go to state 13
    purchasedProduct               shift and go to state 14

state 13

    (7) receipt -> ID C purchasedProducts . S
    (8) purchasedProducts -> purchasedProducts . CM purchasedProduct

    S               shift and go to state 16
    CM              shift and go to state 17


state 14

    (9) purchasedProducts -> purchasedProduct .

    S               reduce using rule 9 (purchasedProducts -> purchasedProduct .)
    CM              reduce using rule 9 (purchasedProducts -> purchasedProduct .)


state 15

    (10) purchasedProduct -> INT . ID

    ID              shift and go to state 18


state 16

    (7) receipt -> ID C purchasedProducts S .

    ID              reduce using rule 7 (receipt -> ID C purchasedProducts S .)
    $end            reduce using rule 7 (receipt -> ID C purchasedProducts S .)


state 17

    (8) purchasedProducts -> purchasedProducts CM . purchasedProduct
    (10) purchasedProduct -> . INT ID

    INT             shift and go to state 15

    purchasedProduct               shift and go to state 19

state 18

    (10) purchasedProduct -> INT ID .

    S               reduce using rule 10 (purchasedProduct -> INT ID .)
    CM              reduce using rule 10 (purchasedProduct -> INT ID .)


state 19

    (8) purchasedProducts -> purchasedProducts CM purchasedProduct .

    S               reduce using rule 8 (purchasedProducts -> purchasedProducts CM purchasedProduct .)
    CM              reduce using rule 8 (purchasedProducts -> purchasedProducts CM purchasedProduct .)


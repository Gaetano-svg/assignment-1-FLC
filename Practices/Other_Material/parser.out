Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CPP_COMMENT
    date
    nl
    odd_number
    ws

Grammar

Rule 0     S' -> prog
Rule 1     prog -> header SEP cars SEP race
Rule 2     header -> token1_l TOKEN2 S token1_l TOKEN3 S token1_l
Rule 3     header -> token1_l TOKEN3 S token1_l TOKEN2 S token1_l
Rule 4     token1_l -> token1_l TOKEN1 S
Rule 5     token1_l -> <empty>
Rule 6     cars -> car car
Rule 7     cars -> cars car car
Rule 8     car -> QSTRING SO speeds SC
Rule 9     speeds -> QSTRING EQ UINT MS
Rule 10    speeds -> speeds CM QSTRING EQ UINT MS
Rule 11    race -> print_min_max_l performances
Rule 12    print_min_max_l -> <empty>
Rule 13    print_min_max_l -> print_min_max_l min_max
Rule 14    min_max -> MINMAX RO QSTRING RC RO section_names RC S
Rule 15    section_names -> QSTRING
Rule 16    section_names -> section_names CM QSTRING
Rule 17    performances -> QSTRING ARROW parts S
Rule 18    performances -> performances QSTRING ARROW parts S
Rule 19    parts -> NT0 part
Rule 20    parts -> parts PIPE NT1 part
Rule 21    NT0 -> <empty>
Rule 22    NT1 -> <empty>
Rule 23    part -> PART UINT COL drive_stats
Rule 24    drive_stats -> QSTRING UINT M
Rule 25    drive_stats -> drive_stats CM QSTRING UINT M

Terminals, with rules where they appear

ARROW                : 17 18
CM                   : 10 16 25
COL                  : 23
CPP_COMMENT          : 
EQ                   : 9 10
M                    : 24 25
MINMAX               : 14
MS                   : 9 10
PART                 : 23
PIPE                 : 20
QSTRING              : 8 9 10 14 15 16 17 18 24 25
RC                   : 14 14
RO                   : 14 14
S                    : 2 2 3 3 4 14 17 18
SC                   : 8
SEP                  : 1 1
SO                   : 8
TOKEN1               : 4
TOKEN2               : 2 3
TOKEN3               : 2 3
UINT                 : 9 10 23 24 25
date                 : 
error                : 
nl                   : 
odd_number           : 
ws                   : 

Nonterminals, with rules where they appear

NT0                  : 19
NT1                  : 20
car                  : 6 6 7 7
cars                 : 1 7
drive_stats          : 23 25
header               : 1
min_max              : 13
part                 : 19 20
parts                : 17 18 20
performances         : 11 18
print_min_max_l      : 11 13
prog                 : 0
race                 : 1
section_names        : 14 16
speeds               : 8 10
token1_l             : 2 2 2 3 3 3 4

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . header SEP cars SEP race
    (2) header -> . token1_l TOKEN2 S token1_l TOKEN3 S token1_l
    (3) header -> . token1_l TOKEN3 S token1_l TOKEN2 S token1_l
    (4) token1_l -> . token1_l TOKEN1 S
    (5) token1_l -> .

    TOKEN2          reduce using rule 5 (token1_l -> .)
    TOKEN3          reduce using rule 5 (token1_l -> .)
    TOKEN1          reduce using rule 5 (token1_l -> .)

    prog                           shift and go to state 1
    header                         shift and go to state 2
    token1_l                       shift and go to state 3

state 1

    (0) S' -> prog .



state 2

    (1) prog -> header . SEP cars SEP race

    SEP             shift and go to state 4


state 3

    (2) header -> token1_l . TOKEN2 S token1_l TOKEN3 S token1_l
    (3) header -> token1_l . TOKEN3 S token1_l TOKEN2 S token1_l
    (4) token1_l -> token1_l . TOKEN1 S

    TOKEN2          shift and go to state 5
    TOKEN3          shift and go to state 6
    TOKEN1          shift and go to state 7


state 4

    (1) prog -> header SEP . cars SEP race
    (6) cars -> . car car
    (7) cars -> . cars car car
    (8) car -> . QSTRING SO speeds SC

    QSTRING         shift and go to state 10

    cars                           shift and go to state 8
    car                            shift and go to state 9

state 5

    (2) header -> token1_l TOKEN2 . S token1_l TOKEN3 S token1_l

    S               shift and go to state 11


state 6

    (3) header -> token1_l TOKEN3 . S token1_l TOKEN2 S token1_l

    S               shift and go to state 12


state 7

    (4) token1_l -> token1_l TOKEN1 . S

    S               shift and go to state 13


state 8

    (1) prog -> header SEP cars . SEP race
    (7) cars -> cars . car car
    (8) car -> . QSTRING SO speeds SC

    SEP             shift and go to state 14
    QSTRING         shift and go to state 10

    car                            shift and go to state 15

state 9

    (6) cars -> car . car
    (8) car -> . QSTRING SO speeds SC

    QSTRING         shift and go to state 10

    car                            shift and go to state 16

state 10

    (8) car -> QSTRING . SO speeds SC

    SO              shift and go to state 17


state 11

    (2) header -> token1_l TOKEN2 S . token1_l TOKEN3 S token1_l
    (4) token1_l -> . token1_l TOKEN1 S
    (5) token1_l -> .

    TOKEN3          reduce using rule 5 (token1_l -> .)
    TOKEN1          reduce using rule 5 (token1_l -> .)

    token1_l                       shift and go to state 18

state 12

    (3) header -> token1_l TOKEN3 S . token1_l TOKEN2 S token1_l
    (4) token1_l -> . token1_l TOKEN1 S
    (5) token1_l -> .

    TOKEN2          reduce using rule 5 (token1_l -> .)
    TOKEN1          reduce using rule 5 (token1_l -> .)

    token1_l                       shift and go to state 19

state 13

    (4) token1_l -> token1_l TOKEN1 S .

    TOKEN2          reduce using rule 4 (token1_l -> token1_l TOKEN1 S .)
    TOKEN3          reduce using rule 4 (token1_l -> token1_l TOKEN1 S .)
    TOKEN1          reduce using rule 4 (token1_l -> token1_l TOKEN1 S .)
    SEP             reduce using rule 4 (token1_l -> token1_l TOKEN1 S .)


state 14

    (1) prog -> header SEP cars SEP . race
    (11) race -> . print_min_max_l performances
    (12) print_min_max_l -> .
    (13) print_min_max_l -> . print_min_max_l min_max

    QSTRING         reduce using rule 12 (print_min_max_l -> .)
    MINMAX          reduce using rule 12 (print_min_max_l -> .)

    race                           shift and go to state 20
    print_min_max_l                shift and go to state 21

state 15

    (7) cars -> cars car . car
    (8) car -> . QSTRING SO speeds SC

    QSTRING         shift and go to state 10

    car                            shift and go to state 22

state 16

    (6) cars -> car car .

    SEP             reduce using rule 6 (cars -> car car .)
    QSTRING         reduce using rule 6 (cars -> car car .)


state 17

    (8) car -> QSTRING SO . speeds SC
    (9) speeds -> . QSTRING EQ UINT MS
    (10) speeds -> . speeds CM QSTRING EQ UINT MS

    QSTRING         shift and go to state 23

    speeds                         shift and go to state 24

state 18

    (2) header -> token1_l TOKEN2 S token1_l . TOKEN3 S token1_l
    (4) token1_l -> token1_l . TOKEN1 S

    TOKEN3          shift and go to state 25
    TOKEN1          shift and go to state 7


state 19

    (3) header -> token1_l TOKEN3 S token1_l . TOKEN2 S token1_l
    (4) token1_l -> token1_l . TOKEN1 S

    TOKEN2          shift and go to state 26
    TOKEN1          shift and go to state 7


state 20

    (1) prog -> header SEP cars SEP race .

    $end            reduce using rule 1 (prog -> header SEP cars SEP race .)


state 21

    (11) race -> print_min_max_l . performances
    (13) print_min_max_l -> print_min_max_l . min_max
    (17) performances -> . QSTRING ARROW parts S
    (18) performances -> . performances QSTRING ARROW parts S
    (14) min_max -> . MINMAX RO QSTRING RC RO section_names RC S

    QSTRING         shift and go to state 29
    MINMAX          shift and go to state 30

    performances                   shift and go to state 27
    min_max                        shift and go to state 28

state 22

    (7) cars -> cars car car .

    SEP             reduce using rule 7 (cars -> cars car car .)
    QSTRING         reduce using rule 7 (cars -> cars car car .)


state 23

    (9) speeds -> QSTRING . EQ UINT MS

    EQ              shift and go to state 31


state 24

    (8) car -> QSTRING SO speeds . SC
    (10) speeds -> speeds . CM QSTRING EQ UINT MS

    SC              shift and go to state 32
    CM              shift and go to state 33


state 25

    (2) header -> token1_l TOKEN2 S token1_l TOKEN3 . S token1_l

    S               shift and go to state 34


state 26

    (3) header -> token1_l TOKEN3 S token1_l TOKEN2 . S token1_l

    S               shift and go to state 35


state 27

    (11) race -> print_min_max_l performances .
    (18) performances -> performances . QSTRING ARROW parts S

    $end            reduce using rule 11 (race -> print_min_max_l performances .)
    QSTRING         shift and go to state 36


state 28

    (13) print_min_max_l -> print_min_max_l min_max .

    QSTRING         reduce using rule 13 (print_min_max_l -> print_min_max_l min_max .)
    MINMAX          reduce using rule 13 (print_min_max_l -> print_min_max_l min_max .)


state 29

    (17) performances -> QSTRING . ARROW parts S

    ARROW           shift and go to state 37


state 30

    (14) min_max -> MINMAX . RO QSTRING RC RO section_names RC S

    RO              shift and go to state 38


state 31

    (9) speeds -> QSTRING EQ . UINT MS

    UINT            shift and go to state 39


state 32

    (8) car -> QSTRING SO speeds SC .

    QSTRING         reduce using rule 8 (car -> QSTRING SO speeds SC .)
    SEP             reduce using rule 8 (car -> QSTRING SO speeds SC .)


state 33

    (10) speeds -> speeds CM . QSTRING EQ UINT MS

    QSTRING         shift and go to state 40


state 34

    (2) header -> token1_l TOKEN2 S token1_l TOKEN3 S . token1_l
    (4) token1_l -> . token1_l TOKEN1 S
    (5) token1_l -> .

    TOKEN1          reduce using rule 5 (token1_l -> .)
    SEP             reduce using rule 5 (token1_l -> .)

    token1_l                       shift and go to state 41

state 35

    (3) header -> token1_l TOKEN3 S token1_l TOKEN2 S . token1_l
    (4) token1_l -> . token1_l TOKEN1 S
    (5) token1_l -> .

    TOKEN1          reduce using rule 5 (token1_l -> .)
    SEP             reduce using rule 5 (token1_l -> .)

    token1_l                       shift and go to state 42

state 36

    (18) performances -> performances QSTRING . ARROW parts S

    ARROW           shift and go to state 43


state 37

    (17) performances -> QSTRING ARROW . parts S
    (19) parts -> . NT0 part
    (20) parts -> . parts PIPE NT1 part
    (21) NT0 -> .

    PART            reduce using rule 21 (NT0 -> .)

    parts                          shift and go to state 44
    NT0                            shift and go to state 45

state 38

    (14) min_max -> MINMAX RO . QSTRING RC RO section_names RC S

    QSTRING         shift and go to state 46


state 39

    (9) speeds -> QSTRING EQ UINT . MS

    MS              shift and go to state 47


state 40

    (10) speeds -> speeds CM QSTRING . EQ UINT MS

    EQ              shift and go to state 48


state 41

    (2) header -> token1_l TOKEN2 S token1_l TOKEN3 S token1_l .
    (4) token1_l -> token1_l . TOKEN1 S

    SEP             reduce using rule 2 (header -> token1_l TOKEN2 S token1_l TOKEN3 S token1_l .)
    TOKEN1          shift and go to state 7


state 42

    (3) header -> token1_l TOKEN3 S token1_l TOKEN2 S token1_l .
    (4) token1_l -> token1_l . TOKEN1 S

    SEP             reduce using rule 3 (header -> token1_l TOKEN3 S token1_l TOKEN2 S token1_l .)
    TOKEN1          shift and go to state 7


state 43

    (18) performances -> performances QSTRING ARROW . parts S
    (19) parts -> . NT0 part
    (20) parts -> . parts PIPE NT1 part
    (21) NT0 -> .

    PART            reduce using rule 21 (NT0 -> .)

    parts                          shift and go to state 49
    NT0                            shift and go to state 45

state 44

    (17) performances -> QSTRING ARROW parts . S
    (20) parts -> parts . PIPE NT1 part

    S               shift and go to state 50
    PIPE            shift and go to state 51


state 45

    (19) parts -> NT0 . part
    (23) part -> . PART UINT COL drive_stats

    PART            shift and go to state 53

    part                           shift and go to state 52

state 46

    (14) min_max -> MINMAX RO QSTRING . RC RO section_names RC S

    RC              shift and go to state 54


state 47

    (9) speeds -> QSTRING EQ UINT MS .

    SC              reduce using rule 9 (speeds -> QSTRING EQ UINT MS .)
    CM              reduce using rule 9 (speeds -> QSTRING EQ UINT MS .)


state 48

    (10) speeds -> speeds CM QSTRING EQ . UINT MS

    UINT            shift and go to state 55


state 49

    (18) performances -> performances QSTRING ARROW parts . S
    (20) parts -> parts . PIPE NT1 part

    S               shift and go to state 56
    PIPE            shift and go to state 51


state 50

    (17) performances -> QSTRING ARROW parts S .

    QSTRING         reduce using rule 17 (performances -> QSTRING ARROW parts S .)
    $end            reduce using rule 17 (performances -> QSTRING ARROW parts S .)


state 51

    (20) parts -> parts PIPE . NT1 part
    (22) NT1 -> .

    PART            reduce using rule 22 (NT1 -> .)

    NT1                            shift and go to state 57

state 52

    (19) parts -> NT0 part .

    S               reduce using rule 19 (parts -> NT0 part .)
    PIPE            reduce using rule 19 (parts -> NT0 part .)


state 53

    (23) part -> PART . UINT COL drive_stats

    UINT            shift and go to state 58


state 54

    (14) min_max -> MINMAX RO QSTRING RC . RO section_names RC S

    RO              shift and go to state 59


state 55

    (10) speeds -> speeds CM QSTRING EQ UINT . MS

    MS              shift and go to state 60


state 56

    (18) performances -> performances QSTRING ARROW parts S .

    QSTRING         reduce using rule 18 (performances -> performances QSTRING ARROW parts S .)
    $end            reduce using rule 18 (performances -> performances QSTRING ARROW parts S .)


state 57

    (20) parts -> parts PIPE NT1 . part
    (23) part -> . PART UINT COL drive_stats

    PART            shift and go to state 53

    part                           shift and go to state 61

state 58

    (23) part -> PART UINT . COL drive_stats

    COL             shift and go to state 62


state 59

    (14) min_max -> MINMAX RO QSTRING RC RO . section_names RC S
    (15) section_names -> . QSTRING
    (16) section_names -> . section_names CM QSTRING

    QSTRING         shift and go to state 63

    section_names                  shift and go to state 64

state 60

    (10) speeds -> speeds CM QSTRING EQ UINT MS .

    SC              reduce using rule 10 (speeds -> speeds CM QSTRING EQ UINT MS .)
    CM              reduce using rule 10 (speeds -> speeds CM QSTRING EQ UINT MS .)


state 61

    (20) parts -> parts PIPE NT1 part .

    S               reduce using rule 20 (parts -> parts PIPE NT1 part .)
    PIPE            reduce using rule 20 (parts -> parts PIPE NT1 part .)


state 62

    (23) part -> PART UINT COL . drive_stats
    (24) drive_stats -> . QSTRING UINT M
    (25) drive_stats -> . drive_stats CM QSTRING UINT M

    QSTRING         shift and go to state 66

    drive_stats                    shift and go to state 65

state 63

    (15) section_names -> QSTRING .

    RC              reduce using rule 15 (section_names -> QSTRING .)
    CM              reduce using rule 15 (section_names -> QSTRING .)


state 64

    (14) min_max -> MINMAX RO QSTRING RC RO section_names . RC S
    (16) section_names -> section_names . CM QSTRING

    RC              shift and go to state 67
    CM              shift and go to state 68


state 65

    (23) part -> PART UINT COL drive_stats .
    (25) drive_stats -> drive_stats . CM QSTRING UINT M

    S               reduce using rule 23 (part -> PART UINT COL drive_stats .)
    PIPE            reduce using rule 23 (part -> PART UINT COL drive_stats .)
    CM              shift and go to state 69


state 66

    (24) drive_stats -> QSTRING . UINT M

    UINT            shift and go to state 70


state 67

    (14) min_max -> MINMAX RO QSTRING RC RO section_names RC . S

    S               shift and go to state 71


state 68

    (16) section_names -> section_names CM . QSTRING

    QSTRING         shift and go to state 72


state 69

    (25) drive_stats -> drive_stats CM . QSTRING UINT M

    QSTRING         shift and go to state 73


state 70

    (24) drive_stats -> QSTRING UINT . M

    M               shift and go to state 74


state 71

    (14) min_max -> MINMAX RO QSTRING RC RO section_names RC S .

    QSTRING         reduce using rule 14 (min_max -> MINMAX RO QSTRING RC RO section_names RC S .)
    MINMAX          reduce using rule 14 (min_max -> MINMAX RO QSTRING RC RO section_names RC S .)


state 72

    (16) section_names -> section_names CM QSTRING .

    RC              reduce using rule 16 (section_names -> section_names CM QSTRING .)
    CM              reduce using rule 16 (section_names -> section_names CM QSTRING .)


state 73

    (25) drive_stats -> drive_stats CM QSTRING . UINT M

    UINT            shift and go to state 75


state 74

    (24) drive_stats -> QSTRING UINT M .

    CM              reduce using rule 24 (drive_stats -> QSTRING UINT M .)
    S               reduce using rule 24 (drive_stats -> QSTRING UINT M .)
    PIPE            reduce using rule 24 (drive_stats -> QSTRING UINT M .)


state 75

    (25) drive_stats -> drive_stats CM QSTRING UINT . M

    M               shift and go to state 76


state 76

    (25) drive_stats -> drive_stats CM QSTRING UINT M .

    CM              reduce using rule 25 (drive_stats -> drive_stats CM QSTRING UINT M .)
    S               reduce using rule 25 (drive_stats -> drive_stats CM QSTRING UINT M .)
    PIPE            reduce using rule 25 (drive_stats -> drive_stats CM QSTRING UINT M .)

